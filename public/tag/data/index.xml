<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data | Paul Apivat</title>
    <link>/tag/data/</link>
      <atom:link href="/tag/data/index.xml" rel="self" type="application/rss+xml" />
    <description>data</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2022 Paul Apivat Hanvongse. All Rights Reserved.</copyright><lastBuildDate>Thu, 14 Apr 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>data</title>
      <link>/tag/data/</link>
    </image>
    
    <item>
      <title>Demystifying Dune Analytics</title>
      <link>/post/demystifying_dune_analytics/</link>
      <pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/post/demystifying_dune_analytics/</guid>
      <description>&lt;p&gt;Although I had been using Dune to create 
&lt;a href=&#34;https://dune.xyz/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dashboards&lt;/a&gt; for several months, much of the tool remained confusing. I would frequently get thrown off to open a new query and see this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./dune_table_list.png&#34; alt=&#34;dune table list&#34;&gt;&lt;/p&gt;
&lt;p&gt;I struggled to know &lt;em&gt;which&lt;/em&gt; table to use, until the 
&lt;a href=&#34;https://ournetwork.mirror.xyz/gP16wLY-9BA1E_ZuOSv1EUAgYGfK9mELNza8cfgMWPQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OurNetwork Learn&lt;/a&gt; courses, led by 
&lt;a href=&#34;https://twitter.com/andrewhong5297&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Andrew Hong&lt;/a&gt; was released.&lt;/p&gt;
&lt;p&gt;While I&amp;rsquo;m still making my way through the materials, I&amp;rsquo;ve picked up some tips for other aspiring web3 data analysts.&lt;/p&gt;
&lt;h3 id=&#34;source-tables&#34;&gt;Source Tables&lt;/h3&gt;
&lt;p&gt;First, &lt;em&gt;most&lt;/em&gt; tables can be created from these three*:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ethereum.&amp;ldquo;transactions&amp;rdquo;&lt;/li&gt;
&lt;li&gt;ethereum.&amp;ldquo;logs&amp;rdquo;&lt;/li&gt;
&lt;li&gt;ethereum.&amp;ldquo;traces&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;*Also worth getting acquainted with these tables:&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;ethereum.&amp;ldquo;contracts&amp;rdquo;&lt;/li&gt;
&lt;li&gt;ethereum.&amp;ldquo;blocks&amp;rdquo;&lt;/li&gt;
&lt;li&gt;ethereum.&amp;ldquo;sigantures&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This fact alone elevated my understanding of Dune. This &lt;strong&gt;Table Mapping Guide&lt;/strong&gt; from 
&lt;a href=&#34;https://www.notion.so/Table-Mapping-Guide-2c12f7c8c5304aabb8078fcde3ce38f9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OurNetwork Learn Sessions&lt;/a&gt; provides a really nice graphical overview:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./table_mapping_guide_screenshot.png&#34; alt=&#34;table mapping guide&#34;&gt;&lt;/p&gt;
&lt;p&gt;It breaks down what happens in a smart contract transaction, at a high level. Take a transaction included in one block. For example, your wallet signs a transaction to send some tokens. There is a transfer function that&amp;rsquo;s called. Then an event is emitted/logged on-chain before it happens all over again in the next block. A caveat is the transfer of Ether as the native currency of Ethereum is technically not a token.&lt;/p&gt;
&lt;p&gt;One thing to note is that Dune Analytics maps &lt;strong&gt;on-chain&lt;/strong&gt; transaction (excluding pre-chain transactions, which would require engaging with a JSON-RPC endpoint for mempool analysis, out of the scope of this post).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From these three* tables, you can build up other tables in Dune.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This line in the guide made things click for me.&lt;/p&gt;
&lt;p&gt;You might wonder why bother with &amp;ldquo;other tables&amp;rdquo; when you can derive all the queries you need from these main 3. Speed and efficiency. Querying the &lt;code&gt;ethereum&lt;/code&gt; tables is akin to querying a large chain.&lt;/p&gt;
&lt;p&gt;Often times your queries simply time out, which leads us to the first step of any Dune Analytics analysis.&lt;/p&gt;
&lt;h3 id=&#34;decoding-the-contract&#34;&gt;Decoding the Contract&lt;/h3&gt;
&lt;p&gt;After multiple queries getting time out, I realized my approach was too slow and inefficient. To avoid this, check 
&lt;a href=&#34;https://dune.xyz/0xBoxer/Is-my-Contract-decoded-yet?contract_address=0x74C6CadE3eF61d64dcc9b97490d9FbB231e4BdCc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Is my Contract decoded yet?&lt;/a&gt; * courtesy of 
&lt;a href=&#34;https://twitter.com/0xBoxer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;0xBoxer&lt;/a&gt; at Dune.&lt;/p&gt;
&lt;p&gt;*Separate check for contracts on Polygon, xDai, BSC etc.&lt;/p&gt;
&lt;p&gt;The team has done the heavy data-engineering lift of going through smart contracts, decode individual functions, building a pipeline into SQL tables for easier querying. If you don&amp;rsquo;t see your contract of interest, you can 
&lt;a href=&#34;https://dune.xyz/contracts/new&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;submit it for decoding.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other 
&lt;a href=&#34;https://www.notion.so/Dune-Utility-Queries-6e6828030407476eac0bc12a021cb6c5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;useful Dune Utility Queries&lt;/a&gt; can be found 
&lt;a href=&#34;https://www.notion.so/Dune-Utility-Queries-6e6828030407476eac0bc12a021cb6c5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;using-the-main-ethereum-tables&#34;&gt;Using the main ethereum tables&lt;/h3&gt;
&lt;p&gt;Sometimes a contract has not been decoded and you can&amp;rsquo;t afford to wait. You&amp;rsquo;ll need to rely on the main &lt;code&gt;ethereum&lt;/code&gt; tables.&lt;/p&gt;
&lt;p&gt;For example, I wanted to explore deposits and withdraws from the 
&lt;a href=&#34;https://app.ribbon.finance/v2/theta-vault/T-AAVE-C&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AAVE Theta Covered Call Vault&lt;/a&gt; at Ribbon Finance.&lt;/p&gt;
&lt;p&gt;Here was my workflow:&lt;/p&gt;
&lt;p&gt;First, grab the smart contract address for this vault; check on etherscan:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./aave_theta_etherscan.png&#34; alt=&#34;aave theta etherscan&#34;&gt;&lt;/p&gt;
&lt;p&gt;Second, check to see if this contract has been 
&lt;a href=&#34;https://dune.xyz/0xBoxer/Is-my-Contract-decoded-yet?&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;decoded&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./aave_contract_decoded.png&#34; alt=&#34;aave contract decoded&#34;&gt;&lt;/p&gt;
&lt;p&gt;Third, run a simple query using the &lt;strong&gt;provided table name&lt;/strong&gt; (i.e., RibbonThetaVault) filtering for this contract:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./aave_theta_sample_queries.png&#34; alt=&#34;aave theta sample queries&#34;&gt;&lt;/p&gt;
&lt;p&gt;I ran 4 sample queries filtering for the Aave Theta Vault contract address using the provided &lt;code&gt;RibbonThetaVault&lt;/code&gt; table. Since I was interested in deposits and withdraws that&amp;rsquo;s where I started. Out of the four tables, only the highlighted one turned up any results &lt;code&gt;ribbon.&amp;quot;RibbonThetaVault_call_deposit&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Because I would need &lt;strong&gt;both&lt;/strong&gt; deposits and withdraws, I opted not to rely on these tables and instead use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;erc20.&amp;quot;ERC20_evt_Transfer&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ethereum.&amp;quot;logs&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rationale being that we are interested in deposits and withdrawals of a the &lt;code&gt;Ribbon Aave Theta Vault&lt;/code&gt; token, an &lt;strong&gt;ERC20&lt;/strong&gt; token so the Dune abstraction table of &lt;strong&gt;erc20.ERC20_evt_Transfer&lt;/strong&gt; can filter for transactions - &amp;ldquo;to&amp;rdquo;&amp;quot; (deposit) and &amp;ldquo;from&amp;rdquo; (withdrawal) - involving this token. Moreover, &lt;code&gt;topic1&lt;/code&gt; containing either a &lt;strong&gt;deposit&lt;/strong&gt; or &lt;strong&gt;withdraw&lt;/strong&gt; event can be decoded with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bytea2numeric( decode ( SUBSTRING ( encode(el.&amp;quot;data&amp;quot;, &#39;hex&#39;) , 1, 64 ), &#39;hex&#39;))/10^18&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and filtered by either a deposit or withdraw event hash:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;WHERE el.topic1 = &#39;\x90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15&#39; -- Deposit into Vault 

WHERE el.topic1 = &#39;\xf279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568&#39; -- Withdraw from Vault

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(h/t to Andrew Hong&amp;rsquo;s 
&lt;a href=&#34;https://towardsdatascience.com/your-guide-to-intermediate-sql-while-learning-ethereum-at-the-same-time-7b25119ef1e2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Intermediate SQL guide&lt;/a&gt; for this technique.)&lt;/p&gt;
&lt;p&gt;I suspect there could be alternative solutions for getting deposit/withdraw from Ribbon vaults and will update this post with new information.&lt;/p&gt;
&lt;h3 id=&#34;new-insights&#34;&gt;New Insights&lt;/h3&gt;
&lt;p&gt;NOTE: It may be possible to rely only on the &lt;code&gt;erc20.ERC20_evt_Transfer&lt;/code&gt; table without &lt;code&gt;ethereum.logs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Distinguishing between:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;T-AAVE-C&lt;/code&gt; vault contract &lt;code&gt;0xe63151A0Ed4e5fafdc951D877102cf0977Abd365&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;rAAVE-THETA&lt;/code&gt; Token Tracker: &lt;code&gt;0xe63151A0Ed4e5fafdc951D877102cf0977Abd365&lt;/code&gt; (token received for depositing AAVE)&lt;/li&gt;
&lt;li&gt;AAVE Token: &lt;code&gt;0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9&lt;/code&gt; (Frontend: Current Vault Deposits &amp;amp; Max Vault Capacity in AAVE tokens)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s a sample query integrating these two addresses to yield the Aave Token Holding within the &lt;strong&gt;contract wallet&lt;/strong&gt;, not the 
&lt;a href=&#34;https://app.ribbon.finance/v2/theta-vault/T-AAVE-C&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Current Vault Deposits&lt;/a&gt; on the frontend:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;WITH total_aave_vault_txns AS (
SELECT 
    &amp;quot;from&amp;quot;,
    &amp;quot;to&amp;quot;,
    value/10^18 AS aave_amt,
    contract_address,
    evt_block_time
FROM erc20.&amp;quot;ERC20_evt_Transfer&amp;quot;
WHERE contract_address = &#39;\x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9&#39;
AND &amp;quot;to&amp;quot; = &#39;\xe63151A0Ed4e5fafdc951D877102cf0977Abd365&#39;

UNION ALL

SELECT 
    &amp;quot;from&amp;quot;,
    &amp;quot;to&amp;quot;,
    -value/10^18 AS aave_amt,
    contract_address,
    evt_block_time
FROM erc20.&amp;quot;ERC20_evt_Transfer&amp;quot;
WHERE contract_address = &#39;\x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9&#39;
AND &amp;quot;from&amp;quot; = &#39;\xe63151A0Ed4e5fafdc951D877102cf0977Abd365&#39;
)
SELECT
    SUM(aave_amt)  -- 573.3053547183199
FROM total_aave_vault_txns 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above query yields the same number as Aave Token as assets in wallet &lt;strong&gt;not&lt;/strong&gt; deposits in Vault. We may have to rely on &lt;code&gt;ethereum.logs&lt;/code&gt; anyways.&lt;/p&gt;
&lt;h3 id=&#34;further-exploration&#34;&gt;Further exploration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Proxy Contracts: &lt;code&gt;AdminUpgradeabilityProxy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;reading smart contract function/events, on Github/Etherscan, and find it on 3 main ethereum tables&lt;/li&gt;
&lt;li&gt;query optimization&lt;/li&gt;
&lt;li&gt;Dune User generated views?&lt;/li&gt;
&lt;li&gt;Other abstractions: dex.trades, prices.usd, erc20._transfer, erc20._evt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;rsquo;d like help with on-chain analysis, please 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
