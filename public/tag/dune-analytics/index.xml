<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dune Analytics | Paul Apivat</title>
    <link>/tag/dune-analytics/</link>
      <atom:link href="/tag/dune-analytics/index.xml" rel="self" type="application/rss+xml" />
    <description>Dune Analytics</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2022 Paul Apivat Hanvongse. All Rights Reserved.</copyright><lastBuildDate>Sat, 16 Apr 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Dune Analytics</title>
      <link>/tag/dune-analytics/</link>
    </image>
    
    <item>
      <title>Ribbon Finance Aave Theta Vault</title>
      <link>/post/case_ribbon_aave_vault/</link>
      <pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/post/case_ribbon_aave_vault/</guid>
      <description>&lt;p&gt;I wanted to explore deposits and withdraws from the 
&lt;a href=&#34;https://app.ribbon.finance/v2/theta-vault/T-AAVE-C&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AAVE Theta Covered Call Vault&lt;/a&gt; at Ribbon Finance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./aave_vault_frontend.png&#34; alt=&#34;aave vault frontend&#34;&gt;&lt;/p&gt;
&lt;p&gt;I am specifically trying to query the figures reported on their frontend (i.e., 5,725.12 AAVE as Current Vault Deposits).&lt;/p&gt;
&lt;p&gt;Here was my workflow:&lt;/p&gt;
&lt;p&gt;First, grab the smart contract address for this vault: &lt;code&gt;0xe63151A0Ed4e5fafdc951D877102cf0977Abd365&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;check on etherscan:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./aave_theta_etherscan.png&#34; alt=&#34;aave theta etherscan&#34;&gt;&lt;/p&gt;
&lt;p&gt;Second, check to see if this contract has been 
&lt;a href=&#34;https://dune.xyz/0xBoxer/Is-my-Contract-decoded-yet?contract_address_t419c6=0xe63151A0Ed4e5fafdc951D877102cf0977Abd365&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;decoded&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./aave_contract_decoded.png&#34; alt=&#34;aave contract decoded&#34;&gt;&lt;/p&gt;
&lt;p&gt;It has been decoded at the following table: &lt;code&gt;ribbon.RibbonThetaVault&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Third, run simple queries using the &lt;strong&gt;provided table name&lt;/strong&gt; filtering for this contract:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./aave_theta_sample_queries.png&#34; alt=&#34;aave theta sample queries&#34;&gt;&lt;/p&gt;
&lt;p&gt;I ran 4 queries filtering for the &lt;code&gt;0xe63151A0Ed4e5fafdc951D877102cf0977Abd365&lt;/code&gt; contract address (Aave Theta Vault). Since I was interested in deposits and withdraws that&amp;rsquo;s where I started.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Question: If interested in deposits/withdraws from a smart contract, is it safe to assume either:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;contractname_call_deposit&amp;rsquo;,&lt;/li&gt;
&lt;li&gt;&amp;lsquo;contractname_call_withdraw&amp;rsquo;,&lt;/li&gt;
&lt;li&gt;&amp;lsquo;contractname_evt_deposit&amp;rsquo;,&lt;/li&gt;
&lt;li&gt;&amp;lsquo;contractname_evt_withdraw&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;would be a good place to start?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Out of the four tables, only &lt;code&gt;ribbon.&amp;quot;RibbonThetaVault_call_deposit&amp;quot;&lt;/code&gt; turned up any results.&lt;/p&gt;
&lt;p&gt;Because I would need &lt;strong&gt;both&lt;/strong&gt; deposits and withdraws, and only &amp;ldquo;_call_deposit&amp;rdquo; is returning any results, I am going to try an alternative abstraction table:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;erc20.&amp;quot;ERC20_evt_Transfer&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since we are interested in deposits and withdrawals from the &lt;code&gt;Ribbon Aave Theta Vault&lt;/code&gt; token, an &lt;strong&gt;ERC20&lt;/strong&gt; token, the &lt;strong&gt;erc20.ERC20_evt_Transfer&lt;/strong&gt; table can be filtered for transactions - &amp;ldquo;to&amp;rdquo;&amp;quot; (deposit) and &amp;ldquo;from&amp;rdquo; (withdrawal) - involving this token.&lt;/p&gt;
&lt;p&gt;To recap, the addresses involved are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the &lt;code&gt;T-AAVE-C&lt;/code&gt; 
&lt;a href=&#34;%28https://app.ribbon.finance/v2/theta-vault/T-AAVE-C%29&#34;&gt;Vault contract&lt;/a&gt; &lt;code&gt;0xe63151A0Ed4e5fafdc951D877102cf0977Abd365&lt;/code&gt; (same as &lt;code&gt;rAAVE-THETA&lt;/code&gt; Token)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AAVE Token address: &lt;code&gt;0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9&lt;/code&gt; (users of the vault need to deposit AAVE Tokens)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s a sample query integrating these two addresses:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;WITH total_aave_vault_txns AS (
SELECT 
    &amp;quot;from&amp;quot;,
    &amp;quot;to&amp;quot;,
    value/10^18 AS aave_amt,
    contract_address,
    evt_block_time
FROM erc20.&amp;quot;ERC20_evt_Transfer&amp;quot;
WHERE contract_address = &#39;\x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9&#39;
AND &amp;quot;to&amp;quot; = &#39;\xe63151A0Ed4e5fafdc951D877102cf0977Abd365&#39;

UNION ALL

SELECT 
    &amp;quot;from&amp;quot;,
    &amp;quot;to&amp;quot;,
    -value/10^18 AS aave_amt,
    contract_address,
    evt_block_time
FROM erc20.&amp;quot;ERC20_evt_Transfer&amp;quot;
WHERE contract_address = &#39;\x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9&#39;
AND &amp;quot;from&amp;quot; = &#39;\xe63151A0Ed4e5fafdc951D877102cf0977Abd365&#39;
)
SELECT
    SUM(aave_amt)  -- 254.806773340645
FROM total_aave_vault_txns 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This 
&lt;a href=&#34;https://dune.xyz/queries/609486&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;query&lt;/a&gt; yields the same number as Aave Token contained in the contract&amp;rsquo;s wallet, which is &lt;code&gt;254.806773340645&lt;/code&gt; at the time of this writing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./aave_vault_wallet.png&#34; alt=&#34;aave vault wallet&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is fine and all, but not what I&amp;rsquo;m looking for ðŸ˜¢ Rather than the amount of AAVE token in the contract&amp;rsquo;s wallet (~254), I&amp;rsquo;m looking to see how many AAVE tokens users have &lt;em&gt;deposited&lt;/em&gt; in the vault (~5725), so now I&amp;rsquo;m going to dig into the contract.&lt;/p&gt;
&lt;h3 id=&#34;exploring-the-contract-code&#34;&gt;Exploring the Contract Code&lt;/h3&gt;
&lt;p&gt;I search and found 
&lt;a href=&#34;https://github.com/ribbon-finance/ribbon-v2/tree/master/contracts/vaults&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ribbon Finance V2&amp;rsquo;s Vault repo&lt;/a&gt;, which contains code for their most updated vaults. While some vaults, like stETH and Yearn, have their own folders, the Aave Theta vault does not so I navigate to &amp;ldquo;BaseVaults&amp;rdquo; to see solidity code for &lt;code&gt;RibbonThetaVault.sol&lt;/code&gt;, which is the same contract name I found when checking to see if the &lt;code&gt;0xe63151A0Ed4e5fafdc951D877102cf0977Abd365&lt;/code&gt; (Aave Theta vault) had been decoded (see above).&lt;/p&gt;
&lt;p&gt;I looked through two files in the 
&lt;a href=&#34;https://github.com/ribbon-finance/ribbon-v2/tree/master/contracts/vaults/BaseVaults&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BaseVaults&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RibbonThetaVault.sol&lt;/li&gt;
&lt;li&gt;base/RibbonVault.sol&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I start with &lt;code&gt;RibbonThetaVault.sol&lt;/code&gt; as this matches the table name in Dune when checking if the contract address had been decoded. I ran a search for &amp;ldquo;deposit&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proxy Contracts: &lt;code&gt;AdminUpgradeabilityProxy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;reading smart contract function/events, on Github/Etherscan, and find it on 3 main ethereum tables&lt;/li&gt;
&lt;li&gt;query optimization&lt;/li&gt;
&lt;li&gt;Dune User generated views?&lt;/li&gt;
&lt;li&gt;Other abstractions: dex.trades, prices.usd, erc20._transfer, erc20._evt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;rsquo;d like help with on-chain analysis, please 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Demystifying Dune Analytics</title>
      <link>/post/demystifying_dune_analytics/</link>
      <pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/post/demystifying_dune_analytics/</guid>
      <description>&lt;p&gt;Although I had been using Dune to create 
&lt;a href=&#34;https://dune.xyz/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dashboards&lt;/a&gt; for several months, much of the tool remained confusing. I would frequently get thrown off to open a new query and see this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./dune_table_list.png&#34; alt=&#34;dune table list&#34;&gt;&lt;/p&gt;
&lt;p&gt;I struggled to know &lt;em&gt;which&lt;/em&gt; table to use, until the 
&lt;a href=&#34;https://ournetwork.mirror.xyz/gP16wLY-9BA1E_ZuOSv1EUAgYGfK9mELNza8cfgMWPQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OurNetwork Learn&lt;/a&gt; courses, led by 
&lt;a href=&#34;https://twitter.com/andrewhong5297&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Andrew Hong&lt;/a&gt; was released.&lt;/p&gt;
&lt;p&gt;While I&amp;rsquo;m still making my way through the materials, I&amp;rsquo;ve picked up some tips for other aspiring web3 data analysts.&lt;/p&gt;
&lt;h3 id=&#34;source-tables&#34;&gt;Source Tables&lt;/h3&gt;
&lt;p&gt;First, &lt;em&gt;most&lt;/em&gt; tables can be created from these three*:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ethereum.&amp;ldquo;transactions&amp;rdquo;&lt;/li&gt;
&lt;li&gt;ethereum.&amp;ldquo;logs&amp;rdquo;&lt;/li&gt;
&lt;li&gt;ethereum.&amp;ldquo;traces&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;*Also worth getting acquainted with these tables:&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;ethereum.&amp;ldquo;contracts&amp;rdquo;&lt;/li&gt;
&lt;li&gt;ethereum.&amp;ldquo;blocks&amp;rdquo;&lt;/li&gt;
&lt;li&gt;ethereum.&amp;ldquo;sigantures&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This fact alone elevated my understanding of Dune. This &lt;strong&gt;Table Mapping Guide&lt;/strong&gt; from 
&lt;a href=&#34;https://www.notion.so/Table-Mapping-Guide-2c12f7c8c5304aabb8078fcde3ce38f9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OurNetwork Learn Sessions&lt;/a&gt; provides a really nice graphical overview:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./table_mapping_guide_screenshot.png&#34; alt=&#34;table mapping guide&#34;&gt;&lt;/p&gt;
&lt;p&gt;It breaks down what happens in a smart contract transaction, at a high level. Take a transaction included in one block. For example, your wallet signs a transaction to send some tokens. There is a transfer function that&amp;rsquo;s called. Then an event is emitted/logged on-chain before it happens all over again in the next block. A caveat is the transfer of Ether as the native currency of Ethereum is technically not a token.&lt;/p&gt;
&lt;p&gt;One thing to note is that Dune Analytics maps &lt;strong&gt;on-chain&lt;/strong&gt; transaction (excluding pre-chain transactions, which would require engaging with a JSON-RPC endpoint for mempool analysis, out of the scope of this post).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From these three* tables, you can build up other tables in Dune.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This line in the guide made things click for me.&lt;/p&gt;
&lt;p&gt;You might wonder why bother with &amp;ldquo;other tables&amp;rdquo; when you can derive all the queries you need from these main 3. Speed and efficiency. Querying the &lt;code&gt;ethereum&lt;/code&gt; tables is akin to querying a large chain.&lt;/p&gt;
&lt;p&gt;Often times your queries simply time out, which leads us to the first step of any Dune Analytics analysis.&lt;/p&gt;
&lt;h3 id=&#34;decoding-the-contract&#34;&gt;Decoding the Contract&lt;/h3&gt;
&lt;p&gt;After multiple queries getting time out, I realized my approach was too slow and inefficient. To avoid this, check 
&lt;a href=&#34;https://dune.xyz/0xBoxer/Is-my-Contract-decoded-yet?contract_address=0x74C6CadE3eF61d64dcc9b97490d9FbB231e4BdCc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Is my Contract decoded yet?&lt;/a&gt; * courtesy of 
&lt;a href=&#34;https://twitter.com/0xBoxer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;0xBoxer&lt;/a&gt; at Dune.&lt;/p&gt;
&lt;p&gt;*Separate check for contracts on Polygon, xDai, BSC etc.&lt;/p&gt;
&lt;p&gt;The team has done the heavy data-engineering lift of going through smart contracts, decode individual functions, building a pipeline into SQL tables for easier querying. If you don&amp;rsquo;t see your contract of interest, you can 
&lt;a href=&#34;https://dune.xyz/contracts/new&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;submit it for decoding.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other 
&lt;a href=&#34;https://www.notion.so/Dune-Utility-Queries-6e6828030407476eac0bc12a021cb6c5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;useful Dune Utility Queries&lt;/a&gt; can be found 
&lt;a href=&#34;https://www.notion.so/Dune-Utility-Queries-6e6828030407476eac0bc12a021cb6c5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;converting-bytecode-to-numbers&#34;&gt;Converting Bytecode to Numbers&lt;/h3&gt;
&lt;p&gt;We can decode &lt;code&gt;topic1&lt;/code&gt; containing either a &lt;strong&gt;deposit&lt;/strong&gt; or &lt;strong&gt;withdraw&lt;/strong&gt; amount with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bytea2numeric( decode ( SUBSTRING ( encode(el.&amp;quot;data&amp;quot;, &#39;hex&#39;) , 1, 64 ), &#39;hex&#39;))/10^18&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and filter by either a deposit or withdraw event hash:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;WHERE el.topic1 = &#39;\x90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15&#39; -- Deposit into Vault 

WHERE el.topic1 = &#39;\xf279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568&#39; -- Withdraw from Vault

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(h/t to Andrew Hong&amp;rsquo;s 
&lt;a href=&#34;https://towardsdatascience.com/your-guide-to-intermediate-sql-while-learning-ethereum-at-the-same-time-7b25119ef1e2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Intermediate SQL guide&lt;/a&gt; for this technique.)&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like help with on-chain analysis, please 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My journey to web3 data</title>
      <link>/post/before_crypto/</link>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/post/before_crypto/</guid>
      <description>&lt;h3 id=&#34;before-crypto&#34;&gt;Before Crypto&lt;/h3&gt;
&lt;p&gt;I entered crypto in the fall of 2017, upon buying my first BTC &amp;amp; ETH as incentive to keep up with the industry, but my journey &lt;em&gt;actually&lt;/em&gt; started in 2012 when I took a Ruby on Rails Backend programming course. Up till that point, my training had been in organizational psychology, but the seeds for data work were planted then as I took the 1 train from 116th and Broadway to the Flat Iron district for evening classes at General Assembly.&lt;/p&gt;
&lt;p&gt;After completing my 
&lt;a href=&#34;https://www.proquest.com/openview/c6b31a2a839ca8d292087c35e86ec137/1?pq-origsite=gscholar&amp;amp;cbl=18750&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dissertation&lt;/a&gt; in 2014, I worked in higher education, exploring how organizations balance social and financial goals. At the time, I was interested in how leaders helped their organizations manage the social-financial tension. When presented with an opportunity to see an 
&lt;a href=&#34;https://www.learneducation.co.th/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;education company&lt;/a&gt; pursue both social and financial missions, I jumped in to the operational side. My partner and I led an in-house edtech startup, while supporting the parent company&amp;rsquo;s mission to subsidize education for low income schools.&lt;/p&gt;
&lt;p&gt;I came away with two key thoughts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Social enterprises are harder to operate than traditional for-profit enterprises. Good in theory, I have yet to find one that sustainably works in practice.&lt;/li&gt;
&lt;li&gt;Social enterprises might be more of a bandaid to a systemic problem of underfunding public goods.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By the 2017, I was looking for a change and bought BTC &amp;amp; ETH at the market top. I spent the next year absorbing white papers and attending conferences (Deconomy in Korea, Ethereum Community Conference in Toronto). Despite the market crash, I knew permissionless, censorship resistant, public networks were here to stay.&lt;/p&gt;
&lt;p&gt;Having skin in the game got me down the rabbit hole. The interdisciplinary nature of the industry kept me staying. Crypto appeared to have implications for multiple strands in my life from economics, to software and data, to organizing and coordination, the intellectual stimulation of was endless.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Quick tangent.&lt;/p&gt;
&lt;p&gt;My country has vacillated between democratically elected governments and autocratic military regimes since 1932. In the 70&amp;rsquo;s, politically active college students (my parents&#39; generation) protested military regime, resulting in a bloody clash. Fast foward 50 years and we &lt;em&gt;still&lt;/em&gt; have people protesting. Several decades worth of empirical data suggest protesting to be headline grabbing, but ultimately unsustainable.&lt;/p&gt;
&lt;p&gt;The fact that crypto represents the chance at a new system is compelling for me. The alternative is to reform old decaying institutions from within or wait for old dinosaurs to die out. I&amp;rsquo;ve seen that story and don&amp;rsquo;t have another 50 years to wait around for evolution. Crypto represents a &lt;em&gt;chance&lt;/em&gt; at punctuated equilibrium and i&amp;rsquo;m here for it.&lt;/p&gt;
&lt;p&gt;Insert &amp;ldquo;remind me in 20 years&amp;rdquo; tweet.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I spent 2019 leveling up my technical skills, taking a web development bootcamp (Lambda School, now BloomTech), doing consulting (AWRL) and briefly working for a startup in the Cosmos ecosystem (TruStory).&lt;/p&gt;
&lt;p&gt;Things started coalescing in 2020 as I placed 2nd in a data visualization competition to be presented at the Wharton People Analytics conference before Covid19 shut the world down. I continued to hone my data skills.&lt;/p&gt;
&lt;p&gt;Another inflection point came with the Bankless membership airdrop in May 2021; I got in at the ground level and started contributing.&lt;/p&gt;
&lt;p&gt;I spent 2021 enabling capital and coordination through on- and off-chain data at 
&lt;a href=&#34;https://www.bankless.community/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bankless DAO&lt;/a&gt; as a core contributor ( 
&lt;a href=&#34;https://app.poap.xyz/scan/0xdfdf2d882d9ebce6c7eac3da9ab66cbfda263781&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;POAPs&lt;/a&gt;), from genesis to season 3.&lt;/p&gt;
&lt;p&gt;I was a founding member at the 
&lt;a href=&#34;https://www.notion.so/bankless/BanklessDAO-Wiki-82ba81e7da1c42adb7c4ab67a4f22e8f&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Analytics Guild&lt;/a&gt; where I shared insights with the community through 
&lt;a href=&#34;https://forum.bankless.community/u/paulapivat/activity/topics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;forum posts&lt;/a&gt;. My colleagues and I built 
&lt;a href=&#34;https://www.notion.so/bankless/DAO-Dash-41a151ce8ef74fcd893cba3b47223828&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DAO Dash&lt;/a&gt;, an in-house analytics platform to provide insights to guilds and projects at BanklessDAO. I also provided growth and usage metrics for the BanklessDAO 
&lt;a href=&#34;https://www.notion.so/bankless/Bounty-Board-318dc164cc5640cca17e0fb5f484fd90&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bounty Board&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m currently focused on leveling up my &lt;strong&gt;smart contract sleuthing&lt;/strong&gt; skills to analyze DeFi protocols.&lt;/p&gt;
&lt;p&gt;I am working with the Bankless DeFi Innovation Index team to provide on-chain data overview of various projects that make up $GMI.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like help with on-chain analysis, please 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learn Foundational Ethereum Topics with SQL</title>
      <link>/post/query_ethereum/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/query_ethereum/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#transactions&#34;&gt;Transactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#breaking_down_transactions&#34;&gt;Breaking Down Transactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#blocks&#34;&gt;Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#gas&#34;&gt;Gas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Many Ethereum tutorials target developers, but thereâ€™s a lack of educational resources for data analyst or for people who wish to see on-chain data without running a client or node.&lt;/p&gt;
&lt;p&gt;This tutorial helps readers understand fundamental Ethereum concepts including transactions, blocks and gas by querying on-chain data with structured query language (SQL) through an interface provided by 
&lt;a href=&#34;https://duneanalytics.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dune Analytics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On-chain data can help us understand Ethereum, the network, and as an economy for computing power and should serve as a base for understanding challenges facing Ethereum today (i.e., rising gas prices) and, more importantly, discussions around scaling solutions.&lt;/p&gt;
&lt;h3 id=&#34;transactions&#34;&gt;Transactions&lt;/h3&gt;
&lt;p&gt;A userâ€™s journey on Ethereum starts with initializing a user-controlled account or an entity with an ETH balance. There are two account types - user-controlled or a smart contract (see 
&lt;a href=&#34;https://ethereum.org/en/developers/docs/accounts/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereum.org&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Any account can be viewed on a block explorer like 
&lt;a href=&#34;https://etherscan.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Etherscan&lt;/a&gt;. Block explorers are a portal to Ethereumâ€™s data. They display, in real-time, data on blocks, transactions, miners, accounts and other on-chain activity (see 
&lt;a href=&#34;https://ethereum.org/en/developers/docs/data-and-analytics/block-explorers/#top&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, a user may wish to query the data directly to reconcile the information provided by external block explorers. 
&lt;a href=&#34;https://duneanalytics.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dune Analytics&lt;/a&gt; provides this capability to anyone with some knowledge of SQL.&lt;/p&gt;
&lt;p&gt;For reference, the smart contract account for the Ethereum Foundation (EF) can be viewed on 
&lt;a href=&#34;https://etherscan.io/address/0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Etherscan&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One thing to note is that all accounts, including the EFâ€™s, has a public address that can be used to send and receive transactions.&lt;/p&gt;
&lt;p&gt;The account balance on Etherscan comprises regular transactions and internal transactions. Internal transactions, despite the name, are not &lt;em&gt;actual&lt;/em&gt; transactions that change the state of the chain. They are value transfers initiated by executing a contract (
&lt;a href=&#34;https://ethereum.stackexchange.com/questions/3417/how-to-get-contract-internal-transactions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;). Since internal transactions have no signature, they are &lt;strong&gt;not&lt;/strong&gt; included on the blockchain and cannot be queried with Dune Analytics.&lt;/p&gt;
&lt;p&gt;Therefore, this tutorial will focus on regular transactions. This can be queried as such:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WITH temp_table AS (
SELECT 
    hash,
    block_number,
    block_time,
    &amp;quot;from&amp;quot;,
    &amp;quot;to&amp;quot;,
    value / 1e18 AS ether,
    gas_used,
    gas_price / 1e9 AS gas_price_gwei
FROM ethereum.&amp;quot;transactions&amp;quot;
WHERE &amp;quot;to&amp;quot; = &#39;\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe&#39;   
ORDER BY block_time DESC
)
SELECT
    hash,
    block_number,
    block_time,
    &amp;quot;from&amp;quot;,
    &amp;quot;to&amp;quot;,
    ether,
    (gas_used * gas_price_gwei) / 1e9 AS txn_fee
FROM temp_table

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will yield the same information as provided on Etherscan&amp;rsquo;s transaction page. For comparison, here are the two sources:&lt;/p&gt;
&lt;h4 id=&#34;etherscan&#34;&gt;Etherscan&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./etherscan_view.png&#34; alt=&#34;etherscan_view&#34;&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://etherscan.io/address/0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EF&amp;rsquo;s contract page on Etherscan.&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;dune-analytics&#34;&gt;Dune Analytics&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./dune_view.png&#34; alt=&#34;dune_view&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can find dashboard 
&lt;a href=&#34;https://duneanalytics.com/paulapivat/Learn-Ethereum&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. Click on the table to see the query (also see above).&lt;/p&gt;
&lt;h3 id=&#34;breaking_down_transactions&#34;&gt;Breaking_Down_Transactions&lt;/h3&gt;
&lt;p&gt;A submitted transaction includes several pieces of information including (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/transactions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Recipient&lt;/strong&gt;: The receiving address (queried as &amp;ldquo;to&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Signature&lt;/strong&gt;: While a sender&amp;rsquo;s private keys signs a transaction, what we can query with SQL is a sender&amp;rsquo;s public address (&amp;ldquo;from&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value&lt;/strong&gt;: This is the amount of ETH transferred (see &lt;code&gt;ether&lt;/code&gt; column).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data&lt;/strong&gt;: This is arbitrary data that&amp;rsquo;s been hashed (see &lt;code&gt;data&lt;/code&gt; column)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gasLimit&lt;/strong&gt;: The maximum amount of gas, or the cost of computation, that can be consumed by a transaction (see &lt;code&gt;gas_limit&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gasPrice&lt;/strong&gt;: The fee the sender pays to sign a transaction to the blockchain. Gas is denominated in Gwei which is 0.000000001 ETH (nine decimal places).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can query these specific pieces of information for transactions to the Ethereum Foundation public address:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT 
    &amp;quot;to&amp;quot;,
    &amp;quot;from&amp;quot;,
    value / 1e18 AS ether,
    data,
    gas_limit,
    gas_price / 1e9 AS gas_price_gwei,
    gas_used,
    ROUND(((gas_used / gas_limit) * 100),2) AS gas_used_pct
FROM ethereum.&amp;quot;transactions&amp;quot;
WHERE &amp;quot;to&amp;quot; = &#39;\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe&#39;   
ORDER BY block_time DESC

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;blocks&#34;&gt;Blocks&lt;/h3&gt;
&lt;p&gt;Each transaction will change the state of the Ethereum virtual machine (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/evm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EVM&lt;/a&gt;) (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/transactions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;). Transactions are broadcasted to the network to be verified and included in a block. Each transaction is associated with a block number. To see the data, we could query a specific block number:  12396854 (the most recent block among Ethereum Foundation transactions as of this writing, 11/5/21).&lt;/p&gt;
&lt;p&gt;Moreover, when we query the next two blocks, we can see that each block contains the hash of the previous block (i.e., parent hash), illustrating how the blockchain is formed.&lt;/p&gt;
&lt;p&gt;Each block contains a reference to it parent block. This is shown below between the &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;parent_hash&lt;/code&gt; columns (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/blocks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./parent_hash.png&#34; alt=&#34;parent_hash&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here is the 
&lt;a href=&#34;https://duneanalytics.com/queries/44856/88292&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;query&lt;/a&gt; on Dune Analytics:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
   time,
   number,
   difficulty,
   hash,
   parent_hash,
   nonce
FROM ethereum.&amp;quot;blocks&amp;quot;
WHERE &amp;quot;number&amp;quot; = 12396854 OR &amp;quot;number&amp;quot; = 12396855 OR &amp;quot;number&amp;quot; = 12396856
LIMIT 10

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can  examine a block by querying time, block number, difficulty, hash, parent hash, and nonce.&lt;/p&gt;
&lt;p&gt;The only thing this query does not cover is &lt;em&gt;list of transaction&lt;/em&gt; which requires a separate query below and &lt;em&gt;state root&lt;/em&gt;. A full or archival node will store all transactions and state transitions, allowing for clients to query the state of the chain at any time. Because this requires large storage space, we can separate chain data from state data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chain data (list of blocks, transactions)&lt;/li&gt;
&lt;li&gt;State data (result of each transactionâ€™s state transition)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;State root falls in the latter and is &lt;em&gt;implicit&lt;/em&gt; data (not stored on-chain), while chain data is explicit and stored on the chain itself (
&lt;a href=&#34;https://ethereum.stackexchange.com/questions/359/where-is-the-state-data-stored&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For this tutorial, we&amp;rsquo;ll be focusing on on-chain data that &lt;em&gt;can&lt;/em&gt; be queried with SQL via Dune Analytics.&lt;/p&gt;
&lt;p&gt;As stated above, each block contains a list of transactions, we can query this by filtering for a specific block. We&amp;rsquo;ll try the most recent block, 12396854:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM ethereum.&amp;quot;transactions&amp;quot;
WHERE block_number = 12396854 
ORDER BY block_time DESC`

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s the SQL output on Dune:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./list_of_txn.png&#34; alt=&#34;list_of_txn&#34;&gt;&lt;/p&gt;
&lt;p&gt;This single block being added to the chain changes the state of the Ethereum virtual machine (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/evm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EVM&lt;/a&gt;). Dozens sometimes, hundreds of transactions are verified at once. In this specific case, 222 transactions were included.&lt;/p&gt;
&lt;p&gt;To see how many were actually successful, we would add another filter to count successful transactions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WITH temp_table AS (
    SELECT * FROM ethereum.&amp;quot;transactions&amp;quot;
    WHERE block_number = 12396854 AND success = true
    ORDER BY block_time DESC
)
SELECT
    COUNT(success) AS num_successful_txn
FROM temp_table

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For block 12396854, out of 222 total transactions, 204 were successfully verified:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./successful_txn.png&#34; alt=&#34;successful_txn&#34;&gt;&lt;/p&gt;
&lt;p&gt;Transactions requests occur dozens of times per second, but blocks are committed approximately once every 15 seconds (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/blocks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To see that there is one block produced approximately every 15 seconds, we could take the number of seconds in a day (86400) divided by 15 to get an &lt;em&gt;estimate&lt;/em&gt; average number of blocks per day (~ 5760).&lt;/p&gt;
&lt;p&gt;The chart for Ethereum blocks produced per day (2016 - present) is:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./daily_blocks.png&#34; alt=&#34;daily_blocks&#34;&gt;&lt;/p&gt;
&lt;p&gt;The average number of blocks produced daily over this time period is ~5,874:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./avg_daily_blocks.png&#34; alt=&#34;avg_daily_blocks&#34;&gt;&lt;/p&gt;
&lt;p&gt;The queries are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# query to visualize number of blocks produced daily since 2016

SELECT 
    DATE_TRUNC(&#39;day&#39;, time) AS dt,
    COUNT(*) AS block_count
FROM ethereum.&amp;quot;blocks&amp;quot;
GROUP BY dt
OFFSET 1

# average number of blocks produced per day

WITH temp_table AS (
SELECT 
    DATE_TRUNC(&#39;day&#39;, time) AS dt,
    COUNT(*) AS block_count
FROM ethereum.&amp;quot;blocks&amp;quot;
GROUP BY dt
OFFSET 1
)
SELECT 
    AVG(block_count) AS avg_block_count
FROM temp_table
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The average number of blocks produced per day since 2016 is slightly above that number at 5,874. Alternatively, dividing 86400 seconds by 5874 average blocks comes out to 14.7 seconds or approximately one block every 15 seconds.&lt;/p&gt;
&lt;h3 id=&#34;gas&#34;&gt;Gas&lt;/h3&gt;
&lt;p&gt;Blocks are bounded in size. Each block has a gas limit which is collectively set by miners and the network to prevent arbitrarily large block size to be less of a strain on full node in terms of disk space and speed requirements (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/blocks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;One way to conceptualize block gas limit is to think of it as the &lt;strong&gt;supply&lt;/strong&gt; of available block space in which to batch transactions. The block gas limit can be queried and visualized from 2016 to present day:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./avg_gas_limit.png&#34; alt=&#34;avg_gas_limit&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT 
    DATE_TRUNC(&#39;day&#39;, time) AS dt,
    AVG(gas_limit) AS avg_block_gas_limit
FROM ethereum.&amp;quot;blocks&amp;quot;
GROUP BY dt
OFFSET 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then there is the actual gas used daily to pay for computing done on the Ethereum chain (i.e., sending transaction, calling a smart contract, minting an NFT). This is the &lt;strong&gt;demand&lt;/strong&gt; for available Ethereum block space:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./daily_gas_used.png&#34; alt=&#34;daily_gas_used&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT 
    DATE_TRUNC(&#39;day&#39;, time) AS dt,
    AVG(gas_used) AS avg_block_gas_used
FROM ethereum.&amp;quot;blocks&amp;quot;
GROUP BY dt
OFFSET 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also juxtapose these two charts together to see how &lt;strong&gt;demand and supply&lt;/strong&gt; line up:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./gas_demand_supply.png&#34; alt=&#34;gas_demand_supply&#34;&gt;&lt;/p&gt;
&lt;p&gt;Therefore we can understand gas prices as a function of demand for Ethereum block space, given available supply.&lt;/p&gt;
&lt;p&gt;Finally, we may want to query average daily gas prices for the Ethereum chain, however, doing so result in an especially long query time, so weâ€™ll filter our query to the average amount of gas paid per transaction by the Ethereum Foundation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./ef_daily_gas.png&#34; alt=&#34;ef_daily_gas&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can see gas prices paid in transaction to the Ethereum Foundation address over the years. Here is the query:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT 
    block_time,
    gas_price / 1e9 AS gas_price_gwei,
    value / 1e18 AS eth_sent
FROM ethereum.&amp;quot;transactions&amp;quot;
WHERE &amp;quot;to&amp;quot; = &#39;\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe&#39;   
ORDER BY block_time DESC
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;With this tutorial, we understand foundational Ethereum concepts and how the Ethereum blockchain works by querying and getting a feel for on-chain data.&lt;/p&gt;
&lt;p&gt;The dashboard that holds all code used in this tutorial can be found 
&lt;a href=&#34;https://duneanalytics.com/paulapivat/Learn-Ethereum&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more use of data to explore web3 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
