<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Analytics | Paul Apivat</title>
    <link>/tag/analytics/</link>
      <atom:link href="/tag/analytics/index.xml" rel="self" type="application/rss+xml" />
    <description>Analytics</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2020 Paul Apivat Hanvongse. All Rights Reserved.</copyright><lastBuildDate>Tue, 11 May 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Analytics</title>
      <link>/tag/analytics/</link>
    </image>
    
    <item>
      <title>Learn Foundational Ethereum Topics with SQL</title>
      <link>/post/query_ethereum/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/query_ethereum/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#transactions&#34;&gt;Transactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#breaking_down_transactions&#34;&gt;Breaking Down Transactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#blocks&#34;&gt;Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#gas&#34;&gt;Gas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Many Ethereum tutorials target developers, but there’s a lack of educational resources for data analyst or for people who wish to see on-chain data without running a client or node.&lt;/p&gt;
&lt;p&gt;This tutorial helps readers understand fundamental Ethereum concepts including transactions, blocks and gas by querying on-chain data with structured query language (SQL) through an interface provided by 
&lt;a href=&#34;https://duneanalytics.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dune Analytics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On-chain data can help us understand Ethereum, the network, and as an economy for computing power and should serve as a base for understanding challenges facing Ethereum today (i.e., rising gas prices) and, more importantly, discussions around scaling solutions.&lt;/p&gt;
&lt;h3 id=&#34;transactions&#34;&gt;Transactions&lt;/h3&gt;
&lt;p&gt;A user’s journey on Ethereum starts with initializing a user-controlled account or an entity with an ETH balance. There are two account types - user-controlled or a smart contract (see 
&lt;a href=&#34;https://ethereum.org/en/developers/docs/accounts/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereum.org&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Any account can be viewed on a block explorer like 
&lt;a href=&#34;https://etherscan.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Etherscan&lt;/a&gt;. Block explorers are a portal to Ethereum’s data. They display, in real-time, data on blocks, transactions, miners, accounts and other on-chain activity (see 
&lt;a href=&#34;https://ethereum.org/en/developers/docs/data-and-analytics/block-explorers/#top&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, a user may wish to query the data directly to reconcile the information provided by external block explorers. 
&lt;a href=&#34;https://duneanalytics.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dune Analytics&lt;/a&gt; provides this capability to anyone with some knowledge of SQL.&lt;/p&gt;
&lt;p&gt;For reference, the smart contract account for the Ethereum Foundation (EF) can be viewed on 
&lt;a href=&#34;https://etherscan.io/address/0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Etherscan&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One thing to note is that all accounts, including the EF’s, has a public address that can be used to send and receive transactions.&lt;/p&gt;
&lt;p&gt;The account balance on Etherscan comprises regular transactions and internal transactions. Internal transactions, despite the name, are not &lt;em&gt;actual&lt;/em&gt; transactions that change the state of the chain. They are value transfers initiated by executing a contract (
&lt;a href=&#34;https://ethereum.stackexchange.com/questions/3417/how-to-get-contract-internal-transactions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;). Since internal transactions have no signature, they are &lt;strong&gt;not&lt;/strong&gt; included on the blockchain and cannot be queried with Dune Analytics.&lt;/p&gt;
&lt;p&gt;Therefore, this tutorial will focus on regular transactions. This can be queried as such:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WITH temp_table AS (
SELECT 
    hash,
    block_number,
    block_time,
    &amp;quot;from&amp;quot;,
    &amp;quot;to&amp;quot;,
    value / 1e18 AS ether,
    gas_used,
    gas_price / 1e9 AS gas_price_gwei
FROM ethereum.&amp;quot;transactions&amp;quot;
WHERE &amp;quot;to&amp;quot; = &#39;\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe&#39;   
ORDER BY block_time DESC
)
SELECT
    hash,
    block_number,
    block_time,
    &amp;quot;from&amp;quot;,
    &amp;quot;to&amp;quot;,
    ether,
    (gas_used * gas_price_gwei) / 1e9 AS txn_fee
FROM temp_table

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will yield the same information as provided on Etherscan&amp;rsquo;s transaction page. For comparison, here are the two sources:&lt;/p&gt;
&lt;h4 id=&#34;etherscan&#34;&gt;Etherscan&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./etherscan_view.png&#34; alt=&#34;etherscan_view&#34;&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://etherscan.io/address/0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EF&amp;rsquo;s contract page on Etherscan.&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;dune-analytics&#34;&gt;Dune Analytics&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./dune_view.png&#34; alt=&#34;dune_view&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can find dashboard 
&lt;a href=&#34;https://duneanalytics.com/paulapivat/Learn-Ethereum&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. Click on the table to see the query (also see above).&lt;/p&gt;
&lt;h3 id=&#34;breaking_down_transactions&#34;&gt;Breaking_Down_Transactions&lt;/h3&gt;
&lt;p&gt;A submitted transaction includes several pieces of information including (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/transactions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Recipient&lt;/strong&gt;: The receiving address (queried as &amp;ldquo;to&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Signature&lt;/strong&gt;: While a sender&amp;rsquo;s private keys signs a transaction, what we can query with SQL is a sender&amp;rsquo;s public address (&amp;ldquo;from&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value&lt;/strong&gt;: This is the amount of ETH transferred (see &lt;code&gt;ether&lt;/code&gt; column).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data&lt;/strong&gt;: This is arbitrary data that&amp;rsquo;s been hashed (see &lt;code&gt;data&lt;/code&gt; column)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gasLimit&lt;/strong&gt;: The maximum amount of gas, or the cost of computation, that can be consumed by a transaction (see &lt;code&gt;gas_limit&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gasPrice&lt;/strong&gt;: The fee the sender pays to sign a transaction to the blockchain. Gas is denominated in Gwei which is 0.000000001 ETH (nine decimal places).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can query these specific pieces of information for transactions to the Ethereum Foundation public address:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT 
    &amp;quot;to&amp;quot;,
    &amp;quot;from&amp;quot;,
    value / 1e18 AS ether,
    data,
    gas_limit,
    gas_price / 1e9 AS gas_price_gwei,
    gas_used,
    ROUND(((gas_used / gas_limit) * 100),2) AS gas_used_pct
FROM ethereum.&amp;quot;transactions&amp;quot;
WHERE &amp;quot;to&amp;quot; = &#39;\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe&#39;   
ORDER BY block_time DESC

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;blocks&#34;&gt;Blocks&lt;/h3&gt;
&lt;p&gt;Each transaction will change the state of the Ethereum virtual machine (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/evm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EVM&lt;/a&gt;) (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/transactions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;). Transactions are broadcasted to the network to be verified and included in a block. Each transaction is associated with a block number. To see the data, we could query a specific block number:  12396854 (the most recent block among Ethereum Foundation transactions as of this writing, 11/5/21).&lt;/p&gt;
&lt;p&gt;Moreover, when we query the next two blocks, we can see that each block contains the hash of the previous block (i.e., parent hash), illustrating how the blockchain is formed.&lt;/p&gt;
&lt;p&gt;Each block contains a reference to it parent block. This is shown below between the &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;parent_hash&lt;/code&gt; columns (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/blocks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./parent_hash.png&#34; alt=&#34;parent_hash&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here is the 
&lt;a href=&#34;https://duneanalytics.com/queries/44856/88292&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;query&lt;/a&gt; on Dune Analytics:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
   time,
   number,
   difficulty,
   hash,
   parent_hash,
   nonce
FROM ethereum.&amp;quot;blocks&amp;quot;
WHERE &amp;quot;number&amp;quot; = 12396854 OR &amp;quot;number&amp;quot; = 12396855 OR &amp;quot;number&amp;quot; = 12396856
LIMIT 10

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can  examine what’s inside a block by querying time, block number, difficulty, hash, parent hash, and nonce.&lt;/p&gt;
&lt;p&gt;The only thing this query does not cover is &lt;em&gt;transaction list&lt;/em&gt; which requires a separate query below and &lt;em&gt;state root&lt;/em&gt;. A full or archival node will store all transactions and state transitions, allowing for clients to query the state of the chain at any time. Because this requires large storage space, we can separate chain data from state data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chain data (list of blocks, transactions)&lt;/li&gt;
&lt;li&gt;State data (result of each transaction’s state transition)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;State root falls in the latter and is &lt;em&gt;implicit&lt;/em&gt; data (not stored on-chain), while chain data is explicit and stored on the chain itself (
&lt;a href=&#34;https://ethereum.stackexchange.com/questions/359/where-is-the-state-data-stored&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;). For this tutorial, we&amp;rsquo;ll be focusing on on-chain data that &lt;em&gt;can&lt;/em&gt; be queried with SQL via Dune Analytics.&lt;/p&gt;
&lt;h3 id=&#34;gas&#34;&gt;Gas&lt;/h3&gt;
&lt;p&gt;For more use of data to explore web3 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Analyzing Your Twitter Data</title>
      <link>/post/twitter_analytics/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/post/twitter_analytics/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#exploring_relationships&#34;&gt;Exploring Relationships&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview--setup&#34;&gt;Overview &amp;amp; Setup&lt;/h2&gt;
&lt;p&gt;This post uses various R libraries and functions to help you explore your Twitter Analytics Data. The first thing to do is download data from 
&lt;a href=&#34;https://analytics.twitter.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;analytics.twitter.com&lt;/a&gt;. The assumption here is that you&amp;rsquo;re already a Twitter user and have been using for at least 6 months.&lt;/p&gt;
&lt;p&gt;Once there, you&amp;rsquo;ll click on the &lt;code&gt;Tweets&lt;/code&gt; tab, which should bring you to your Tweet activity with the option to &lt;strong&gt;Export data&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./twitter_analytics.png&#34; alt=&#34;twitter_analytics&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once you click on &lt;strong&gt;Export data&lt;/strong&gt;, you&amp;rsquo;ll choose &amp;ldquo;By day&amp;rdquo;, which provides your impressions and engagements metrics for everyday (you&amp;rsquo;ll also select the time period, in the drop down menu right next to Export data - the default is &amp;ldquo;Last 28 Days&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The other option is to choose &amp;ldquo;By Tweet&amp;rdquo; and that will download the text of each Tweet along with associated metrics. We could potentially do fun text analysis with this, but we&amp;rsquo;ll save that for another post.&lt;/p&gt;
&lt;p&gt;For this post, I downloaded all &lt;em&gt;available&lt;/em&gt; data, which goes five months back.&lt;/p&gt;
&lt;p&gt;After downloading, you&amp;rsquo;ll want to &lt;strong&gt;read&lt;/strong&gt; in the data and, in our case, &lt;strong&gt;combine&lt;/strong&gt; all five months into one data frame, we&amp;rsquo;ll use the &lt;code&gt;readr&lt;/code&gt; package and &lt;code&gt;read_csv()&lt;/code&gt; function contained in &lt;code&gt;tidyverse&lt;/code&gt;. Then we&amp;rsquo;ll use &lt;code&gt;rbind()&lt;/code&gt; to combine five data frames by rows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(tidyverse)

# load data from September to mid-January
df1 &amp;lt;- read_csv(&amp;quot;./daily_tweet_activity/daily_tweet_activity_metrics_paulapivat_20200901_20201001_en.csv&amp;quot;)
df2 &amp;lt;- read_csv(&amp;quot;./daily_tweet_activity/daily_tweet_activity_metrics_paulapivat_20201001_20201101_en.csv&amp;quot;)
df3 &amp;lt;- read_csv(&amp;quot;./daily_tweet_activity/daily_tweet_activity_metrics_paulapivat_20201101_20201201_en.csv&amp;quot;)
df4 &amp;lt;- read_csv(&amp;quot;./daily_tweet_activity/daily_tweet_activity_metrics_paulapivat_20201201_20210101_en.csv&amp;quot;)
df5 &amp;lt;- read_csv(&amp;quot;./daily_tweet_activity/daily_tweet_activity_metrics_paulapivat_20210101_20210112_en.csv&amp;quot;)

# combining ALL five dataframes into ONE, by rows
df &amp;lt;- rbind(df1, df2, df3, df4, df5)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;exploring_relationships&#34;&gt;Exploring_Relationships&lt;/h2&gt;
&lt;p&gt;Twitter analytics tracks several metric that are broadly grouped under Engagements, including: retweets, replies, likes, user profile clicks, url clicks, hashtag clicks, detail expands, media views and media engagements.&lt;/p&gt;
&lt;p&gt;There are other metrics like &amp;ldquo;app opens&amp;rdquo; and &amp;ldquo;promoted engagements&amp;rdquo;, which are services I have not used and so do not have any data available.&lt;/p&gt;
&lt;h4 id=&#34;a-guiding-question&#34;&gt;A Guiding Question&lt;/h4&gt;
&lt;p&gt;It&amp;rsquo;s useful to have a guiding question as it helps focus your exploration. Let&amp;rsquo;s say, I was interested in whether one of my tweets prompted a reader to click on my profile. The metric for this is &lt;code&gt;user profile clicks&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;My initial guiding question for this post is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Which metrics are most strongly correlated with User Profile Clicks?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You could simply use the &lt;code&gt;cor.test()&lt;/code&gt; function, which comes with base R, to go one by one between &lt;em&gt;each&lt;/em&gt; metric and &lt;code&gt;User Profile Click&lt;/code&gt;. For example, below we calculate the correlation between three pairs of variables, &lt;code&gt;User Profile Clicks&lt;/code&gt; and &lt;code&gt;retweets&lt;/code&gt;, &lt;code&gt;replies&lt;/code&gt; and &lt;code&gt;likes&lt;/code&gt;, separately. After awhile, this can get tedious.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cor.test(x = df$`user profile clicks`, y = df$retweets)
cor.test(x = df$`user profile clicks`, y = df$replies)
cor.test(x = df$`user profile clicks`, y = df$likes)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quicker way to explore the relationship between pairs of metrics throughout a dataset is to use a &lt;strong&gt;correlelogram&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll start with base R. You&amp;rsquo;ll want to limit the number of variables you visualize so the correlelogram doesn&amp;rsquo;t become too cluttered. Here are four variables that correlate the highest with &lt;code&gt;User Profile Clicks&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# four columns are selected along with user profile clicks to plot
df %&amp;gt;%
    select(8, 12, 19:20, `user profile clicks`) %&amp;gt;%
    plot(pch = 20, cex = 1.5, col=&amp;quot;#69b3a2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s a visual:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./plot_strongest.png&#34; alt=&#34;plot_strongest&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here are another four metrics with &lt;em&gt;moderate&lt;/em&gt; relationships:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df %&amp;gt;%
    select(6:7, 10:11, `user profile clicks`) %&amp;gt;%
    plot(pch = 20, cex = 1.5, col=&amp;quot;#69b3a2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./plot_moderate.png&#34; alt=&#34;plot_moderate&#34;&gt;&lt;/p&gt;
&lt;p&gt;Visually, you can see the moderate relationship scatter plots are more dispersed, with a less identifiable direction.&lt;/p&gt;
&lt;p&gt;While base R is dependable, we can get more informative plots with the &lt;code&gt;GGally&lt;/code&gt; package. Here are the four highly correlated variables with &lt;code&gt;User Profile Clicks&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(GGally)

# GGally, Strongest Related
df %&amp;gt;%
    select(8, 12, 19:20, `user profile clicks`) %&amp;gt;%
    ggpairs(
        diag = NULL,
        title = &amp;quot;Strongest Relationships with User Profile Clicks: Sep 2020 - Jan 2021&amp;quot;,
        axisLabels = c(&amp;quot;internal&amp;quot;),
        xlab = &amp;quot;Value&amp;quot;
    )

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s the correlelogram between the four most highly correlated variables with &lt;code&gt;user profile clicks&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./strongest.png&#34; alt=&#34;strongest&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here are the moderately correlated variables with &lt;code&gt;User Profile Clicks&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./moderate.png&#34; alt=&#34;moderate&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, not only do these provide scatter plots, but they also show the numerical values of the correlation between each pair of variables, which is much more informative than base R.&lt;/p&gt;
&lt;p&gt;Now, its entirely possible that the pattern of correlation in your data is different as the initial patterns we&amp;rsquo;re seeing here are not meant to generalize to a different dataset.&lt;/p&gt;
&lt;p&gt;For more content on data science, machine learning, R, Python, SQL and more, 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
