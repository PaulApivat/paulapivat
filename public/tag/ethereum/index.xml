<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ethereum | Paul Apivat</title>
    <link>/tag/ethereum/</link>
      <atom:link href="/tag/ethereum/index.xml" rel="self" type="application/rss+xml" />
    <description>Ethereum</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2020 Paul Apivat Hanvongse. All Rights Reserved.</copyright><lastBuildDate>Tue, 11 May 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Ethereum</title>
      <link>/tag/ethereum/</link>
    </image>
    
    <item>
      <title>Learn Foundational Ethereum Topics with SQL</title>
      <link>/post/query_ethereum/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/query_ethereum/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#transactions&#34;&gt;Transactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#breaking_down_transactions&#34;&gt;Breaking Down Transactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#blocks&#34;&gt;Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#gas&#34;&gt;Gas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Many Ethereum tutorials target developers, but there’s a lack of educational resources for data analyst or for people who wish to see on-chain data without running a client or node.&lt;/p&gt;
&lt;p&gt;This tutorial helps readers understand fundamental Ethereum concepts including transactions, blocks and gas by querying on-chain data with structured query language (SQL) through an interface provided by 
&lt;a href=&#34;https://duneanalytics.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dune Analytics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On-chain data can help us understand Ethereum, the network, and as an economy for computing power and should serve as a base for understanding challenges facing Ethereum today (i.e., rising gas prices) and, more importantly, discussions around scaling solutions.&lt;/p&gt;
&lt;h3 id=&#34;transactions&#34;&gt;Transactions&lt;/h3&gt;
&lt;p&gt;A user’s journey on Ethereum starts with initializing a user-controlled account or an entity with an ETH balance. There are two account types - user-controlled or a smart contract (see 
&lt;a href=&#34;https://ethereum.org/en/developers/docs/accounts/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereum.org&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Any account can be viewed on a block explorer like 
&lt;a href=&#34;https://etherscan.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Etherscan&lt;/a&gt;. Block explorers are a portal to Ethereum’s data. They display, in real-time, data on blocks, transactions, miners, accounts and other on-chain activity (see 
&lt;a href=&#34;https://ethereum.org/en/developers/docs/data-and-analytics/block-explorers/#top&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, a user may wish to query the data directly to reconcile the information provided by external block explorers. 
&lt;a href=&#34;https://duneanalytics.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dune Analytics&lt;/a&gt; provides this capability to anyone with some knowledge of SQL.&lt;/p&gt;
&lt;p&gt;For reference, the smart contract account for the Ethereum Foundation (EF) can be viewed on 
&lt;a href=&#34;https://etherscan.io/address/0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Etherscan&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One thing to note is that all accounts, including the EF’s, has a public address that can be used to send and receive transactions.&lt;/p&gt;
&lt;p&gt;The account balance on Etherscan comprises regular transactions and internal transactions. Internal transactions, despite the name, are not &lt;em&gt;actual&lt;/em&gt; transactions that change the state of the chain. They are value transfers initiated by executing a contract (
&lt;a href=&#34;https://ethereum.stackexchange.com/questions/3417/how-to-get-contract-internal-transactions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;). Since internal transactions have no signature, they are &lt;strong&gt;not&lt;/strong&gt; included on the blockchain and cannot be queried with Dune Analytics.&lt;/p&gt;
&lt;p&gt;Therefore, this tutorial will focus on regular transactions. This can be queried as such:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WITH temp_table AS (
SELECT 
    hash,
    block_number,
    block_time,
    &amp;quot;from&amp;quot;,
    &amp;quot;to&amp;quot;,
    value / 1e18 AS ether,
    gas_used,
    gas_price / 1e9 AS gas_price_gwei
FROM ethereum.&amp;quot;transactions&amp;quot;
WHERE &amp;quot;to&amp;quot; = &#39;\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe&#39;   
ORDER BY block_time DESC
)
SELECT
    hash,
    block_number,
    block_time,
    &amp;quot;from&amp;quot;,
    &amp;quot;to&amp;quot;,
    ether,
    (gas_used * gas_price_gwei) / 1e9 AS txn_fee
FROM temp_table

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will yield the same information as provided on Etherscan&amp;rsquo;s transaction page. For comparison, here are the two sources:&lt;/p&gt;
&lt;h4 id=&#34;etherscan&#34;&gt;Etherscan&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./etherscan_view.png&#34; alt=&#34;etherscan_view&#34;&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://etherscan.io/address/0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EF&amp;rsquo;s contract page on Etherscan.&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;dune-analytics&#34;&gt;Dune Analytics&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./dune_view.png&#34; alt=&#34;dune_view&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can find dashboard 
&lt;a href=&#34;https://duneanalytics.com/paulapivat/Learn-Ethereum&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. Click on the table to see the query (also see above).&lt;/p&gt;
&lt;h3 id=&#34;breaking_down_transactions&#34;&gt;Breaking_Down_Transactions&lt;/h3&gt;
&lt;p&gt;A submitted transaction includes several pieces of information including (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/transactions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Recipient&lt;/strong&gt;: The receiving address (queried as &amp;ldquo;to&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Signature&lt;/strong&gt;: While a sender&amp;rsquo;s private keys signs a transaction, what we can query with SQL is a sender&amp;rsquo;s public address (&amp;ldquo;from&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value&lt;/strong&gt;: This is the amount of ETH transferred (see &lt;code&gt;ether&lt;/code&gt; column).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data&lt;/strong&gt;: This is arbitrary data that&amp;rsquo;s been hashed (see &lt;code&gt;data&lt;/code&gt; column)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gasLimit&lt;/strong&gt;: The maximum amount of gas, or the cost of computation, that can be consumed by a transaction (see &lt;code&gt;gas_limit&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gasPrice&lt;/strong&gt;: The fee the sender pays to sign a transaction to the blockchain. Gas is denominated in Gwei which is 0.000000001 ETH (nine decimal places).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can query these specific pieces of information for transactions to the Ethereum Foundation public address:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT 
    &amp;quot;to&amp;quot;,
    &amp;quot;from&amp;quot;,
    value / 1e18 AS ether,
    data,
    gas_limit,
    gas_price / 1e9 AS gas_price_gwei,
    gas_used,
    ROUND(((gas_used / gas_limit) * 100),2) AS gas_used_pct
FROM ethereum.&amp;quot;transactions&amp;quot;
WHERE &amp;quot;to&amp;quot; = &#39;\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe&#39;   
ORDER BY block_time DESC

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;blocks&#34;&gt;Blocks&lt;/h3&gt;
&lt;p&gt;Each transaction will change the state of the Ethereum virtual machine (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/evm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EVM&lt;/a&gt;) (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/transactions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;). Transactions are broadcasted to the network to be verified and included in a block. Each transaction is associated with a block number. To see the data, we could query a specific block number:  12396854 (the most recent block among Ethereum Foundation transactions as of this writing, 11/5/21).&lt;/p&gt;
&lt;p&gt;Moreover, when we query the next two blocks, we can see that each block contains the hash of the previous block (i.e., parent hash), illustrating how the blockchain is formed.&lt;/p&gt;
&lt;p&gt;Each block contains a reference to it parent block. This is shown below between the &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;parent_hash&lt;/code&gt; columns (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/blocks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./parent_hash.png&#34; alt=&#34;parent_hash&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here is the 
&lt;a href=&#34;https://duneanalytics.com/queries/44856/88292&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;query&lt;/a&gt; on Dune Analytics:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
   time,
   number,
   difficulty,
   hash,
   parent_hash,
   nonce
FROM ethereum.&amp;quot;blocks&amp;quot;
WHERE &amp;quot;number&amp;quot; = 12396854 OR &amp;quot;number&amp;quot; = 12396855 OR &amp;quot;number&amp;quot; = 12396856
LIMIT 10

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can  examine a block by querying time, block number, difficulty, hash, parent hash, and nonce.&lt;/p&gt;
&lt;p&gt;The only thing this query does not cover is &lt;em&gt;list of transaction&lt;/em&gt; which requires a separate query below and &lt;em&gt;state root&lt;/em&gt;. A full or archival node will store all transactions and state transitions, allowing for clients to query the state of the chain at any time. Because this requires large storage space, we can separate chain data from state data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chain data (list of blocks, transactions)&lt;/li&gt;
&lt;li&gt;State data (result of each transaction’s state transition)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;State root falls in the latter and is &lt;em&gt;implicit&lt;/em&gt; data (not stored on-chain), while chain data is explicit and stored on the chain itself (
&lt;a href=&#34;https://ethereum.stackexchange.com/questions/359/where-is-the-state-data-stored&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For this tutorial, we&amp;rsquo;ll be focusing on on-chain data that &lt;em&gt;can&lt;/em&gt; be queried with SQL via Dune Analytics.&lt;/p&gt;
&lt;p&gt;As stated above, each block contains a list of transactions, we can query this by filtering for a specific block. We&amp;rsquo;ll try the most recent block, 12396854:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM ethereum.&amp;quot;transactions&amp;quot;
WHERE block_number = 12396854 
ORDER BY block_time DESC`

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s the SQL output on Dune:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./list_of_txn.png&#34; alt=&#34;list_of_txn&#34;&gt;&lt;/p&gt;
&lt;p&gt;This single block being added to the chain changes the state of the Ethereum virtual machine (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/evm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EVM&lt;/a&gt;). Dozens sometimes, hundreds of transactions are verified at once. In this specific case, 222 transactions were included.&lt;/p&gt;
&lt;p&gt;To see how many were actually successful, we would add another filter to count successful transactions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WITH temp_table AS (
    SELECT * FROM ethereum.&amp;quot;transactions&amp;quot;
    WHERE block_number = 12396854 AND success = true
    ORDER BY block_time DESC
)
SELECT
    COUNT(success) AS num_successful_txn
FROM temp_table

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For block 12396854, out of 222 total transactions, 204 were successfully verified:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./successful_txn.png&#34; alt=&#34;successful_txn&#34;&gt;&lt;/p&gt;
&lt;p&gt;Transactions requests occur dozens of times per second, but blocks are committed approximately once every 15 seconds (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/blocks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To see that there is one block produced approximately every 15 seconds, we could take the number of seconds in a day (86400) divided by 15 to get an &lt;em&gt;estimate&lt;/em&gt; average number of blocks per day (~ 5760).&lt;/p&gt;
&lt;p&gt;The chart for Ethereum blocks produced per day (2016 - present) is:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./daily_blocks.png&#34; alt=&#34;daily_blocks&#34;&gt;&lt;/p&gt;
&lt;p&gt;The average number of blocks produced daily over this time period is ~5,874:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./avg_daily_blocks.png&#34; alt=&#34;avg_daily_blocks&#34;&gt;&lt;/p&gt;
&lt;p&gt;The queries are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# query to visualize number of blocks produced daily since 2016

SELECT 
    DATE_TRUNC(&#39;day&#39;, time) AS dt,
    COUNT(*) AS block_count
FROM ethereum.&amp;quot;blocks&amp;quot;
GROUP BY dt
OFFSET 1

# average number of blocks produced per day

WITH temp_table AS (
SELECT 
    DATE_TRUNC(&#39;day&#39;, time) AS dt,
    COUNT(*) AS block_count
FROM ethereum.&amp;quot;blocks&amp;quot;
GROUP BY dt
OFFSET 1
)
SELECT 
    AVG(block_count) AS avg_block_count
FROM temp_table
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The average number of blocks produced per day since 2016 is slightly above that number at 5,874. Alternatively, dividing 86400 seconds by 5874 average blocks comes out to 14.7 seconds or approximately one block every 15 seconds.&lt;/p&gt;
&lt;h3 id=&#34;gas&#34;&gt;Gas&lt;/h3&gt;
&lt;p&gt;For more use of data to explore web3 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The More a Network is Worth, the Harder it is to Attack</title>
      <link>/post/crypto_price_attack/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/post/crypto_price_attack/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#data&#34;&gt;Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#implication&#34;&gt;Implication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this post, I use Python and R to access, parse, manipulate, then visualize data from 
&lt;a href=&#34;https://www.crypto51.app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Crypto51.app&lt;/a&gt; to show the strong relationship between Market Capitalization and Cost to Attack among public crypto networks.&lt;/p&gt;
&lt;p&gt;The more a network is thought to be worth, the more expensive it is to attack. An important, but often overlooked reason to celebrate price gains.&lt;/p&gt;
&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;
&lt;p&gt;In this post, I query an API endpoint setup at 
&lt;a href=&#34;https://www.crypto51.app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Crypto51.app&lt;/a&gt; to get &lt;code&gt;JSON&lt;/code&gt; data. Then, I use Python to parse and convert to &lt;code&gt;dataframe&lt;/code&gt;. Finally, I use R to wrangle and visualize.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get it!&lt;/p&gt;
&lt;p&gt;Here is the Python code to read in &lt;code&gt;JSON&lt;/code&gt; and convert to a &lt;code&gt;dataframe&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import json
import requests

r = requests.get(&#39;https://api.crypto51.app/coins.json&#39;)
dct = dict()
dct = r.json()

# loop through:
# last_updated
# coins
for x, y in dct.items():
    print(x)

type(dct[&#39;coins&#39;]) # list
len(dct[&#39;coins&#39;])  # 57 dictionaries in side this list

# convert list of 57 dictionaries into a pandas dataframe
df = pd.DataFrame.from_dict(dct[&#39;coins&#39;])
df.head()
df.to_csv(&#39;crypto51.csv&#39;, index=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After creating a CSV, I&amp;rsquo;m transition to R, out of preference for &lt;code&gt;dataframe&lt;/code&gt; manipulation and visualization with this tool (you could do the following in &lt;code&gt;pandas&lt;/code&gt; and &lt;code&gt;seaborn&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll load the &lt;code&gt;tidyverse&lt;/code&gt; and read in the CSV file we created. Then we&amp;rsquo;ll use a series of &lt;code&gt;magrittr&lt;/code&gt; 
&lt;a href=&#34;https://magrittr.tidyverse.org/reference/pipe.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pipes&lt;/a&gt; to sequence our data manipulation in one flow. We&amp;rsquo;ll remove projects with &lt;strong&gt;no market_cap&lt;/strong&gt; data. We&amp;rsquo;ll remove the Handshake project because of missing data for &lt;code&gt;attack_hourly_cost&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll change &lt;code&gt;attack_hourly_cost&lt;/code&gt; data type into numeric. Then we&amp;rsquo;ll use &lt;code&gt;ggplot2&lt;/code&gt; to visualize a scatter plot with both X and Y axes transformed with &lt;code&gt;scale_*_log10()&lt;/code&gt; to make the scatter plot more interpretable.&lt;/p&gt;
&lt;p&gt;Bitcoin and Ethereum are annotated as the two leading projects (see chart below).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;library(tidyverse)

df &amp;lt;- read_csv(&amp;quot;crypto51.csv&amp;quot;)

df %&amp;gt;%
    # remove projects with no market_cap
    slice(1:38) %&amp;gt;% 
    filter(attack_hourly_cost != &amp;quot;?&amp;quot;) %&amp;gt;% 
    # change character to numeric
    mutate(
        attack_hourly_cost = as.numeric(attack_hourly_cost)
    ) %&amp;gt;% 
    ggplot(aes(x=market_cap, y=attack_hourly_cost)) +
    geom_point(aes(size = log10(market_cap)), color = &amp;quot;white&amp;quot;, alpha = 0.8) +
    # use log10 transformation to make chart more interpretable
    scale_y_log10(label= scales::dollar) +
    scale_x_log10(label= scales::dollar) +
    theme_minimal() +
    theme(
        legend.position = &#39;none&#39;,
        panel.background = element_rect(fill = &amp;quot;dodger blue&amp;quot;),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        plot.background = element_rect(fill = &amp;quot;dodger blue&amp;quot;),
        plot.title = element_text(colour = &amp;quot;white&amp;quot;, face = &amp;quot;bold&amp;quot;, size = 30, 
                                  margin = margin(10,0,30,0)),
        plot.caption = element_text(color = &amp;quot;white&amp;quot;),
        axis.title = element_text(colour = &amp;quot;white&amp;quot;, face = &amp;quot;bold&amp;quot;),
        axis.title.x = element_text(margin = margin(30,0,10,0)),
        axis.text = element_text(colour = &amp;quot;white&amp;quot;, face = &amp;quot;bold&amp;quot;),
        axis.title.y = element_text(margin = margin(0,20,0,30), angle = 0)
    ) +
    labs(
        x = &amp;quot;Market Capitalization&amp;quot;,
        y = &amp;quot;Attack\nHourly\nCost&amp;quot;,
        title = &amp;quot;The More a Crypto Network is Worth,\n the Harder it is to Attack.&amp;quot;,
        caption = &amp;quot;Data: www.crypto51.app | Graphics: @paulapivat&amp;quot;
    ) +
    # annotate instead of geom_text
    annotate(&amp;quot;text&amp;quot;, x = 205174310335, y = 800000, label = &amp;quot;Bitcoin&amp;quot;, color = &amp;quot;white&amp;quot;) +
    annotate(&amp;quot;text&amp;quot;, x = 30762751140, y = 418437, label = &amp;quot;Ethereum&amp;quot;, color = &amp;quot;white&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;implication&#34;&gt;Implication&lt;/h2&gt;
&lt;h3 id=&#34;the-more-a-crypto-network-is-worth-the-harder-it-is-to-attack&#34;&gt;The More a Crypto Network is Worth, the Harder it is to Attack&lt;/h3&gt;
&lt;p&gt;All time high.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;d be hard pressed to find three more delicious words than these.&lt;/p&gt;
&lt;p&gt;When it comes to crypto, everyone keeps an eye on their portfolio value.&lt;/p&gt;
&lt;p&gt;Your bags aside, there is &lt;em&gt;another&lt;/em&gt; reason to celebrate price gains.&lt;/p&gt;
&lt;p&gt;Bitcoin&amp;rsquo;s big innovation was making &lt;strong&gt;digital transaction difficult to replicate&lt;/strong&gt; (unlike most digital files that are easily duplicated).&lt;/p&gt;
&lt;p&gt;Nodes follow the longest chain as the &amp;ldquo;correct&amp;rdquo; chain. However, this opens things up for any node(s) with more than 51% of the network hashing power to pull &lt;em&gt;shenanigans&lt;/em&gt;, such as &lt;strong&gt;double-spending&lt;/strong&gt;. Sending funds to one address on the main chain and the same funds to another address on a different chain.&lt;/p&gt;
&lt;p&gt;More hardware and hash power allow a node to secretly mine a side chain, which they can later “fool” the rest of the network into accepting.&lt;/p&gt;
&lt;p&gt;Since their inception, Bitcoin and Ethereum have gotten more difficult to mine over time. And when price increases, the capital costs of buying new equipment goes up.&lt;/p&gt;
&lt;p&gt;This makes it more difficult for any one entity to accumulate too much hash power and pull shenanigans. &lt;strong&gt;As a result, the entire network is more secure&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In fact, the data provided by crypto51.app suggests a near perfect correlation between Market Capitalization and Cost to Attack, at r = 0.94.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./price_nb3.png&#34; alt=&#34;Crypto Price Attack&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The more a crypto network is worth, the more expensive it is to attack.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another reason to celebrate price gains.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.crypto51.app&#34;&gt;www.crypto51.app&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For more content on data science, machine learning, R, Python, SQL and more, 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
