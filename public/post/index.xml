<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Paul Apivat</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020 Paul Apivat Hanvongse. All Rights Reserved.</copyright><lastBuildDate>Fri, 23 Oct 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>Data Science from Scratch (ch2)</title>
      <link>/post/dsfs_2/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate>
      <guid>/post/dsfs_2/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Table of Content:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#setup&#34;&gt;Set Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#functions&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#strings&#34;&gt;Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#exceptions&#34;&gt;Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#lists&#34;&gt;Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#tuples&#34;&gt;Tuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#dictionaries&#34;&gt;Dictionaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#defaultdict&#34;&gt;defaultdict&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#counters&#34;&gt;Counters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#sets&#34;&gt;Sets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chapter-2-a-crash-course-in-python&#34;&gt;Chapter 2: A Crash Course in Python&lt;/h2&gt;
&lt;p&gt;This is the first of many chapters i&amp;rsquo;ll be covering from Joel Grus&amp;rsquo; Data Science from Scratch book (2nd edition). This chapter provides a quick survey of python features needed for &amp;ldquo;doing&amp;rdquo; data science from scratch, including essential setup of virtual environments and other tooling.&lt;/p&gt;
&lt;p&gt;While the chapter is not meant to be comprehensive, I may supplement certain sections with external content for greater detail in certain parts.&lt;/p&gt;
&lt;p&gt;My goal is twofold. First, to go through this book and, as a byproduct, learn python. Second, to look out for and highlight the areas where the &lt;em&gt;pythonic&lt;/em&gt; way of doing things is necessary to accomplish something in the data science process.&lt;/p&gt;
&lt;p&gt;At several sections throughout this chapter, the author emphasises how much a particular feature will be used later in the book (e.g., functions, dictionaries, list, list comprehensions (and for-loops), assert, iterables and generators, randomness, type annotations). Things &lt;em&gt;not&lt;/em&gt; used as much (e.g., sets, automated test, subclasses that inherit functionality from a parent class, zip and argument unpacking, args, kwargs).&lt;/p&gt;
&lt;p&gt;Additional code can be found in this 
&lt;a href=&#34;https://github.com/PaulApivat/dsfs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;repo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;h3 id=&#34;installation-virtual-environment-and-modules&#34;&gt;Installation, Virtual Environment and Modules&lt;/h3&gt;
&lt;p&gt;These section takes the reader through installing a virtual environment using Anaconda Python distribution. The author points out a best practice, &amp;ldquo;you should always work in a virtual environment and never use &amp;lsquo;base&amp;rsquo; Python installation&amp;rdquo;. Moreover, the author favors IPython over jupyter notebooks (he&amp;rsquo;s a noted 
&lt;a href=&#34;https://www.youtube.com/watch?v=7jiPeIFXb6U&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;critic of the notebook&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Jeremy Howard of fast.ai offers a contrasting perspective. He &lt;em&gt;does&lt;/em&gt; 
&lt;a href=&#34;https://www.youtube.com/watch?v=9Q6sLbz37gk&amp;amp;feature=emb_title&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;like notebooks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first time I installed Python, it took me awhile to get things right and eventually I relied on jupyter notebooks through Anaconda. As we go through this book, I&amp;rsquo;ll be using virtual environments and IPython as much as I can (although I may sprinkle in a notebook here and there). My IDE for interacting with the conda virtual environment and IPython will be VSCode.&lt;/p&gt;
&lt;p&gt;Fortunately, I had a relatively painless process setting up a virtual environment and IPython, although I had to take a slight detour to setup the &lt;code&gt;code&lt;/code&gt; command for VSCode.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a summary of the commands I used for setup:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./python_virtual_env.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;
&lt;p&gt;Three things are emphasized here: passing functions as arguments for other functions, lambda functions and default parameter values.&lt;/p&gt;
&lt;p&gt;The illustration of functions being passed as arguments is demonstrated below. A function &lt;code&gt;double&lt;/code&gt; is created. A function &lt;code&gt;apply_to_one&lt;/code&gt; is created. The &lt;code&gt;double&lt;/code&gt; function is pointed at &lt;code&gt;my_double&lt;/code&gt;. We pass &lt;code&gt;my_double&lt;/code&gt; into the &lt;code&gt;apply_to_one&lt;/code&gt; function and set that to &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Whatever function is passed to &lt;code&gt;apply_to_one&lt;/code&gt;, &lt;em&gt;its&lt;/em&gt; argument is 1. So passing &lt;code&gt;my_double&lt;/code&gt; means we are doubling 1, so x is 2.&lt;/p&gt;
&lt;p&gt;But the important thing is that a function got passed to another function (aka higher order functions).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def double(x):
    &amp;quot;&amp;quot;&amp;quot;
    this function doubles and returns the argument
    &amp;quot;&amp;quot;&amp;quot;
    return x * 2
    
def apply_to_one(f):
    &amp;quot;&amp;quot;&amp;quot;Calls the function f with 1 as its argument&amp;quot;&amp;quot;&amp;quot;
    return f(1)
    
my_double = double

# x is 2 here
x = apply_to_one(my_double)

# extending this example
def apply_five_to(e):
    &amp;quot;&amp;quot;&amp;quot;returns the function e with 5 as its argument&amp;quot;&amp;quot;&amp;quot;
    return e(5)

# doubling 5 is 10
w = apply_five_to(my_double)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since functions are going to be used extensively, here&amp;rsquo;s another more complicated example. I found this from 
&lt;a href=&#34;https://treyhunner.com/2020/01/passing-functions-as-arguments/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Trey Hunner&amp;rsquo;s site&lt;/a&gt;. Two functions are defined - &lt;code&gt;square&lt;/code&gt; and &lt;code&gt;cube&lt;/code&gt;. Both functions are saved to a list called &lt;code&gt;operations&lt;/code&gt;. Another list, &lt;code&gt;numbers&lt;/code&gt; is created.&lt;/p&gt;
&lt;p&gt;Finally, a for-loop is used to iterate through &lt;code&gt;numbers&lt;/code&gt;, and the &lt;code&gt;enumerate&lt;/code&gt; property allows access to both index and item in numbers. That&amp;rsquo;s used to find whether the &lt;code&gt;action&lt;/code&gt; is a &lt;code&gt;square&lt;/code&gt; or &lt;code&gt;cube&lt;/code&gt; (operations[0] is &lt;code&gt;square&lt;/code&gt;, operations[1] is &lt;code&gt;cube&lt;/code&gt;), which is then given as its argument, the items inside the &lt;code&gt;numbers&lt;/code&gt; list.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# create two functions
def square(n): return n**2
def cube(n): return n**3

# store those functions inside a list, operations, to reference later
operations = [square, cube]

# create a list of numbers
numbers = [2,1,3,4,7,11,18,29]

# loop through the numbers list
# using enumerate the identify index and items
# [i % 2] results in either 0 or 1, that&#39;s pointed at action
# using the dunder, name, retrieves the name of the function - either square or cube - from the operations list
# print __name__ along with the item from the numbers list
# action is either a square or cube

for i, n in enumerate(numbers):
    action = operations[i % 2]
    print(f&amp;quot;{action.__name__}({n}):&amp;quot;, action(n))

# print
square(2): 4
cube(1): 1
square(3): 9
cube(4): 64
square(7): 49
cube(11): 1331
square(18): 324
cube(29): 24389

# more explicit, yet verbose way to write the for-loop
for index, num in enumerate(numbers):
    action = operations[index % 2]
    print(f&amp;quot;{action.__name__}({num}):&amp;quot;, action(num))

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This section also introduces &lt;code&gt;lambda&lt;/code&gt; functions (aka anonymous functions) to demonstrate how functions, being first-class in Python, can, like any variable, be passed into the argument of another function. However, with &lt;code&gt;lambda&lt;/code&gt; instead of defining functions with &lt;code&gt;def&lt;/code&gt;, it is defined inside another function. Here&amp;rsquo;s an illustration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# we&#39;ll reuse apply_five_to, which takes in a function and provides &#39;5&#39; as the argument
def apply_five_to(e):
    &amp;quot;&amp;quot;&amp;quot;returns the function e with 5 as its argument&amp;quot;&amp;quot;&amp;quot;
    return e(5)

# this lambda function adds &#39;4&#39; to any argument
# when passing this lambda function to apply_five_to
# you get y = 5 + 4
y = apply_five_to(lambda x: x + 4)

# we can also change what the lambda function does without defining a separate function
# here the lambda function multiplies the argument by 4
# y = 20
y = apply_five_to(lambda x: x * 4)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lambda functions are convenient in that you can pass it into another function &lt;em&gt;immediately&lt;/em&gt; without having to define it separately, but the consensus seems to be that you should just use &lt;code&gt;def&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an external example of &lt;code&gt;lambda&lt;/code&gt; functions from 
&lt;a href=&#34;https://treyhunner.com/2020/01/passing-functions-as-arguments/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Trey Hunner&lt;/a&gt;. In this example, a &lt;code&gt;lambda&lt;/code&gt; function is used within a &lt;code&gt;filter&lt;/code&gt; function that takes in two arguments.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# calling help(filter) displays an explanation

class filter(object)
 |  filter(function or None, iterable) --&amp;gt; filter object

# create a list of numbers
numbers = [2,1,3,4,7,11,18,29]

# the lambda function will return n if it is an even number
# we filter the numbers list using the lambda function
# wrapped in a list, this returns [2,4,18]
list(filter(lambda n: n % 2 == 0, numbers))

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are whole books, or at least whole chapters, that can be written about Python functions, but we&amp;rsquo;ll limit our discussion for now to the idea that &lt;strong&gt;functions can be passed as arguments to other functions&lt;/strong&gt;. I&amp;rsquo;ll report back on this section as we progress through the book.&lt;/p&gt;
&lt;h2 id=&#34;strings&#34;&gt;Strings&lt;/h2&gt;
&lt;p&gt;Strings may not be terribly exciting for data science or machine learning, unless you&amp;rsquo;re getting into natural language processing, so we&amp;rsquo;ll keep it brief here. The key take aways are that &lt;em&gt;backslashes&lt;/em&gt; encode special characters and that &lt;strong&gt;f-strings&lt;/strong&gt; is the most updated way to do string interpolation. Here are some examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# point strings to variables (we&#39;ll use my name)
first_name = &amp;quot;Paul&amp;quot;
last_name = &amp;quot;Apivat&amp;quot;

# f-string (recommended), &#39;Paul Apivat&#39;
f_string = f&amp;quot;{first_name} {last_name}&amp;quot;

# string addition, &#39;Paul Apivat&#39;
string_addition = first_name + &amp;quot; &amp;quot; + last_name

# string format, &#39;Paul Apivat&#39;
string_format = &amp;quot;{0} {1}&amp;quot;.format(first_name, last_name)

# percent format (NOT recommended), &#39;Paul Apivat&#39;
pct_format = &amp;quot;%s %s&amp;quot; %(&#39;Paul&#39;,&#39;Apivat&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;exceptions&#34;&gt;Exceptions&lt;/h2&gt;
&lt;p&gt;The author covers exceptions to make the point that they&amp;rsquo;re not all that bad in Python and it&amp;rsquo;s worth handling exceptions yourself to make code more readable. Here&amp;rsquo;s my own example that&amp;rsquo;s slightly different from the book:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;integer_list = [1,2,3]

heterogeneous_list = [&amp;quot;string&amp;quot;, 0.1, True]

# you can sum a list of integers, here 1 + 2 + 3 = 6
sum(integer_list)

# but you cannot sum a list of heterogeneous data types
# doing so raises a TypeError
sum(heterogeneous_list)

# the error crashes your program and is not fun to look at
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-12-3287dd0c6c22&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 sum(heterogeneous_list)

TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;

# so the idea is to handle the exceptions with your own messages
try:
    sum(heterogeneous_list)
except TypeError:
    print(&amp;quot;cannot add objects of different data types&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, the primary benefits to handling exceptions yourself is for code readability, so we&amp;rsquo;ll come back to this section if we see more useful examples.&lt;/p&gt;
&lt;h2 id=&#34;lists&#34;&gt;Lists&lt;/h2&gt;
&lt;p&gt;Lists are fundamental to Python so I&amp;rsquo;m going to spend some time exploring their features. For data science, &lt;code&gt;NumPy arrays&lt;/code&gt; are used frequently, so I thought it&amp;rsquo;d be good to implement all &lt;code&gt;list&lt;/code&gt; operations covered in this section in &lt;code&gt;Numpy arrays&lt;/code&gt; to &lt;em&gt;tease apart their similarities and differences&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Below are the similarities.&lt;/p&gt;
&lt;p&gt;This implies that whatever can be done in python &lt;code&gt;lists&lt;/code&gt; can also be done in numpy &lt;code&gt;arrays&lt;/code&gt;, including: getting the &lt;em&gt;nth&lt;/em&gt; element in the list/array with square brackets, slicing the list/array, iterating through the list/array with &lt;em&gt;start, stop, step&lt;/em&gt;, using the &lt;code&gt;in&lt;/code&gt; operator to find list/array membership, checking length and unpacking list/arrays.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# setup
import numpy as np

# create comparables
python_list = [1,2,3,4,5,6,7,8,9]
numpy_array = np.array([1,2,3,4,5,6,7,8,9])

# bracket operations

# get nth element with square bracket
python_list[0] # 1
numpy_array[0] # 1
python_list[8] # 9
numpy_array[8] # 9
python_list[-1] # 9
numpy_array[-1] # 9

# square bracket to slice 
python_list[:3] # [1, 2, 3]
numpy_array[:3] # array([1, 2, 3])

python_list[1:5] # [2, 3, 4, 5]
numpy_array[1:5] # array([2, 3, 4, 5])

# start, stop, step
python_list[1:8:2] # [2, 4, 6, 8]
numpy_array[1:8:2] # array([2, 4, 6, 8])

# use in operator to check membership
1 in python_list # true
1 in numpy_array # true

0 in python_list # false
0 in numpy_array # false

# finding length
len(python_list) # 9
len(numpy_array) # 9

# unpacking
x,y = [1,2] # now x is 1, y is 2
w,z = np.array([1,2]) # now w is 1, z is 2


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, here are the differences.&lt;/p&gt;
&lt;p&gt;These tasks can be done in python &lt;code&gt;lists&lt;/code&gt;, but require a different approach for NumPy &lt;code&gt;array&lt;/code&gt; including: modification (extend in list, append for array). Finally, lists can store mixed data types, while NumPy array will convert to string.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# python lists can store mixed data types
heterogeneous_list = [&#39;string&#39;, 0.1, True]
type(heterogeneous_list[0]) # str
type(heterogeneous_list[1]) # float
type(heterogeneous_list[2]) # bool

# numpy arrays cannot store mixed data types
# numpy arrays turn all data types into strings
homogeneous_numpy_array = np.array([&#39;string&#39;, 0.1, True]) # saved with mixed data types
type(homogeneous_numpy_array[0]) # numpy.str_
type(homogeneous_numpy_array[1]) # numpy.str_
type(homogeneous_numpy_array[2]) # numpy.str_


# modifying list vs numpy array

# lists can use extend to modify list in place
python_list.extend([10,12,13])  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13]
numpy_array.extend([10,12,13]) # AttributeError: &#39;numpy.ndarray&#39;

# numpy array must use append, instead of extend
numpy_array = np.append(numpy_array,[10,12,13])

# python lists can be added with other lists
new_python_list = python_list + [14,15] # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15]
numpy_array + [14,15] # ValueError

# numpy array cannot be added (use append instead)
# array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 12, 13, 14, 15])
new_numpy_array = np.append(numpy_array, [14,15]) 

# python lists have the append attribute
python_list.append(0) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 0]

# the append attribute for numpy array is used differently
numpy_array = np.append(numpy_array, [0])

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python &lt;code&gt;lists&lt;/code&gt; and NumPy &lt;code&gt;arrays&lt;/code&gt; have much in common, but there are meaningful differences as well.&lt;/p&gt;
&lt;h4 id=&#34;python-lists-vs-numpy-arrays-whats-the-difference&#34;&gt;Python Lists vs NumPy Arrays: What&amp;rsquo;s the difference&lt;/h4&gt;
&lt;p&gt;Now that we know that there &lt;em&gt;are&lt;/em&gt; meaningful differences, what can we attribute these differences to? This 
&lt;a href=&#34;https://webcourses.ucf.edu/courses/1249560/pages/python-lists-vs-numpy-arrays-what-is-the-difference&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;explainer from UCF&lt;/a&gt; highlights &lt;strong&gt;performance&lt;/strong&gt; differences including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Functionality&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m tempted to go down this ð ð³ï¸ of further &lt;code&gt;lists&lt;/code&gt; vs &lt;code&gt;array&lt;/code&gt; comparisons, but we&amp;rsquo;ll hold off for now.&lt;/p&gt;
&lt;h2 id=&#34;tuples&#34;&gt;Tuples&lt;/h2&gt;
&lt;p&gt;Similar to &lt;code&gt;lists&lt;/code&gt;, but &lt;code&gt;tuples&lt;/code&gt; are immutable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
my_list = [1,2]   # check type(my_list)
my_tuple = (1,2)  # check type(my_tuple)
other_tuple = 3,4 # tuples don&#39;t require parentheses

my_list[1] = 3    # lists ARE mutable, my_list is now [1,3]

# exception handling when trying to change tuple
try:
    my_tuple[1] = 3
except TypeError:
    print(&amp;quot;tuples are immutable&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Tuples&lt;/code&gt; are good at returning multiple values from functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# use tuple to return multiple values
def sum_and_product(x,y):
    &amp;quot;&amp;quot;&amp;quot;you can return multiple values from functions using tuples&amp;quot;&amp;quot;&amp;quot;
    return (x + y), (x * y)
    
sp = sum_and_product(4,5)  # sp is (9,20), a tuple

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, &lt;code&gt;lists&lt;/code&gt; can also be used to return multiple values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
def sum_and_product_list(x,y):
    return [(x + y), (x * y)]

spl = sum_and_product_list(5,6)  # [11, 30]
type(spl) # list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, both &lt;code&gt;tuples&lt;/code&gt; and &lt;code&gt;lists&lt;/code&gt; can be used for multiple assignments, here&amp;rsquo;s a pythonic way to swap variables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x, y = 1,2
x,y = y,x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tuples, for the most part, seem to be redundant with &lt;code&gt;lists&lt;/code&gt;, but we&amp;rsquo;ll see if there are special use-cases for immutability down the line.&lt;/p&gt;
&lt;h2 id=&#34;dictionaries&#34;&gt;Dictionaries&lt;/h2&gt;
&lt;p&gt;Dictionaries are good for storing structured data. They have a key/value pair so you can look up values of certain keys. The author provides some ways to initialize a dictionary, with comments about what is &lt;em&gt;more or less pythonic&lt;/em&gt; (I&amp;rsquo;ll take the author&amp;rsquo;s word for it, but open to other perspectives).&lt;/p&gt;
&lt;p&gt;Some of the things you can do with &lt;code&gt;dictionaries&lt;/code&gt; are query keys, values, assign new key/value pairs, check for existence of keys or retrieve certain values.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
empty_dict = {}                   # most pythonic
empty_dict2 = dict()              # less pythonic
grades = {&amp;quot;Joel&amp;quot;: 80, &amp;quot;Grus&amp;quot;: 99} # dictionary literal

type(grades)  # type check, dict

# use bracket to look up values
grades[&amp;quot;Grus&amp;quot;]  # 99
grades[&amp;quot;Joel&amp;quot;]  # 80

# KeyError for looking up non-existent keys
try:
   kate_grades = grades[&amp;quot;Kate&amp;quot;]
except KeyError:
   print(&amp;quot;That key doesn&#39;t exist&amp;quot;)
   
# use in operator to check existence of key
joe_has_grade = &amp;quot;Joel&amp;quot; in grades  
joe_has_grade # true

kate_does_not = &amp;quot;Kate&amp;quot; in grades
kate_does_not # false

# use &#39;get&#39; method to get values in dictionaries
grades.get(&amp;quot;Joel&amp;quot;) # 80
grades.get(&amp;quot;Grus&amp;quot;) # 99
grades.get(&amp;quot;Kate&amp;quot;) # default: None

# assign new key/value pair using brackets
grades[&amp;quot;Tim&amp;quot;] = 93

grades # {&#39;Joel&#39;: 80, &#39;Grus&#39;: 99, &#39;Tim&#39;: 93}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dictionaries are good for representing structured data that can be queries. The key take-away here is that in order to iterate through &lt;code&gt;dictionaries&lt;/code&gt; to get either &lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;values&lt;/code&gt; or both, we&amp;rsquo;ll need to use specific methods likes &lt;code&gt;keys()&lt;/code&gt;, &lt;code&gt;values()&lt;/code&gt; or &lt;code&gt;items()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
tweet = {
    &amp;quot;user&amp;quot;: &amp;quot;paulapivat&amp;quot;,
    &amp;quot;text&amp;quot;: &amp;quot;Reading Data Science from Scratch&amp;quot;,
    &amp;quot;retweet_count&amp;quot;: 100,
    &amp;quot;hashtags&amp;quot;: [&amp;quot;#66daysofdata&amp;quot;, &amp;quot;datascience&amp;quot;, &amp;quot;machinelearning&amp;quot;, &amp;quot;python&amp;quot;, &amp;quot;R&amp;quot;]
    }
    
# query specific values
tweet[&amp;quot;retweet_count&amp;quot;] # 100

# query values within a list
tweet[&amp;quot;hashtags&amp;quot;] # [&#39;#66daysofdata&#39;, &#39;datascience&#39;, &#39;machinelearning&#39;, &#39;python&#39;, &#39;R&#39;]
tweet[&amp;quot;hashtags&amp;quot;][2] # &#39;machinelearning&#39;

# retrieve ALL keys
tweet_keys = tweet.keys()
tweet_keys              # dict_keys([&#39;user&#39;, &#39;text&#39;, &#39;retweet_count&#39;, &#39;hashtags&#39;])
type(tweet_keys)        # different data type: dict != dict_keys

# retrieve ALL values
tweet_values = tweet.values() 
tweet_values  # dict_values([&#39;paulapivat&#39;, &#39;Reading Data Science from Scratch&#39;, 100, [&#39;#66daysofdata&#39;, &#39;datascience&#39;, &#39;machinelearning&#39;, &#39;python&#39;, &#39;R&#39;]])

type(tweet_values)      # different data type: dict != dict_values

# create iterable for Key-Value pairs (in tuple)
tweet_items = tweet.items()

# iterate through tweet_items()
for key,value in tweet_items:
    print(&amp;quot;These are the keys:&amp;quot;, key)
    print(&amp;quot;These are the values:&amp;quot;, value)
    
# cannot iterate through original tweet dictionary
# ValueError: too many values to unpack (expected 2)
for key, value in tweet:
    print(key)
    
# cannot use &#39;enumerate&#39; because that only provides index and key (no value)
for key, value in enumerate(tweet):
    print(key)   # print 0 1 2 3 - index values
    print(value) # user text retweet_count hashtags (incorrectly print keys)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like in &lt;code&gt;lists&lt;/code&gt; and &lt;code&gt;tuples&lt;/code&gt;, you can use the &lt;code&gt;in&lt;/code&gt; operator to find membership. The one caveat is you cannot look up &lt;em&gt;values&lt;/em&gt; that are in &lt;code&gt;lists&lt;/code&gt;, unless you use bracket notation to help.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# search keys
&amp;quot;user&amp;quot; in tweet # true
&amp;quot;bball&amp;quot; in tweet # false

&amp;quot;paulapivat&amp;quot; in tweet_values # true
&#39;python&#39; in tweet_values # false (python is nested in &#39;hashtags&#39;)
&amp;quot;hashtags&amp;quot; in tweet  # true

# finding values inside a list requires brackets to help
&#39;python&#39; in tweet[&#39;hashtags&#39;]  # true

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;What is or is not hashable?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dictionary&lt;/code&gt; keys must be hashable.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Strings&lt;/code&gt; are hashable. So we can use &lt;code&gt;strings&lt;/code&gt; as dictionary keys, but we &lt;strong&gt;cannot&lt;/strong&gt; use &lt;code&gt;lists&lt;/code&gt; because they are not hashable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
paul = &amp;quot;paul&amp;quot;
type(paul)        # check type, str

hash(paul)        # -3897810863245179227 ; strings are hashable
paul.__hash__()   # -3897810863245179227 ; another way to find the hash

jake = [&#39;jake&#39;]   # this is a list
type(jake)        # check type, list

# lists are not hashable - cannot be used as dictionary keys
try:
   hash(jake)
except TypeError:
   print(&#39;lists are not hashable&#39;)

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;defaultdict&#34;&gt;defaultdict&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;defaultdict&lt;/code&gt; is a &lt;strong&gt;subclass&lt;/strong&gt; of dictionaries (&lt;code&gt;dict&lt;/code&gt;, see previous post), so it &lt;em&gt;inherits&lt;/em&gt; most of its behavior from &lt;code&gt;dict&lt;/code&gt; with additional features. To understand how those features make it different, and more convenient in some cases, we&amp;rsquo;ll need to run into some errors.&lt;/p&gt;
&lt;p&gt;If we try to count words in a document, the general approach is to create a dictionary where the dictionary &lt;code&gt;keys&lt;/code&gt; are words and the dictionary &lt;code&gt;values&lt;/code&gt; are counts of those words.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try do do this with a regular dictionary.&lt;/p&gt;
&lt;p&gt;First, to setup, we&amp;rsquo;ll take a list of words and &lt;code&gt;split()&lt;/code&gt; into individual words. I took this paragraph from 
&lt;a href=&#34;https://rpubs.com/paulapivat/vintage_nba_seasons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;another project&lt;/a&gt; i&amp;rsquo;m working on and artificially added some extra words to ensure that certain words appeared more than once (it&amp;rsquo;ll be apparent why soon).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# paragraph
lines = [&amp;quot;This table highlights 538&#39;s new NBA statistic, RAPTOR, in addition to the more established Wins Above Replacement (WAR). An extra column, Playoff (P/O) War, is provided to highlight stars performers in the post-season, when the stakes are higher. The table is limited to the top-100 players who have played at least 1,000 minutes minutes the table Wins NBA NBA RAPTOR more players&amp;quot;]

# split paragraphy into individual words
lines = &amp;quot; &amp;quot;.join(lines).split()

type(lines) # list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have our &lt;code&gt;lines&lt;/code&gt; list, we&amp;rsquo;ll create an empty &lt;code&gt;dict&lt;/code&gt; called &lt;code&gt;word_counts&lt;/code&gt; and have each word be the &lt;code&gt;key&lt;/code&gt; and each &lt;code&gt;value&lt;/code&gt; be the count of that word.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# empty list
word_counts = {}

# loop through lines to count each word
for word in lines:
    word_counts[word] += 1
    
# KeyError: &#39;This&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We received a &lt;code&gt;KeyError&lt;/code&gt; for the very first word in &lt;code&gt;lines&lt;/code&gt; (i.e. &amp;lsquo;This&amp;rsquo;) because the &lt;strong&gt;list tried to count a key that didn&amp;rsquo;t exist&lt;/strong&gt;. We&amp;rsquo;ve learned to handle exceptions so we can use &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here, we&amp;rsquo;re looping through &lt;code&gt;lines&lt;/code&gt; and when we try to count a key that doesn&amp;rsquo;t exist, like we did previously, we&amp;rsquo;re &lt;em&gt;now&lt;/em&gt; anticipating a &lt;code&gt;KeyError&lt;/code&gt; and will set the initial count to 1, then it can continue to loop-through and count the word, which now exists, so it can be incremented up.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# empty list
word_counts = {}

# exception handling
for word in lines:
    try:
        word_counts[word] += 1
    except KeyError:
        word_counts[word] = 1

# call word_counts
# abbreviated for space
word_counts

{&#39;This&#39;: 1,
 &#39;table&#39;: 3,
 &#39;highlights&#39;: 1,
 &amp;quot;538&#39;s&amp;quot;: 1,
 &#39;new&#39;: 1,
 &#39;NBA&#39;: 3,
 &#39;statistic,&#39;: 1,
 &#39;RAPTOR,&#39;: 1,
 &#39;in&#39;: 2,
 &#39;addition&#39;: 1,
 &#39;to&#39;: 3,
 &#39;the&#39;: 5,
 &#39;more&#39;: 2,
 ...
 &#39;top-100&#39;: 1,
 &#39;players&#39;: 2,
 &#39;who&#39;: 1,
 &#39;have&#39;: 1,
 &#39;played&#39;: 1,
 &#39;at&#39;: 1,
 &#39;least&#39;: 1,
 &#39;1,000&#39;: 1,
 &#39;minutes&#39;: 2,
 &#39;RAPTOR&#39;: 1}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, there are other ways to achieve the above:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# use conditional flow
word_counts = {}

for word in lines:
    if word in word_counts:
        word_counts[word] += 1
    else:
        word_counts[word] = 1
        
# use get
for word in lines:
    previous_count = word_counts.get(word, 0)
    word_counts[word] = previous_count + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s where the author makes the case for &lt;code&gt;defaultdict&lt;/code&gt;, arguing that the two aforementioned approaches are unweildy. We&amp;rsquo;ll come back full circle to try our first approach, using &lt;code&gt;defaultdict&lt;/code&gt; instead of the traditional &lt;code&gt;dict&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;defaultdict&lt;/code&gt; is a subclass of &lt;code&gt;dict&lt;/code&gt; and must be imported from &lt;code&gt;collections&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import defaultdict

word_counts = defaultdict(int)

for word in lines:
    word_counts[word] += 1
    
# we no longer get a KeyError
# abbreviated for space
defaultdict(int,
            {&#39;This&#39;: 1,
             &#39;table&#39;: 3,
             &#39;highlights&#39;: 1,
             &amp;quot;538&#39;s&amp;quot;: 1,
             &#39;new&#39;: 1,
             &#39;NBA&#39;: 3,
             &#39;statistic,&#39;: 1,
             &#39;RAPTOR,&#39;: 1,
             &#39;in&#39;: 2,
             &#39;addition&#39;: 1,
             &#39;to&#39;: 3,
             &#39;the&#39;: 5,
             &#39;more&#39;: 2,
             ...
             &#39;top-100&#39;: 1,
             &#39;players&#39;: 2,
             &#39;who&#39;: 1,
             &#39;have&#39;: 1,
             &#39;played&#39;: 1,
             &#39;at&#39;: 1,
             &#39;least&#39;: 1,
             &#39;1,000&#39;: 1,
             &#39;minutes&#39;: 2,
             &#39;RAPTOR&#39;: 1})

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unlike a regular dictionary, when &lt;code&gt;defaultdict&lt;/code&gt; tries to look up a key it doesn&amp;rsquo;t contain, it&amp;rsquo;ll automatically add a value for it using the argument we provided when we first created the &lt;code&gt;defaultdict&lt;/code&gt;. If you see above, we entered an &lt;code&gt;int&lt;/code&gt; as the argument, which allows it to automatically &lt;em&gt;add an integer value&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you want your &lt;code&gt;defaultdict&lt;/code&gt; to have &lt;code&gt;values&lt;/code&gt; be &lt;code&gt;lists&lt;/code&gt;, you can pass a &lt;code&gt;list&lt;/code&gt; as argument. Then, when you &lt;code&gt;append&lt;/code&gt; a value, it is automatically contained in a &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dd_list = defaultdict(list) # defaultdict(list, {})

dd_list[2].append(1)        # defaultdict(list, {2: [1]})

dd_list[4].append(&#39;string&#39;) # defaultdict(list, {2: [1], 4: [&#39;string&#39;]})

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also pass a &lt;code&gt;dict&lt;/code&gt; into &lt;code&gt;defaultdict&lt;/code&gt;, ensuring that all appended values are contained in a &lt;code&gt;dict&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dd_dict = defaultdict(dict) # defaultdict(dict, {})

# match key-with-value
dd_dict[&#39;first_name&#39;] = &#39;lebron&#39; # defaultdict(dict, {&#39;first_name&#39;: &#39;lebron&#39;})
dd_dict[&#39;last_name&#39;] = &#39;james&#39;   

# match key with dictionary containing another key-value pair
dd_dict[&#39;team&#39;][&#39;city&#39;] = &#39;Los Angeles&#39;

# defaultdict(dict,
#            {&#39;first_name&#39;: &#39;lebron&#39;,
#             &#39;last_name&#39;: &#39;james&#39;,
#             &#39;team&#39;: {&#39;city&#39;: &#39;Los Angeles&#39;}})

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;application-grouping-with-defaultdict&#34;&gt;Application: Grouping with defaultdict&lt;/h4&gt;
&lt;p&gt;The follow example is from 
&lt;a href=&#34;https://realpython.com/python-defaultdict/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Real Python&lt;/a&gt;, a fantastic resource for all things Python.&lt;/p&gt;
&lt;p&gt;It is common to use &lt;code&gt;defaultdict&lt;/code&gt; to group items in a sequence or collection, setting the initial parameter (aka &lt;code&gt;.default_factory&lt;/code&gt;) set to &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dep = [(&#39;Sales&#39;, &#39;John Doe&#39;),
       (&#39;Sales&#39;, &#39;Martin Smith&#39;),
       (&#39;Accounting&#39;, &#39;Jane Doe&#39;),
       (&#39;Marketing&#39;, &#39;Elizabeth Smith&#39;),
       (&#39;Marketing&#39;, &#39;Adam Doe&#39;)]
       
from collections import defaultdict

dep_dd = defaultdict(list)

for department, employee in dep:
    dep_dd[department].append(employee)
    
dep_dd
#defaultdict(list,
#            {&#39;Sales&#39;: [&#39;John Doe&#39;, &#39;Martin Smith&#39;],
#             &#39;Accounting&#39;: [&#39;Jane Doe&#39;],
#             &#39;Marketing&#39;: [&#39;Elizabeth Smith&#39;, &#39;Adam Doe&#39;]})

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happens when you have &lt;strong&gt;duplicate&lt;/strong&gt; entries? We&amp;rsquo;re jumping ahead slightly to use &lt;code&gt;set&lt;/code&gt; handle duplicates and only group unique entries:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# departments with duplicate entries
dep = [(&#39;Sales&#39;, &#39;John Doe&#39;),
       (&#39;Sales&#39;, &#39;Martin Smith&#39;),
       (&#39;Accounting&#39;, &#39;Jane Doe&#39;),
       (&#39;Marketing&#39;, &#39;Elizabeth Smith&#39;),
       (&#39;Marketing&#39;, &#39;Elizabeth Smith&#39;),
       (&#39;Marketing&#39;, &#39;Adam Doe&#39;),
       (&#39;Marketing&#39;, &#39;Adam Doe&#39;),
       (&#39;Marketing&#39;, &#39;Adam Doe&#39;)]

# use defaultdict with set
dep_dd = defaultdict(set)

# set object has no attribute &#39;append&#39;
# so use &#39;add&#39; to achieve the same effect
for department, employee in dep:
    dep_dd[department].add(employee)
    
dep_dd
#defaultdict(set,
#            {&#39;Sales&#39;: {&#39;John Doe&#39;, &#39;Martin Smith&#39;},
#             &#39;Accounting&#39;: {&#39;Jane Doe&#39;},
#             &#39;Marketing&#39;: {&#39;Adam Doe&#39;, &#39;Elizabeth Smith&#39;}})
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;application-accumulating-with-defaultdict&#34;&gt;Application: Accumulating with defaultdict&lt;/h4&gt;
&lt;p&gt;Finally, we&amp;rsquo;ll use &lt;code&gt;defaultdict&lt;/code&gt; to accumulate values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;incomes = [(&#39;Books&#39;, 1250.00),
           (&#39;Books&#39;, 1300.00),
           (&#39;Books&#39;, 1420.00),
           (&#39;Tutorials&#39;, 560.00),
           (&#39;Tutorials&#39;, 630.00),
           (&#39;Tutorials&#39;, 750.00),
           (&#39;Courses&#39;, 2500.00),
           (&#39;Courses&#39;, 2430.00),
           (&#39;Courses&#39;, 2750.00),]

# enter float as argument        
dd = defaultdict(float)  # collections.defaultdict

# defaultdict(float, {&#39;Books&#39;: 3970.0, &#39;Tutorials&#39;: 1940.0, &#39;Courses&#39;: 7680.0})
for product, income in incomes:
    dd[product] += income
    
for product, income in dd.items():
    print(f&amp;quot;Total income for {product}: ${income:,.2f}&amp;quot;)

# Total income for Books: $3,970.00
# Total income for Tutorials: $1,940.00
# Total income for Courses: $7,680.00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can see that &lt;code&gt;defaultdict&lt;/code&gt; and &lt;code&gt;dictionaries&lt;/code&gt; can be handy for grouping, counting and accumulating values in a column. We&amp;rsquo;ll come back to revisit these foundational concepts once the data science applications are clearer.&lt;/p&gt;
&lt;p&gt;In summary, &lt;code&gt;dictionaries&lt;/code&gt; and &lt;code&gt;defaultdict&lt;/code&gt; can be used to group items, accumulate items and count items. Both can be used even when the &lt;code&gt;key&lt;/code&gt; doesn&amp;rsquo;t (yet) exist, but its &lt;code&gt;defaultdict&lt;/code&gt; handles this more succintly. For now, we&amp;rsquo;ll stop here and proceed to the next topic: counters.&lt;/p&gt;
&lt;h2 id=&#34;counters&#34;&gt;Counters&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Counter&lt;/code&gt; is a &lt;code&gt;dict&lt;/code&gt; &lt;strong&gt;subclass&lt;/strong&gt; for counting hashable objects (see 
&lt;a href=&#34;https://docs.python.org/3/library/collections.html#collections.Counter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;doc&lt;/a&gt;).
Back to our example in the previous section, we can use &lt;code&gt;Counter&lt;/code&gt; instead of &lt;code&gt;dict&lt;/code&gt;, specifically for counting:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import Counter

# we can count the letters in this paragraph
count_letters = Counter(&amp;quot;This table highlights 538&#39;s new NBA statistic, RAPTOR, in addition to the more established Wins Above Replacement (WAR). An extra column, Playoff (P/O) War, is provided to highlight stars performers in the post-season, when the stakes are higher. The table is limited to the top-100 players who have played at least 1,000 minutes minutes the table Wins NBA NBA RAPTOR more players&amp;quot;)

# call count_letters
count_letters

# returns
Counter({&#39;T&#39;: 4,
         &#39;h&#39;: 19,
         &#39;i&#39;: 22,
         &#39;s&#39;: 24,
         &#39; &#39;: 61,
         &#39;t&#39;: 29,
         &#39;a&#39;: 20,
         &#39;b&#39;: 5,
         &#39;l&#39;: 14,
         &#39;e&#39;: 35,
         &#39;g&#39;: 5,
         &#39;5&#39;: 1,
         &#39;3&#39;: 1,
         &#39;8&#39;: 1,
         &amp;quot;&#39;&amp;quot;: 1,
         &#39;n&#39;: 13,
         &#39;w&#39;: 3,
         &#39;N&#39;: 3,
         &#39;B&#39;: 3,
         &#39;A&#39;: 8,
         &#39;c&#39;: 3,
         &#39;,&#39;: 6,
         &#39;R&#39;: 6,
         &#39;P&#39;: 4,
         &#39;O&#39;: 3,
         &#39;d&#39;: 7,
         &#39;o&#39;: 15,
         &#39;m&#39;: 8,
         &#39;r&#39;: 13,
         &#39;W&#39;: 4,
         &#39;v&#39;: 3,
         &#39;p&#39;: 8,
         &#39;(&#39;: 2,
         &#39;)&#39;: 2,
         &#39;.&#39;: 2,
         &#39;x&#39;: 1,
         &#39;u&#39;: 3,
         &#39;y&#39;: 4,
         &#39;f&#39;: 3,
         &#39;/&#39;: 1,
         &#39;-&#39;: 2,
         &#39;k&#39;: 1,
         &#39;1&#39;: 2,
         &#39;0&#39;: 5})

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Counter&lt;/code&gt; very easily did what &lt;code&gt;defaultdict(int)&lt;/code&gt; did previously. We can even call the &lt;code&gt;most_common&lt;/code&gt; method to get the most common letters:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# get the thirteen most common letters
for letter, count in count_letters.most_common(13):
   print(letter, count)
   
# returns - 13 items
  61
e 35
t 29
s 24
i 22
a 20
h 19
o 15
l 14
n 13
r 13
A 8
m 8
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sets&#34;&gt;Sets&lt;/h2&gt;
&lt;p&gt;We had a glimpse of &lt;code&gt;set&lt;/code&gt; previously. There are two things the author emphasize with &lt;code&gt;set&lt;/code&gt;. First, they&amp;rsquo;re faster than lists for checking membership:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
lines_list = [&amp;quot;This table highlights 538&#39;s new NBA statistic, RAPTOR, in addition to the more established Wins Above Replacement (WAR). An extra column, Playoff (P/O) War, is provided to highlight stars performers in the post-season, when the stakes are higher. The table is limited to the top-100 players who have played at least 1,000 minutes minutes the table Wins NBA NBA RAPTOR more players&amp;quot;]

&amp;quot;zip&amp;quot; in lines_list # False, but have to check every element

lines_set = set(lines_list)
type(lines_set) # set

&amp;quot;zip&amp;quot; in lines_set # Very fast to check
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because this was an arbitrary example, it&amp;rsquo;s not obvious that checking membership in &lt;code&gt;set&lt;/code&gt; is faster than &lt;code&gt;list&lt;/code&gt; so we&amp;rsquo;ll take the author&amp;rsquo;s word for it.&lt;/p&gt;
&lt;p&gt;The second highlight for &lt;code&gt;set&lt;/code&gt; is to find &lt;strong&gt;distinct&lt;/strong&gt; items in a collection:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number_list = [1,2,3,1,2,3] # list with six items
item_set = set(number_list) # turn it into a set

item_set # now has three items {1, 2, 3}
turn_into_list = list(item_set) # turn into distinct item list
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;control-flow&#34;&gt;Control Flow&lt;/h3&gt;
&lt;h3 id=&#34;truthiness&#34;&gt;Truthiness&lt;/h3&gt;
&lt;h3 id=&#34;sorting&#34;&gt;Sorting&lt;/h3&gt;
&lt;h3 id=&#34;list-comprehensions&#34;&gt;List Comprehensions&lt;/h3&gt;
&lt;h3 id=&#34;automated-testing-and-assert&#34;&gt;Automated Testing and assert&lt;/h3&gt;
&lt;h3 id=&#34;object-oriented-programming&#34;&gt;Object-Oriented Programming&lt;/h3&gt;
&lt;h3 id=&#34;iterables-and-generators&#34;&gt;Iterables and Generators&lt;/h3&gt;
&lt;h3 id=&#34;randomness&#34;&gt;Randomness&lt;/h3&gt;
&lt;h3 id=&#34;regular-expressions&#34;&gt;Regular Expressions&lt;/h3&gt;
&lt;h3 id=&#34;zip-and-argument-unpacking&#34;&gt;zip and Argument Unpacking&lt;/h3&gt;
&lt;h3 id=&#34;args-and-kwargs&#34;&gt;args and kwargs&lt;/h3&gt;
&lt;h3 id=&#34;type-annotations&#34;&gt;Type Annotations&lt;/h3&gt;
&lt;h3 id=&#34;how-to-write-type-annotations&#34;&gt;How to Write Type Annotations&lt;/h3&gt;
&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Machine learning as a service</title>
      <link>/post/mlaas/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      <guid>/post/mlaas/</guid>
      <description>&lt;h2 id=&#34;preparing-api-endpoints-in-python-with-flask&#34;&gt;Preparing API endpoints in Python with Flask&lt;/h2&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll create a minimal API endpoint that allows users to make request to calculate the area of a rectangle. The following code sets up an API endpoint locally. We&amp;rsquo;ll import &lt;code&gt;Flask&lt;/code&gt;, a lightweight web application framework and &lt;code&gt;CORS&lt;/code&gt; (cross-origin resource sharing) which allows for various HTTP requests.&lt;/p&gt;
&lt;p&gt;We have two endpoints, one basic &amp;ldquo;hello world&amp;rdquo; and the other calculate the area (i.e., width x height).&lt;/p&gt;
&lt;p&gt;This is saved in &lt;code&gt;App.py&lt;/code&gt;. The command to run this file is &lt;code&gt;$ python3 App.py&lt;/code&gt;. The last line ensures the API is running locally on &lt;code&gt;localhost:5000&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from flask import Flask, request
from flask_cors import CORS, cross_origin
import joblib
import numpy as np 

app = Flask(__name__)
CORS(app)

@app.route(&#39;/&#39;)
def helloworld():
    return &#39;Helloworld&#39;

# Example request: http://localhost:5000/area?w=50&amp;amp;h=3
@app.route(&#39;/area&#39;, methods=[&#39;GET&#39;])
@cross_origin()
def area():
    w = float(request.values[&#39;w&#39;])
    h = float(request.values[&#39;h&#39;])
    return str(w * h)

if __name__ == &#39;__main__&#39;:
    app.run(host=&#39;0.0.0.0&#39;, port=5000, debug=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can just run &lt;code&gt;localhost:5000&lt;/code&gt; and get &lt;code&gt;Helloworld&lt;/code&gt; or make a request to get the &lt;strong&gt;area&lt;/strong&gt;, for example: &lt;code&gt;http://localhost:5000/area?w=20&amp;amp;h=33&lt;/code&gt; (this yeilds 660)&lt;/p&gt;
&lt;h2 id=&#34;training-a-logistic-regression-classification-model&#34;&gt;Training a Logistic Regression classification model&lt;/h2&gt;
&lt;p&gt;After setting up some API endpoints, it&amp;rsquo;s time to create a basic machine learning model. We&amp;rsquo;ll create a logistic regression model to classify flowers from the &lt;strong&gt;Iris&lt;/strong&gt; dataset. This will be created in &lt;em&gt;one&lt;/em&gt; &lt;code&gt;jupyter notebook&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll load all required libraries.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import joblib
import numpy as np
import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we&amp;rsquo;ll load the Iris dataset that comes with scikit learn, &lt;code&gt;sklearn&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iris = load_iris()

# assign two variables at once
X, y = iris[&#39;data&#39;], iris[&#39;target&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ll reshape the data using &lt;code&gt;numpy&lt;/code&gt;, then split the data into training and validation sets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# reshape data for logistic regression
dataset = np.hstack((X, y.reshape(-1,1)))
np.random.shuffle(dataset)

# split data into training, validation sets
X_train, X_test, y_train, y_test = train_test_split(dataset[:, :4],
                                                    dataset[:, 4],
                                                    test_size=0.2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ll then fit a logistic regression model by fitting the training set to the validation set.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;model = LogisticRegression()
model.fit(X_train, y_train)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we&amp;rsquo;ll use the model to predict on the validation data (&lt;em&gt;note&lt;/em&gt;: in a real project a distinction is made between &lt;code&gt;validation&lt;/code&gt; and &lt;code&gt;testing&lt;/code&gt; sets, but we&amp;rsquo;ll blur that distinction for this demo). You can also test the model to make a prediction on a single observation.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also a good idea to get the &lt;code&gt;accuracy_score()&lt;/code&gt;, although it may not be ideal for classification models.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# make a prediction
y_pred = model.predict(X_test)

# get accuracy score
accuracy_score(y_test, y_pred)

# make prediction on single Iris obervation
model.predict([[5.1, 3.5, 1.4, 0.2]])

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we need to use &lt;code&gt;joblib&lt;/code&gt; to save an &lt;code&gt;iris.model&lt;/code&gt; to our directory, this will be used to connect to the API.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;joblib.dump(model, &#39;iris.model&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creating-an-api-endpoint-for-the-logistic-regression-model&#34;&gt;Creating an API endpoint for the Logistic Regression model&lt;/h2&gt;
&lt;p&gt;Back in the &lt;code&gt;App.py&lt;/code&gt; file, we&amp;rsquo;ll &lt;em&gt;add&lt;/em&gt; this section to create an endpoint, the &lt;code&gt;predict_species()&lt;/code&gt; function that loads the &lt;code&gt;iris.model&lt;/code&gt;, then sends a Post request of the four parameter values from &lt;code&gt;iris[&#39;data&#39;]&lt;/code&gt;. The &lt;code&gt;predict_species()&lt;/code&gt; function will then return one of three flower species.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@app.route(&#39;/iris&#39;, methods=[&#39;POST&#39;])
@cross_origin()
def predict_species():
    model = joblib.load(&#39;iris.model&#39;)  #needs to be the correct path
    req = request.values[&#39;param&#39;]
    inputs = np.array(req.split(&#39;,&#39;), dtype=np.float32).reshape(1,-1)
    predict_target = model.predict(inputs)
    if predict_target == 0:
        return &#39;Setosa&#39;
    elif predict_target == 1:
        return &#39;Versicolor&#39;
    else:
        return &#39;Virginica&#39;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;testing-the-api-endpoint-on-postman&#34;&gt;Testing the API endpoint on Postman&lt;/h2&gt;
&lt;p&gt;Finally, we&amp;rsquo;ll use 
&lt;a href=&#34;https://www.postman.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Postman&lt;/a&gt;, a platform for API development. We will &lt;strong&gt;post&lt;/strong&gt; four parameters (i.e., sepal length, sepal width, petal length and petal width) to the API endpoint and expect to receive a name back, either Setosa, Versicolor or Virginica.
In Postman, we&amp;rsquo;ll create a new collection and a new request:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./postman.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The next step from here is to go beyond localhost and deploy the model. We&amp;rsquo;ll explore that in another post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Essential Readings in Data Science</title>
      <link>/post/data_science_canon/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/post/data_science_canon/</guid>
      <description>&lt;h2 id=&#34;data-science-literature-review&#34;&gt;Data Science Literature Review&lt;/h2&gt;
&lt;p&gt;I saw an 
&lt;a href=&#34;https://twitter.com/KellyBodwin/status/1303083136046170112?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;intriguing question&lt;/a&gt; posed on Twitter and some of the responses were illuminating.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./reading_list.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s 
&lt;a href=&#34;https://twitter.com/beeonaposy/status/1191798851289649154?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;another variant&lt;/a&gt; of the question:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./ds_canon.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Although Data Science has a long history, it&amp;rsquo;s considered a relatively young field.&lt;/p&gt;
&lt;p&gt;This space will be used to document recommended reading for new entrants:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Downey, Allen (2016) There is only one test. 
&lt;a href=&#34;http://allendowney.blogspot.com/2016/06/there-is-still-only-one-test.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wickham, Hadley (2014) Tidy Data. The Journal of Statistical Software, vol 59. 
&lt;a href=&#34;https://vita.had.co.nz/papers/tidy-data.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;original&lt;/a&gt;, 
&lt;a href=&#34;https://tidyr.tidyverse.org/articles/tidy-data.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;update&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;James, G., Witten, D., Hastie, T. &amp;amp; Tibshirani, R. (2014) An Introduction to Statistical Learning with Applications in R. 
&lt;a href=&#34;http://faculty.marshall.usc.edu/gareth-james/ISL/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shmueli, G. (2010) To explain or to predict? Statistical Science, 25(3), 289-310. 
&lt;a href=&#34;https://projecteuclid.org/euclid.ss/1294167961&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hernan, M.A., Hsu, J. &amp;amp; Healy, B. (2019) A second chance to get causal inference right: A classification of Data Science tasks. Chance, vol 32(1). 
&lt;a href=&#34;https://amstat.tandfonline.com/doi/full/10.1080/09332480.2019.1579578&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gelman, A., Pasarica, C. &amp;amp; Dodhia, R. (2002) Let&amp;rsquo;s practice what we preach: Turning tables into graphs. The American Statistician, vol 56(2). 
&lt;a href=&#34;https://www.tandfonline.com/doi/abs/10.1198/000313002317572790&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scott Formann-Roe (June, 2012) Understanding the Bias-Variance Tradeoff. 
&lt;a href=&#34;http://scott.fortmann-roe.com/docs/BiasVariance.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Donoho, D (2017) 50 Years of Data Science. Journal of Computational and Graphical Statistics, vol 26(4). 
&lt;a href=&#34;https://www.tandfonline.com/doi/full/10.1080/10618600.2017.1384734&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wilson, G., Bryan, J., Cranston, K., Kitzes, J., Nederbragt, L. &amp;amp; Teal, T.K. (2017) Good enough practices in scientific computing. Plos Computational Biology. 
&lt;a href=&#34;https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005510&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kevin Markham (2019) 100 pandas tricks to save you time and energy. 
&lt;a href=&#34;https://www.dataschool.io/python-pandas-tips-and-tricks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chris Albon&amp;rsquo;s code snippets. 
&lt;a href=&#34;https://chrisalbon.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Howard, J. &amp;amp; Gugger, S. (Aug 4, 2020) Deep Learning for Coders with fastai and PyTorch: AI Applications without a PhD 1st Ed. 
&lt;a href=&#34;https://course.fast.ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brandon Rohrer (Jan, 2020) End-to-End Machine Learning: Complete Course Catalog. 
&lt;a href=&#34;https://end-to-end-machine-learning.teachable.com/p/complete-course-library-full-end-to-end-machine-learning-catalog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;; 
&lt;a href=&#34;https://e2eml.school/blog.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;second source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;John Rauser (Dec, 2016) How Humans See Data 
&lt;a href=&#34;https://www.youtube.com/watch?v=fSgEeI2Xpdc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;youtube&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Broman, K.W. &amp;amp; Woo, K.H. (2018) Data Organization in Spreadsheets. The American Statistician, vol 72(1). 
&lt;a href=&#34;https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1375989&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sculley, D., Holt, G., Golovin, D., Davydov, E., Phillips, T., Ebner, D., Chaudhary, V., &amp;amp; Young, M. (2014) Machine Learning: The High Interest Credit Card of Technical Debt. 
&lt;a href=&#34;https://research.google/pubs/pub43146/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3Blue1Brown for Linear Algebra 
&lt;a href=&#34;https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;youtube&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenny Bryan. Stat 545: Data Wrangling, Exploration and Analysis with R. 
&lt;a href=&#34;https://stat545.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>A collection of weird pretty plots</title>
      <link>/post/ggplot_art/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/post/ggplot_art/</guid>
      <description>&lt;h2 id=&#34;tidytuesday-2020-08-18-week-34&#34;&gt;TidyTuesday 2020-08-18 (week 34)&lt;/h2&gt;
&lt;p&gt;In the process of exploring dendrograms, I create jheri curls :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./plant_dendogram_mess.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another plot with less hair:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./dendrogram_plant.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;I call this Disco Fire:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./disco_fire.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Custom Functions into the Workflow</title>
      <link>/post/custom-functions/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/custom-functions/</guid>
      <description>


&lt;div id=&#34;context&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;In web development, functions are everywhere and are written to get even the smallest tasks done like allowing users to click on a button or controlling where and how a pop-up modal appears. In data analysis, you can go without using functions as long as youâre working on small scale projects and do not need to share your code with others.&lt;/p&gt;
&lt;p&gt;Moreover, they can make your life a lot easier if you want to avoid copying and pasting your code in a bunch of different places (it also makes your code less error prone and easier to update).&lt;/p&gt;
&lt;p&gt;Functions may require a &lt;strong&gt;slight&lt;/strong&gt; perspective shift for those who arenât familiar. In this post, I want to share how I &lt;strong&gt;snuck&lt;/strong&gt; functions into my workflow for a specific project.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;slipping-custom-functions-into-the-workflow&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slipping Custom Functions into the Workflow&lt;/h2&gt;
&lt;p&gt;The most intuitive way, in my opinion, to introduce functions is to take a certain data pre-processing sequence and &lt;strong&gt;turn it into a function&lt;/strong&gt;. Below, I have a newly created dataframe called &lt;code&gt;net_sales_year_month&lt;/code&gt; that is a dataframe with three columns (net_sales, Year, Month).&lt;/p&gt;
&lt;p&gt;Suppose my objective is to add a &lt;code&gt;Day&lt;/code&gt; and &lt;code&gt;month_year&lt;/code&gt; column, that combines Year, Month and Day (yyyy-mm-dd) into a &lt;code&gt;date&lt;/code&gt; type. The pre-processing task would be to take &lt;code&gt;net_sales_year_month&lt;/code&gt; and use the mutate function to create some new columns.&lt;/p&gt;
&lt;p&gt;This is fine and well if youâre doing this &lt;strong&gt;one time&lt;/strong&gt;, but what if you need to repeat this operation on multiple columns?&lt;/p&gt;
&lt;p&gt;Thatâs where a &lt;strong&gt;custom function&lt;/strong&gt; comes in.&lt;/p&gt;
&lt;p&gt;For example, the function below called &lt;code&gt;create_ymd_function&lt;/code&gt; simply &lt;strong&gt;replaces&lt;/strong&gt; &lt;code&gt;net_sales_year_month&lt;/code&gt; with a generic &lt;code&gt;data&lt;/code&gt;, serving as the function parameter. Now &lt;em&gt;any&lt;/em&gt; dataframe can be used as a parameter for the &lt;code&gt;create_ymd_function&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note the BEFORE and AFTER sections below - they have the same output, but one is a more general function that can be used with other data frames.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Selecting columns to work with (net_sales)
net_sales_year_month &amp;lt;- retail_sales2 %&amp;gt;%
    select(`Net Sales`, Year, Month) %&amp;gt;%
    rename(net_sales = `Net Sales`)

# BEFORE
net_sales_year_month %&amp;gt;%
        mutate(
            Day = 1,
            month_year = paste(Year, Month, Day),
            month_year = month_year %&amp;gt;% ymd(),
            month = month(month_year)
        )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 36 x 6
##    net_sales  Year Month       Day month_year month
##        &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt;
##  1     8284.  2017 January       1 2017-01-01     1
##  2     6388.  2017 February      1 2017-02-01     2
##  3     4589.  2017 March         1 2017-03-01     3
##  4     8533.  2017 April         1 2017-04-01     4
##  5     6237.  2017 May           1 2017-05-01     5
##  6     9370.  2017 June          1 2017-06-01     6
##  7     5959.  2017 July          1 2017-07-01     7
##  8     7740.  2017 August        1 2017-08-01     8
##  9     6732.  2017 September     1 2017-09-01     9
## 10     5327   2017 October       1 2017-10-01    10
## # â¦ with 26 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# AFTER

# Function takes in dataframe to add columns for further analysis
create_ymd_function &amp;lt;- function(data) {
    data %&amp;gt;%
        mutate(
            Day = 1,
            month_year = paste(Year, Month, Day),
            month_year = month_year %&amp;gt;% ymd(),
            month = month(month_year)
        )
}

create_ymd_function(net_sales_year_month)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 36 x 6
##    net_sales  Year Month       Day month_year month
##        &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt;
##  1     8284.  2017 January       1 2017-01-01     1
##  2     6388.  2017 February      1 2017-02-01     2
##  3     4589.  2017 March         1 2017-03-01     3
##  4     8533.  2017 April         1 2017-04-01     4
##  5     6237.  2017 May           1 2017-05-01     5
##  6     9370.  2017 June          1 2017-06-01     6
##  7     5959.  2017 July          1 2017-07-01     7
##  8     7740.  2017 August        1 2017-08-01     8
##  9     6732.  2017 September     1 2017-09-01     9
## 10     5327   2017 October       1 2017-10-01    10
## # â¦ with 26 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;net_sales_year_month_2 &amp;lt;- create_ymd_function(net_sales_year_month)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;generalizing-functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Generalizing Functions&lt;/h2&gt;
&lt;p&gt;Hereâs another example of moving from specific to &lt;em&gt;general&lt;/em&gt; functions.&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;create_line_chart&lt;/code&gt; function, iâm taking in a dataframe, piping into &lt;code&gt;ggplot&lt;/code&gt; and visualizing a simple line graph with &lt;code&gt;geom_line&lt;/code&gt;. Youâll note it is specific because it requires the dataframe to have a column named &lt;code&gt;net_sales&lt;/code&gt; in order to work.&lt;/p&gt;
&lt;p&gt;But what if I wanted to repeat this operation with &lt;code&gt;total_orders&lt;/code&gt; or &lt;code&gt;total_sales&lt;/code&gt; or some other metric?&lt;/p&gt;
&lt;p&gt;Right below, I create a more &lt;em&gt;general&lt;/em&gt; function, &lt;code&gt;create_line_chart_general&lt;/code&gt; that takes in &lt;em&gt;any&lt;/em&gt; dataset and two columns as the function parameter.&lt;/p&gt;
&lt;p&gt;This makes the function much more re-usable. However, it also introduces some &lt;code&gt;R&lt;/code&gt;-specific commands like &lt;code&gt;enquo()&lt;/code&gt; and &lt;code&gt;!!&lt;/code&gt; to &lt;em&gt;quote&lt;/em&gt; and &lt;em&gt;unquote&lt;/em&gt; parameters for use in the function. We are entering &lt;code&gt;lazy evaluation&lt;/code&gt; territory, which Iâll save for another post!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# BEFORE: 

# This function only works for net_sales
# It&amp;#39;s easy to just slip &amp;#39;data&amp;#39; as an argument
# But the aesthetic mapping is done only one a specific column
create_line_chart &amp;lt;- function(data){
    data %&amp;gt;%
    ggplot(aes(x = month_year, y = net_sales)) +
    geom_line()   
}

# AFTER: 

# This is a more generalizable function using enquo() and &amp;#39;!!&amp;#39;
# note columns as function parameters

create_line_chart_general &amp;lt;- function(dataset, col_name_1, col_name_2){
    col_name_1 &amp;lt;- enquo(col_name_1)
    col_name_2 &amp;lt;- enquo(col_name_2)
    dataset %&amp;gt;%
        ggplot(aes(x = !!(col_name_1), y = !!(col_name_2))) +
        geom_line()   
}

# Call the function with data and necessary parameters
create_line_chart_general(net_sales_year_month_2, month_year, net_sales)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-07-30-custom-function_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;more-generalized-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;More Generalized Function&lt;/h2&gt;
&lt;p&gt;This next function is slightly more complicated as it involves creating several more columns. But it can still be generalized using the tools discussed above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_bpc_columns_general &amp;lt;- function(dataset, col_name){
    col_name &amp;lt;- enquo(col_name)
    bpc_data &amp;lt;- dataset %&amp;gt;%
        mutate(
            avg_orders = mean(!!(col_name)),
            # calculate lagging difference
            moving_range = diff(as.zoo(!!(col_name)), na.pad=TRUE),
            # get absolute value
            moving_range = abs(moving_range),
            # change NA to 0
            moving_range = ifelse(row_number()==1, 0, moving_range),
            avg_moving_range = mean(moving_range),
            lnpl = avg_orders - (2.66*avg_moving_range),
            lower_25 = avg_orders - (1.33*avg_moving_range),
            upper_25 = avg_orders + (1.33*avg_moving_range),
            unpl = avg_orders + (2.66*avg_moving_range)
        )
    
    return(bpc_data)
}

create_bpc_columns_general(net_sales_year_month_2, net_sales)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 36 x 13
##    net_sales  Year Month   Day month_year month avg_orders moving_range
##        &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;
##  1     8284.  2017 Januâ¦     1 2017-01-01     1      9058.           0 
##  2     6388.  2017 Febrâ¦     1 2017-02-01     2      9058.        1896.
##  3     4589.  2017 March     1 2017-03-01     3      9058.        1798.
##  4     8533.  2017 April     1 2017-04-01     4      9058.        3944.
##  5     6237.  2017 May       1 2017-05-01     5      9058.        2295.
##  6     9370.  2017 June      1 2017-06-01     6      9058.        3132.
##  7     5959.  2017 July      1 2017-07-01     7      9058.        3410.
##  8     7740.  2017 Auguâ¦     1 2017-08-01     8      9058.        1781.
##  9     6732.  2017 Septâ¦     1 2017-09-01     9      9058.        1008.
## 10     5327   2017 Octoâ¦     1 2017-10-01    10      9058.        1405.
## # â¦ with 26 more rows, and 5 more variables: avg_moving_range &amp;lt;dbl&amp;gt;,
## #   lnpl &amp;lt;dbl&amp;gt;, lower_25 &amp;lt;dbl&amp;gt;, upper_25 &amp;lt;dbl&amp;gt;, unpl &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;net_sales_bpc_data &amp;lt;- create_bpc_columns_general(net_sales_year_month_2, net_sales)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;generalized-functions-for-visualization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Generalized Functions for Visualization&lt;/h2&gt;
&lt;p&gt;This was the trickiest to convert into a general function and Iâm still on the fence as to whether this is generalizable. In one sense, it &lt;em&gt;is&lt;/em&gt; generalizable as I tested this &lt;code&gt;create_bpc_visualization_general&lt;/code&gt; function on another column aside from &lt;code&gt;net_sales&lt;/code&gt;, but it did require that I &lt;em&gt;know&lt;/em&gt; that other columns in the dataset are: &lt;code&gt;avg_orders&lt;/code&gt;, &lt;code&gt;unpl&lt;/code&gt;, &lt;code&gt;lnpl&lt;/code&gt;, &lt;code&gt;upper_25&lt;/code&gt; and &lt;code&gt;lower_25&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I have more exploring to do around quoting and unquoting &lt;code&gt;enquo()&lt;/code&gt;, &lt;code&gt;quos()&lt;/code&gt; for various &lt;code&gt;ggplot&lt;/code&gt; geometries like &lt;code&gt;geom_hline&lt;/code&gt;. Will report back with another post once I get those details down.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_bpc_visualization_general &amp;lt;- function(dataset, col_x, col_y, col_avg, col_unpl, col_lnpl, col_upper_25, col_lower_25){
    col_x &amp;lt;- enquo(col_x) # month_year
    col_y &amp;lt;- enquo(col_y) # net_sales
    
    col_avg &amp;lt;- dataset$avg_orders
    col_unpl &amp;lt;- dataset$unpl
    col_lnpl &amp;lt;- dataset$lnpl
    col_upper_25 &amp;lt;- dataset$upper_25
    col_lower_25 &amp;lt;- dataset$lower_25
    
    dataset %&amp;gt;%
        ggplot(aes(x = !!(col_x), y = !!(col_y))) +
        geom_line() +
        geom_hline(yintercept = col_avg, color = &amp;#39;green&amp;#39;) +
        geom_hline(yintercept = col_unpl, color = &amp;#39;red&amp;#39;, linetype = &amp;#39;dashed&amp;#39;) +
        geom_hline(yintercept = col_lnpl, color = &amp;#39;red&amp;#39;, linetype = &amp;#39;dashed&amp;#39;) +
        geom_hline(yintercept = col_upper_25, color = &amp;#39;orange&amp;#39;) +
        geom_hline(yintercept = col_lower_25, color = &amp;#39;orange&amp;#39;) +
        
        # break x-axis into quarters
        scale_x_date(breaks = &amp;#39;3 month&amp;#39;) +
        # note: place before theme()
        theme_minimal() +
        theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
        labs(
            title = glue(&amp;#39;{names(dataset[,1])}: Business Process Chart&amp;#39;),
            subtitle = &amp;quot;2017 - 2019&amp;quot;,
            x = &amp;quot;&amp;quot;,
            y = glue(&amp;#39;{names(dataset[,1])}&amp;#39;),
            caption = &amp;quot;----&amp;quot;
        ) +
        annotate(&amp;quot;text&amp;quot;, x = as.Date(&amp;quot;2017-02-01&amp;quot;), y = col_unpl, color = &amp;#39;red&amp;#39;, label = &amp;quot;UNLP&amp;quot;) +
        annotate(&amp;quot;text&amp;quot;, x = as.Date(&amp;quot;2017-02-01&amp;quot;), y = col_lnpl, color = &amp;#39;red&amp;#39;, label = &amp;quot;LNLP&amp;quot;) +
        annotate(&amp;quot;text&amp;quot;, x = as.Date(&amp;quot;2017-02-01&amp;quot;), y = col_upper_25, color = &amp;#39;orange&amp;#39;, label = &amp;quot;Upper 25%&amp;quot;) +
        annotate(&amp;quot;text&amp;quot;, x = as.Date(&amp;quot;2017-02-01&amp;quot;), y = col_avg, color = &amp;#39;green&amp;#39;, label = &amp;quot;Avg = 97&amp;quot;)
    
}

create_bpc_visualization_general(net_sales_bpc_data, month_year, net_sales, avg_orders, unpl, lnpl, upper_25, lower_25)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-07-30-custom-function_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Itâs possible to do a fair amount of data analysis without using functions, but &lt;strong&gt;functions&lt;/strong&gt; help you avoid endless copying and pasting and make your code less error prone.&lt;/p&gt;
&lt;p&gt;There are many different types functions you could use. In this post, I share functions that take columns of data as arguments. These types of functions are well-suited for streamlining your data pre-processing and visualization tasks.&lt;/p&gt;
&lt;p&gt;Shout out to &lt;a href=&#34;https://twitter.com/brodriguesco&#34;&gt;Bruno Rodrigues&lt;/a&gt; for writing &lt;a href=&#34;https://b-rodrigues.github.io/modern_R/&#34;&gt;&lt;strong&gt;Modern R with the Tidyverse&lt;/strong&gt;&lt;/a&gt; which has helped me get my head around writing custom functions.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Wrangling Foundations</title>
      <link>/post/ds4b-data-wrangling/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/post/ds4b-data-wrangling/</guid>
      <description>


&lt;div id=&#34;data-wrangling&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Wrangling&lt;/h2&gt;
&lt;p&gt;Iâve had experiencing using several of the functions in this portion of &lt;a href=&#34;https://university.business-science.io/p/ds4b-101-r-business-analysis-r/&#34;&gt;#DS4B 101&lt;/a&gt;, like &lt;code&gt;select()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;distinct()&lt;/code&gt;, &lt;code&gt;group_by()&lt;/code&gt;, &lt;code&gt;summarize()&lt;/code&gt; and so on, but this course is making me realize iâve only skimmed the surface of &lt;code&gt;dplyr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Recommended for anyone learning R who wants to level-up.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;select-arrange&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Select &amp;amp; Arrange&lt;/h2&gt;
&lt;p&gt;Iâve used the &lt;code&gt;select&lt;/code&gt; function before, but I havenât &lt;strong&gt;used&lt;/strong&gt; it, really.&lt;/p&gt;
&lt;p&gt;I had previously selected by column name, never by numeric vector; and I had never used select_helpers (&lt;code&gt;starts_with&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;matches&lt;/code&gt;, &lt;code&gt;num_range&lt;/code&gt;). I had never re-arranged columns using &lt;code&gt;select()&lt;/code&gt;. &lt;code&gt;Select_if()&lt;/code&gt; also comes in handy as well. Knowing data types allow for efficient selection (integer vs double).&lt;/p&gt;
&lt;p&gt;Iâve used arrange() and desc(), so I donât go into too much detail here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ââ Attaching packages ââââââââââââââââââââââââââââââââââââââââââââââââ tidyverse 1.3.0 ââ&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## â ggplot2 3.3.1     â purrr   0.3.3
## â tibble  3.0.1     â dplyr   0.8.5
## â tidyr   1.0.0     â stringr 1.4.0
## â readr   1.3.1     â forcats 0.4.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ââ Conflicts âââââââââââââââââââââââââââââââââââââââââââââââââââ tidyverse_conflicts() ââ
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# select first three columns using numeric vector
USArrests %&amp;gt;%
    select(1:3)

# re-arrange columns using select; place UrbanPop first
USArrests %&amp;gt;%
    select(UrbanPop, everything())

# select if integer 
USArrests %&amp;gt;%
    select_if(is.integer)

USArrests %&amp;gt;%
    select_if(~ !is.double(.))

# select if double
USArrests %&amp;gt;%
    select_if(is.double)

USArrests %&amp;gt;%
    select_if(~ !is.integer(.))

# swithing to IRIS dataframe
# select helpers: starts_with, contains
iris %&amp;gt;%
    select(starts_with(&amp;quot;petal&amp;quot;))

iris %&amp;gt;%
    select(contains(&amp;quot;length&amp;quot;)) %&amp;gt;% 
    head()

# using pull() instead of select() to pull out contents of a column
iris %&amp;gt;%
    pull(Sepal.Width) %&amp;gt;%
    head()

iris %&amp;gt;% 
    select_if(is.factor) %&amp;gt;%
    head()

# arrange Species in descending order by Petal.Length
iris %&amp;gt;%
    select(Petal.Length, Species) %&amp;gt;%
    arrange(desc(Petal.Length))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;slice-highlighting-a-distinction-between-base-and-tidyverse&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slice: Highlighting a Distinction between Base and Tidyverse&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;slice()&lt;/code&gt; to grab portions of rows is another function I had not used prior. I might have used base R to grab specific rows. But looking back all my Base R operations were &lt;strong&gt;one-offs&lt;/strong&gt;. Below is an example, I may use Base-R to grab the first five rows of a dataframe. If I wanted to sort by a particular column, then grab the first give rows, it turns into two operations. First sorting by column, decreasing and assigning to âxâ, then grabing first five rows of âxâ.&lt;/p&gt;
&lt;p&gt;With dplyr, particularly patterns taught in the class, you can more seamlessly arrange, in descending order by a particular column (Solar.R), then slice the first five rows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# tidyverse to grab first five rows with slice(), but this allows pre-arranging it first. 
airquality %&amp;gt;%
    arrange(desc(Solar.R)) %&amp;gt;%
    slice(1:5)

# base R to grab first five rows
airquality[1:5,]


# base R to first sort by Solar.R, then assign to variable &amp;#39;x&amp;#39;, then grab first five values
x &amp;lt;- sort(airquality$Solar.R, decreasing = TRUE)
x[1:5]

# fastest way to grab Solar.R
sort(airquality$Solar.R, decreasing = TRUE)[1:5]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;spread-and-gather&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Spread and Gather&lt;/h2&gt;
&lt;p&gt;Here demonstrating &lt;code&gt;gather()&lt;/code&gt; and &lt;code&gt;spread()&lt;/code&gt; using the built-in &lt;code&gt;iris&lt;/code&gt; dataset. The&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# gather (before spread)
iris %&amp;gt;% 
    # create unique ID for each row
    mutate(ID=row_number(Species)) %&amp;gt;%
    # put ID in first column
    select(ID, everything()) %&amp;gt;%
    # use values from columns 2-5 as value
    gather(key = Measure_Type, value = Values,2:5) %&amp;gt;%
    # can spread by either Measure_Type or Species
    spread(key = Species, value = Values)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-and-mutate-with-nested-pipes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Filter and Mutate with nested pipes&lt;/h2&gt;
&lt;p&gt;Using both &lt;code&gt;airquality&lt;/code&gt; and &lt;code&gt;USArrests&lt;/code&gt; to demonstrate various data wrangling operations involving filter and mutate with nested pipes. I canât believe Iâve only filtered one column at a time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# filter airquality for beginning and end of the month
airquality %&amp;gt;%
    filter(Day &amp;lt; 5 | Day &amp;gt; 25)

airquality %&amp;gt;%
    filter(Temp &amp;lt; 71 &amp;amp; Temp &amp;gt; 64)

# Filter states that start with a certain alphabet
USArrests

# convert row name to column
USArrest_rownames &amp;lt;- tibble::rownames_to_column(USArrests, &amp;quot;States&amp;quot;)


# Descriptive statistics of Violence_Type by all States that start with &amp;quot;New&amp;quot;
USArrest_rownames %&amp;gt;%
    select(States, UrbanPop, everything()) %&amp;gt;%
    filter(States %&amp;gt;% 
               str_detect(&amp;quot;New&amp;quot;)) %&amp;gt;%
    # good to define which columns will be gather() in new column
    gather(`Murder`, `Assault`, `Rape`, key = &amp;quot;Violence_Type&amp;quot;, value = &amp;quot;cases&amp;quot; ) %&amp;gt;%
    group_by(Violence_Type) %&amp;gt;%
    summarize(
        avg = mean(cases),
        min = min(cases),
        max = max(cases)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    mutate(avg = round(avg,1))


# Filter by states starting with &amp;quot;A&amp;quot; and murder higher than 10
USArrest_rownames %&amp;gt;%
    filter(Murder &amp;gt; 10, 
           States %&amp;gt;% str_detect(&amp;quot;A&amp;quot;))

# filter for all states beginning with &amp;quot;New&amp;quot;
USArrest_rownames %&amp;gt;%
    filter(States %&amp;gt;% str_detect(&amp;quot;New&amp;quot;)) %&amp;gt;%
    arrange(desc(Assault))

USArrest_rownames %&amp;gt;%
    filter(Murder &amp;gt; 5, 
           States %&amp;gt;% str_detect(&amp;quot;M&amp;quot;)) %&amp;gt;%
    arrange(desc(Murder))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;handling-missing-values-replace-na&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Handling Missing Values: Replace NA&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;summarize_all()&lt;/code&gt; and &lt;code&gt;replace_na()&lt;/code&gt; are a joy to use for handling missing values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Quickly get number of &amp;quot;missing values&amp;quot; for all columns
airquality %&amp;gt;%
    summarize_all(~sum(is.na(.)))

# Get proportion of missing values for each column
airquality %&amp;gt;%
    summarize_all(~ sum(is.na(.)) / length(.))

# Quickly replace missing values in columns Ozone and Solar.R with &amp;#39;0&amp;#39;
airquality %&amp;gt;%
    replace_na(list(Ozone = 0, Solar.R = 0))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;chaining-multiple-pipes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Chaining Multiple Pipes&lt;/h2&gt;
&lt;p&gt;The coding patterns covered in this course is my biggest take-away thus far.&lt;/p&gt;
&lt;p&gt;Previously, I had not used &lt;em&gt;longer&lt;/em&gt; patterns of piping to explore data. Much of my code involved maybe 2-3 pipes, saving a new dataframe, then continuing to explore. Here iâm piping seven operations without creating a new dataframe and it allows for more efficient exploration, without having to save extra data frames.&lt;/p&gt;
&lt;p&gt;Making me re-think my approach to data wrangling.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Chaining multiple pipes to more efficiently explore data
iris %&amp;gt;%
    group_by(Species) %&amp;gt;%
    summarize(
        count = n(),
        mean = mean(Petal.Length),
        median = median(Petal.Length),
        sd = sd(Petal.Length),
        min = min(Petal.Length),
        max = max(Petal.Length)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    mutate(Range = max - min) %&amp;gt;%
    rename(
        `Standard Deviation` = sd,
        `Average` = mean,
        `Mininum` = min, 
        `Maximum` = max
    ) %&amp;gt;%
    arrange(desc(Average))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Converting Universal Transverse Mercator (UTM) to lattitude/longitude data</title>
      <link>/post/r-markdown-utm/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/post/r-markdown-utm/</guid>
      <description>


&lt;div id=&#34;packages-and-libraries&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Packages and Libraries&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(maps)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ââ Attaching packages ââââââââââââââââââââââââââââââââââââââââââââââââââââââ tidyverse 1.3.0 ââ&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## â ggplot2 3.3.1     â purrr   0.3.3
## â tibble  3.0.1     â dplyr   0.8.5
## â tidyr   1.0.0     â stringr 1.4.0
## â readr   1.3.1     â forcats 0.4.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ââ Conflicts âââââââââââââââââââââââââââââââââââââââââââââââââââââââââ tidyverse_conflicts() ââ
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()
## x purrr::map()    masks maps::map()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sp)
library(rmarkdown)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;world-and-thai-maps&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;World and Thai Maps&lt;/h2&gt;
&lt;p&gt;First, weâll use &lt;code&gt;map_data&lt;/code&gt; function from &lt;code&gt;ggplot2&lt;/code&gt; to turn any map from the &lt;code&gt;maps&lt;/code&gt; package into a data frame. This provides longitude and lattitude data. Then, weâll filter for Thailand to get Thai longtitude and lattitude data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;world.map &amp;lt;- map_data(&amp;quot;world&amp;quot;)
head(world.map)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        long      lat group order region subregion
## 1 -69.89912 12.45200     1     1  Aruba      &amp;lt;NA&amp;gt;
## 2 -69.89571 12.42300     1     2  Aruba      &amp;lt;NA&amp;gt;
## 3 -69.94219 12.43853     1     3  Aruba      &amp;lt;NA&amp;gt;
## 4 -70.00415 12.50049     1     4  Aruba      &amp;lt;NA&amp;gt;
## 5 -70.06612 12.54697     1     5  Aruba      &amp;lt;NA&amp;gt;
## 6 -70.05088 12.59707     1     6  Aruba      &amp;lt;NA&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;THAI.map &amp;lt;- world.map %&amp;gt;% filter(region == &amp;quot;Thailand&amp;quot;)
head(THAI.map)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       long      lat group order   region   subregion
## 1 99.66309 6.521924  1404 87912 Thailand Ko Tarutao 
## 2 99.64404 6.516113  1404 87913 Thailand Ko Tarutao 
## 3 99.60664 6.596827  1404 87914 Thailand Ko Tarutao 
## 4 99.65401 6.714111  1404 87915 Thailand Ko Tarutao 
## 5 99.70136 6.570557  1404 87916 Thailand Ko Tarutao 
## 6 99.66309 6.521924  1404 87917 Thailand Ko Tarutao&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;longitude-and-lattitude-value-ranges&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Longitude and Lattitude Value Ranges&lt;/h2&gt;
&lt;p&gt;Before converting UTM to longitude/lattitude data, we should know the range of both Longitudes and Lattitudes for Thailand.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(THAI.map$long)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   97.37   99.08  100.26  100.71  102.27  105.64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(THAI.map$lat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   5.637   9.084  13.213  13.249  17.820  20.424&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;jobpost-data-frame&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Jobpost Data Frame&lt;/h2&gt;
&lt;p&gt;Our objective is to visualize utm_x and utm_y in the &lt;code&gt;jobpost&lt;/code&gt; data frame by turning them into lattitude and longitude data first. The &lt;code&gt;jobpost&lt;/code&gt; data frame is retrieved from PostgreSQL.&lt;/p&gt;
&lt;p&gt;Preparation includes writing it to CSV before loading into Rmarkdown.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;jobpost &amp;lt;- read.csv(&amp;quot;jobpost.csv&amp;quot;)
glimpse(jobpost)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 50
## Columns: 25
## $ X                 &amp;lt;int&amp;gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, â¦
## $ jobpost_id        &amp;lt;int&amp;gt; 54, 66, 33, 34, 35, 36, 28, 32, 30, 55, 67, 68, 37,â¦
## $ job_name          &amp;lt;fct&amp;gt; &amp;quot;Facebook Marketing&amp;quot;, &amp;quot;à¹à¸­à¸à¸¡à¸´à¸&amp;quot;, &amp;quot;Accountant&amp;quot;, &amp;quot;à¹à¸à¸à¹â¦
## $ job_qty           &amp;lt;int&amp;gt; 3, 1, 1, 2, 2, 5, 3, 1, 5, 1, 22, 10, 1, 1, 2, 2, 1â¦
## $ age_min           &amp;lt;int&amp;gt; 22, 25, 29, 20, 20, 19, 28, 28, 20, 25, 30, 21, 18,â¦
## $ age_max           &amp;lt;int&amp;gt; 26, 32, 35, 35, 35, 40, 120, 40, 40, 45, 45, 30, 50â¦
## $ study_field       &amp;lt;fct&amp;gt; &amp;quot;-&amp;quot;, &amp;quot;à¹à¸à¸à¸±à¹à¸&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;à¸à¸±à¸à¸à¸²à¸£à¸à¸±à¸à¸â¦
## $ job_qualification &amp;lt;fct&amp;gt; &amp;quot;à¸­à¹à¸²à¸ à¹à¸à¸µà¸¢à¸ à¸ à¸²à¸©à¸²à¸­à¸±à¸à¸à¸¤à¸© à¹à¸à¹à¸à¸µ&amp;quot;, &amp;quot;à¸à¸­à¸à¸à¸³à¸à¸²à¸¡ à¸ à¸²à¸©à¸²à¸­à¸±à¸à¸à¸¤à¸©â¦
## $ min_salary        &amp;lt;int&amp;gt; 30000, 12000, 20000, 13000, 10000, 15000, 15000, 12â¦
## $ job_description   &amp;lt;fct&amp;gt; &amp;quot;à¸à¸³à¸à¸²à¸£à¸à¸¥à¸²à¸à¸à¸²à¸à¸à¹à¸­à¸à¸à¸²à¸ facebook&amp;quot;, &amp;quot;à¹à¸­à¸à¸¡à¸´à¸à¸à¸¹à¹à¸¥ à¹à¸à¸ à¹à¸ªà¸·â¦
## $ manychat_id       &amp;lt;dbl&amp;gt; 3.961592e+15, 2.984969e+15, 2.941175e+15, 3.416291eâ¦
## $ job_sex           &amp;lt;int&amp;gt; 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1, 3, â¦
## $ study_level       &amp;lt;int&amp;gt; 5, 5, 5, 0, 2, 2, 3, 4, 4, 5, 5, 4, 0, 2, 2, 5, 5, â¦
## $ work_exp          &amp;lt;int&amp;gt; 1, 0, 3, 1, 0, 0, 0, 3, 0, 3, 3, 0, 0, 1, 1, 3, 6, â¦
## $ created           &amp;lt;fct&amp;gt; 2020-06-07 09:00:36, 2020-06-14 23:12:35, 2020-05-2â¦
## $ updated           &amp;lt;fct&amp;gt; 2020-06-08 09:05:23, 2020-06-14 23:12:35, 2020-05-2â¦
## $ confirmed         &amp;lt;fct&amp;gt; 2020-06-07 09:00:36, 2020-06-14 23:12:35, 2020-05-2â¦
## $ batch             &amp;lt;lgl&amp;gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAâ¦
## $ location          &amp;lt;fct&amp;gt; à¸à¸²à¸à¸à¸², à¸£à¸²à¸¡à¸­à¸´à¸à¸à¸£à¸² 65, à¸à¸£à¸°à¸£à¸²à¸¡à¹à¸à¹à¸² à¸à¸­à¸¢ 60, à¸«à¹à¸²à¸ à¸£à¸´à¹à¸§à¸­à¸£â¦
## $ utm_x             &amp;lt;dbl&amp;gt; 674486.5, 678167.2, 676504.5, 661251.7, 714943.7, 6â¦
## $ utm_y             &amp;lt;dbl&amp;gt; 1511131, 1532008, 1519745, 1515611, 1477934, 152128â¦
## $ utm_zone_number   &amp;lt;int&amp;gt; 47, 47, 47, 47, 47, 47, 48, 47, 47, 47, 35, 48, 47,â¦
## $ utm_zone_letter   &amp;lt;fct&amp;gt; P, P, P, P, P, P, Q, P, P, P, L, P, P, P, P, P, P, â¦
## $ job_type          &amp;lt;int&amp;gt; NA, NA, 0, 0, 0, 0, 0, 0, 0, NA, NA, NA, 0, 0, 0, 0â¦
## $ online            &amp;lt;lgl&amp;gt; NA, NA, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, Fâ¦&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;subset-data-frame-called-utm&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Subset Data Frame called UTM&lt;/h2&gt;
&lt;p&gt;Weâll select only &lt;code&gt;utm_x&lt;/code&gt; and &lt;code&gt;utm_y&lt;/code&gt; columns from &lt;code&gt;jobpost&lt;/code&gt; because weâre interested in these two columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;utm &amp;lt;- data.frame(jobpost$utm_x, jobpost$utm_y)
str(utm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    50 obs. of  2 variables:
##  $ jobpost.utm_x: num  674486 678167 676504 661252 714944 ...
##  $ jobpost.utm_y: num  1511131 1532008 1519745 1515611 1477934 ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;handle-missing-values-and-outliers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Handle Missing Values and Outliers&lt;/h2&gt;
&lt;p&gt;Row 50 in &lt;code&gt;jobpost&lt;/code&gt; and also &lt;code&gt;utm&lt;/code&gt; is missing so weâll delete that. Then weâll also delete row 11 because itâs location is Zambia, Africa and its longitude and lattitude numbers are very different from Thailand - which will &lt;em&gt;distort&lt;/em&gt; the map.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;utm &amp;lt;- utm[-50, ]
utm &amp;lt;- utm[-11, ]
jobpost &amp;lt;- jobpost[-50, ]
jobpost &amp;lt;- jobpost[-11, ]
str(utm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    48 obs. of  2 variables:
##  $ jobpost.utm_x: num  674486 678167 676504 661252 714944 ...
##  $ jobpost.utm_y: num  1511131 1532008 1519745 1515611 1477934 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(jobpost)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    48 obs. of  25 variables:
##  $ X                : int  1 2 3 4 5 6 7 8 9 10 ...
##  $ jobpost_id       : int  54 66 33 34 35 36 28 32 30 55 ...
##  $ job_name         : Factor w/ 48 levels &amp;quot;.Net Developer&amp;quot;,..: 6 48 2 21 19 39 11 35 4 42 ...
##  $ job_qty          : int  3 1 1 2 2 5 3 1 5 1 ...
##  $ age_min          : int  22 25 29 20 20 19 28 28 20 25 ...
##  $ age_max          : int  26 32 35 35 35 40 120 40 40 45 ...
##  $ study_field      : Factor w/ 19 levels &amp;quot;-&amp;quot;,&amp;quot;Food science&amp;quot;,..: 1 12 1 1 1 1 1 6 1 5 ...
##  $ job_qualification: Factor w/ 41 levels &amp;quot;-&amp;quot;,&amp;quot;- à¸¡à¸µà¹à¸à¸à¸±à¸à¸à¸µà¹à¸£à¸à¸¢à¸à¸à¹\n- à¸à¹à¸²à¸à¸à¸²à¸£à¹à¸à¸à¸à¹à¸à¸«à¸²à¸£&amp;quot;,..: 41 16 9 38 37 32 33 30 15 23 ...
##  $ min_salary       : int  30000 12000 20000 13000 10000 15000 15000 12000 11500 25000 ...
##  $ job_description  : Factor w/ 50 levels &amp;quot;- Develops, modifies application software according to specifications and requirements.\n- Develops application&amp;quot;| __truncated__,..: 30 50 27 4 16 14 15 23 7 47 ...
##  $ manychat_id      : num  3.96e+15 2.98e+15 2.94e+15 3.42e+15 3.00e+15 ...
##  $ job_sex          : int  3 3 2 2 3 3 3 3 3 3 ...
##  $ study_level      : int  5 5 5 0 2 2 3 4 4 5 ...
##  $ work_exp         : int  1 0 3 1 0 0 0 3 0 3 ...
##  $ created          : Factor w/ 26 levels &amp;quot;2020-05-29 14:21:22&amp;quot;,..: 12 24 1 1 1 1 1 1 1 13 ...
##  $ updated          : Factor w/ 33 levels &amp;quot;2020-05-29 14:21:22&amp;quot;,..: 19 30 1 7 1 8 1 1 6 22 ...
##  $ confirmed        : Factor w/ 26 levels &amp;quot;2020-05-29 14:21:22&amp;quot;,..: 12 24 1 1 1 1 1 1 1 13 ...
##  $ batch            : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...
##  $ location         : Factor w/ 50 levels &amp;quot;112/3 à¸«à¸¡à¸¹à¹ 7 à¸.à¸à¸²à¸à¹à¸à¸¥à¸ à¸­.à¸à¸²à¸à¸à¸¥à¸µ à¸.à¸ªà¸¡à¸¸à¸à¸£à¸à¸£à¸²à¸à¸²à¸£ 10540&amp;quot;,..: 25 35 29 47 30 9 38 11 49 39 ...
##  $ utm_x            : num  674486 678167 676504 661252 714944 ...
##  $ utm_y            : num  1511131 1532008 1519745 1515611 1477934 ...
##  $ utm_zone_number  : int  47 47 47 47 47 47 48 47 47 47 ...
##  $ utm_zone_letter  : Factor w/ 4 levels &amp;quot;L&amp;quot;,&amp;quot;N&amp;quot;,&amp;quot;P&amp;quot;,&amp;quot;Q&amp;quot;: 3 3 3 3 3 3 4 3 3 3 ...
##  $ job_type         : int  NA NA 0 0 0 0 0 0 0 NA ...
##  $ online           : logi  NA NA FALSE FALSE FALSE FALSE ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;conversion-of-utm-into-latlong&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conversion of UTM into Lat/Long&lt;/h2&gt;
&lt;p&gt;After some research, we find out that Thailandâs UTM zone is 47N. The stack overflow source I used to find the conversion code is &lt;a href=&#34;https://stackoverflow.com/questions/30018098/how-to-convert-utm-coordinates-to-lat-and-long-in-r/30018607&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Weâll create two SpatialPoints object classes. Then transform them into a data frame containing lat and long data.&lt;/p&gt;
&lt;p&gt;Remember to load &lt;code&gt;sp&lt;/code&gt; library for this operation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sputm &amp;lt;- SpatialPoints(utm, proj4string = CRS(&amp;quot;+proj=utm +zone=47N +datum=WGS84&amp;quot;))
spgeo &amp;lt;- spTransform(sputm, CRS(&amp;quot;+proj=longlat +datum=WGS84&amp;quot;))

thai.map2 &amp;lt;- data.frame(Location = jobpost$location, lat = spgeo$jobpost.utm_y, 
    long = spgeo$jobpost.utm_x)

head(thai.map2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                      Location      lat     long
## 1                                       à¸à¸²à¸à¸à¸² 13.66385 100.6132
## 2                                 à¸£à¸²à¸¡à¸­à¸´à¸à¸à¸£à¸² 65 13.85233 100.6486
## 3                            à¸à¸£à¸°à¸£à¸²à¸¡à¹à¸à¹à¸² à¸à¸­à¸¢ 60 13.74159 100.6324
## 4 à¸«à¹à¸²à¸ à¸£à¸´à¹à¸§à¸­à¸£à¹à¹à¸à¸à¹ à¸à¸¥à¸²à¸à¹à¸² à¹à¸à¸£à¸´à¸à¸à¸à¸£ à¸à¸±à¹à¸ 1 à¹à¸à¹ à¸à¸±à¸à¹à¸à¹à¸¥à¸·à¹à¸­à¸ 13.70512 100.4912
## 5                                    à¹à¸¡à¸·à¸­à¸à¸à¸¥à¸à¸¸à¸£à¸µ 13.36114 100.9847
## 6                                      à¸à¸£à¸¸à¸à¹à¸à¸ 13.75633 100.5018&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;visualize-with-ggplot2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualize with GGPLOT2&lt;/h2&gt;
&lt;p&gt;Here weâll visualize the &lt;code&gt;THAI.map&lt;/code&gt; we created previously and overlay the new Lat/Long data points (from UTM).&lt;/p&gt;
&lt;p&gt;We can see a concentration of &lt;code&gt;utm&lt;/code&gt; data points from &lt;code&gt;jobpost&lt;/code&gt; were made in Bangkok and the greater Bangkok areas with some jobs also posted outside Bangkok.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;THAI.map %&amp;gt;% ggplot() + geom_map(map = THAI.map, aes(x = long, 
    y = lat, map_id = region), fill = &amp;quot;white&amp;quot;, color = &amp;quot;black&amp;quot;) + 
    geom_point(data = thai.map2, aes(x = long, y = lat, color = &amp;quot;red&amp;quot;, 
        alpha = 0.9))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Ignoring unknown aesthetics: x, y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-06-25-r-markdown-utm_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Writing technical content in Academic</title>
      <link>/post/writing-technical-content/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      <guid>/post/writing-technical-content/</guid>
      <description>&lt;p&gt;Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Highlight your code snippets, take notes on math classes, and draw diagrams from textual representation.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On this page, you&amp;rsquo;ll find some examples of the types of technical content that can be rendered with Academic.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the &lt;code&gt;highlight&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```python
import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;math&#34;&gt;Math&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for $\LaTeX$ math. You can enable this feature by toggling the &lt;code&gt;math&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;To render &lt;em&gt;inline&lt;/em&gt; or &lt;em&gt;block&lt;/em&gt; math, wrap your LaTeX math with &lt;code&gt;$...$&lt;/code&gt; or &lt;code&gt;$$...$$&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;math block&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$\gamma_{n} = \frac{ 
\left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T 
\left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}
{\left \|\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right \|^2}$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;$$\gamma_{n} = \frac{ \left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T \left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}{\left |\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right |^2}$$&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;inline math&lt;/strong&gt; &lt;code&gt;$\nabla F(\mathbf{x}_{n})$&lt;/code&gt; renders as $\nabla F(\mathbf{x}_{n})$.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;multi-line math&lt;/strong&gt; using the &lt;code&gt;\\\\&lt;/code&gt; math linebreak:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$f(k;p_0^*) = \begin{cases} p_0^* &amp;amp; \text{if }k=1, \\\\
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;$$f(k;p_0^*) = \begin{cases} p_0^* &amp;amp; \text{if }k=1, \\&lt;br&gt;
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$&lt;/p&gt;
&lt;h3 id=&#34;diagrams&#34;&gt;Diagrams&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the &lt;code&gt;diagram&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file or by adding &lt;code&gt;diagram: true&lt;/code&gt; to your page front matter.&lt;/p&gt;
&lt;p&gt;An example &lt;strong&gt;flowchart&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;sequence diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;Gantt diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;class diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;state diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;todo-lists&#34;&gt;Todo lists&lt;/h3&gt;
&lt;p&gt;You can even write your todo lists in Academic too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;- [x] Write math example
- [x] Write diagram example
- [ ] Do something else
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write math example&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write diagram example&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Do something else&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tables&#34;&gt;Tables&lt;/h3&gt;
&lt;p&gt;Represent your data in tables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;asides&#34;&gt;Asides&lt;/h3&gt;
&lt;p&gt;Academic supports a 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#alerts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcode for asides&lt;/a&gt;, also referred to as &lt;em&gt;notices&lt;/em&gt;, &lt;em&gt;hints&lt;/em&gt;, or &lt;em&gt;alerts&lt;/em&gt;. By wrapping a paragraph in &lt;code&gt;{{% alert note %}} ... {{% /alert %}}&lt;/code&gt;, it will render as an aside.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% alert note %}}
A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
{{% /alert %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;icons&#34;&gt;Icons&lt;/h3&gt;
&lt;p&gt;Academic enables you to use a wide range of 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/#icons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;icons from &lt;em&gt;Font Awesome&lt;/em&gt; and &lt;em&gt;Academicons&lt;/em&gt;&lt;/a&gt; in addition to 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#emojis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;emojis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some examples using the &lt;code&gt;icon&lt;/code&gt; shortcode to render icons:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; icon name=&amp;quot;terminal&amp;quot; pack=&amp;quot;fas&amp;quot; &amp;gt;}} Terminal  
{{&amp;lt; icon name=&amp;quot;python&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} Python  
{{&amp;lt; icon name=&amp;quot;r-project&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} R
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-terminal  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Terminal&lt;br&gt;

  &lt;i class=&#34;fab fa-python  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Python&lt;br&gt;

  &lt;i class=&#34;fab fa-r-project  pr-1 fa-fw&#34;&gt;&lt;/i&gt; R&lt;/p&gt;
&lt;h3 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it ð&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Display Jupyter Notebooks with Academic</title>
      <link>/post/jupyter/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>/post/jupyter/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from IPython.core.display import Image
Image(&#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_1_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Welcome to Academic!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Welcome to Academic!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-python-and-jupyterlab&#34;&gt;Install Python and JupyterLab&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.anaconda.com/distribution/#download-section&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Install Anaconda&lt;/a&gt; which includes Python 3 and JupyterLab.&lt;/p&gt;
&lt;p&gt;Alternatively, install JupyterLab with &lt;code&gt;pip3 install jupyterlab&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;create-or-upload-a-jupyter-notebook&#34;&gt;Create or upload a Jupyter notebook&lt;/h2&gt;
&lt;p&gt;Run the following commands in your Terminal, substituting &lt;code&gt;&amp;lt;MY-WEBSITE-FOLDER&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;SHORT-POST-TITLE&amp;gt;&lt;/code&gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
cd &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
jupyter lab index.ipynb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;jupyter&lt;/code&gt; command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.&lt;/p&gt;
&lt;h2 id=&#34;edit-your-post-metadata&#34;&gt;Edit your post metadata&lt;/h2&gt;
&lt;p&gt;The first cell of your Jupter notebook will contain your post metadata (
&lt;a href=&#34;https://sourcethemes.com/academic/docs/front-matter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;front matter&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In Jupter, choose &lt;em&gt;Markdown&lt;/em&gt; as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: My post&#39;s title
date: 2019-09-01

# Put any other Academic metadata here...
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit the metadata of your post, using the 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt; as a guide to the available options.&lt;/p&gt;
&lt;p&gt;To set a 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#featured-image&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;featured image&lt;/a&gt;, place an image named &lt;code&gt;featured&lt;/code&gt; into your post&amp;rsquo;s folder.&lt;/p&gt;
&lt;p&gt;For other tips, such as using math, see the guide on 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;writing content with Academic&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;convert-notebook-to-markdown&#34;&gt;Convert notebook to Markdown&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;This post was created with Jupyter. The orginal files can be found at &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&#34;&gt;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Academic: the website builder for Hugo</title>
      <link>/post/getting-started/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      <guid>/post/getting-started/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Create a free website with Academic using Markdown, Jupyter, or RStudio. Choose a beautiful color theme and build anything with the Page Builder - over 40 &lt;em&gt;widgets&lt;/em&gt;, &lt;em&gt;themes&lt;/em&gt;, and &lt;em&gt;language packs&lt;/em&gt; included!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Check out the latest &lt;strong&gt;demo&lt;/strong&gt;&lt;/a&gt; of what you&amp;rsquo;ll get in less than 10 minutes, or 
&lt;a href=&#34;https://sourcethemes.com/academic/#expo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;view the &lt;strong&gt;showcase&lt;/strong&gt;&lt;/a&gt; of personal, project, and business sites.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ð 
&lt;a href=&#34;#install&#34;&gt;&lt;strong&gt;Get Started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;View the &lt;strong&gt;documentation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð¬ 
&lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Ask a question&lt;/strong&gt; on the forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð¥ 
&lt;a href=&#34;https://spectrum.chat/academic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chat with the &lt;strong&gt;community&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð¦ Twitter: 
&lt;a href=&#34;https://twitter.com/source_themes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@source_themes&lt;/a&gt; 
&lt;a href=&#34;https://twitter.com/GeorgeCushen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@GeorgeCushen&lt;/a&gt; 
&lt;a href=&#34;https://twitter.com/search?q=%23MadeWithAcademic&amp;amp;src=typd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#MadeWithAcademic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð¡ 
&lt;a href=&#34;https://github.com/gcushen/hugo-academic/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Request a &lt;strong&gt;feature&lt;/strong&gt; or report a &lt;strong&gt;bug&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;â¬ï¸ &lt;strong&gt;Updating?&lt;/strong&gt; View the 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Update Guide&lt;/a&gt; and 
&lt;a href=&#34;https://sourcethemes.com/academic/updates/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;â¤ï¸ &lt;strong&gt;Support development&lt;/strong&gt; of Academic:
&lt;ul&gt;
&lt;li&gt;âï¸ 
&lt;a href=&#34;https://paypal.me/cushen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Donate a coffee&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ðµ 
&lt;a href=&#34;https://www.patreon.com/cushen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Become a backer on &lt;strong&gt;Patreon&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð¼ï¸ 
&lt;a href=&#34;https://www.redbubble.com/people/neutreno/works/34387919-academic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Decorate your laptop or journal with an Academic &lt;strong&gt;sticker&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð 
&lt;a href=&#34;https://academic.threadless.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wear the &lt;strong&gt;T-shirt&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð©âð» 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/contribute/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Contribute&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;















&lt;figure id=&#34;figure-academic-is-mobile-first-with-a-responsive-design-to-ensure-that-your-site-looks-stunning-on-every-device&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/academic.png&#34; data-caption=&#34;Academic is mobile first with a responsive design to ensure that your site looks stunning on every device.&#34;&gt;


  &lt;img src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/academic.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Academic is mobile first with a responsive design to ensure that your site looks stunning on every device.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Key features:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Page builder&lt;/strong&gt; - Create &lt;em&gt;anything&lt;/em&gt; with 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;widgets&lt;/strong&gt;&lt;/a&gt; and 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;elements&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit any type of content&lt;/strong&gt; - Blog posts, publications, talks, slides, projects, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create content&lt;/strong&gt; in 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;, 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/jupyter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Jupyter&lt;/strong&gt;&lt;/a&gt;, or 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-rstudio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugin System&lt;/strong&gt; - Fully customizable 
&lt;a href=&#34;https://sourcethemes.com/academic/themes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;color&lt;/strong&gt; and &lt;strong&gt;font themes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Display Code and Math&lt;/strong&gt; - Code highlighting and 
&lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Mathematics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LaTeX math&lt;/a&gt; supported&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt; - 
&lt;a href=&#34;https://analytics.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Analytics&lt;/a&gt;, 
&lt;a href=&#34;https://disqus.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Disqus commenting&lt;/a&gt;, Maps, Contact Forms, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful Site&lt;/strong&gt; - Simple and refreshing one page design&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Industry-Leading SEO&lt;/strong&gt; - Help get your website found on search engines and social media&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Media Galleries&lt;/strong&gt; - Display your images and videos with captions in a customizable gallery&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mobile Friendly&lt;/strong&gt; - Look amazing on every screen with a mobile friendly version of your site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-language&lt;/strong&gt; - 15+ language packs including English, ä¸­æ, and PortuguÃªs&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-user&lt;/strong&gt; - Each author gets their own profile page&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy Pack&lt;/strong&gt; - Assists with GDPR&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stand Out&lt;/strong&gt; - Bring your site to life with animation, parallax backgrounds, and scroll effects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-Click Deployment&lt;/strong&gt; - No servers. No databases. Only files.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;p&gt;Academic comes with &lt;strong&gt;automatic day (light) and night (dark) mode&lt;/strong&gt; built-in. Alternatively, visitors can  choose their preferred mode - click the sun/moon icon in the top right of the 
&lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Demo&lt;/a&gt; to see it in action! Day/night mode can also be disabled by the site admin in &lt;code&gt;params.toml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/themes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Choose a stunning &lt;strong&gt;theme&lt;/strong&gt; and &lt;strong&gt;font&lt;/strong&gt;&lt;/a&gt; for your site. Themes are fully 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/customization/#custom-theme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;customizable&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;ecosystem&#34;&gt;Ecosystem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;
&lt;a href=&#34;https://github.com/sourcethemes/academic-admin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Academic Admin&lt;/a&gt;:&lt;/strong&gt; An admin tool to import publications from BibTeX or import assets for an offline site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;
&lt;a href=&#34;https://github.com/sourcethemes/academic-scripts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Academic Scripts&lt;/a&gt;:&lt;/strong&gt; Scripts to help migrate content to new versions of Academic&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;
&lt;p&gt;You can choose from one of the following four methods to install:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-web-browser&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;one-click install using your web browser (recommended)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-git&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;install on your computer using &lt;strong&gt;Git&lt;/strong&gt; with the Command Prompt/Terminal app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;install on your computer by downloading the &lt;strong&gt;ZIP files&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-rstudio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;install on your computer with &lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/get-started/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;personalize and deploy your new site&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;updating&#34;&gt;Updating&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;View the Update Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feel free to &lt;em&gt;star&lt;/em&gt; the project on 
&lt;a href=&#34;https://github.com/gcushen/hugo-academic/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt; to help keep track of 
&lt;a href=&#34;https://sourcethemes.com/academic/updates&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;updates&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2016-present 
&lt;a href=&#34;https://georgecushen.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;George Cushen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the 
&lt;a href=&#34;https://github.com/gcushen/hugo-academic/blob/master/LICENSE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      <guid>/post/2015-07-23-r-rmarkdown/</guid>
      <description>


&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2015-07-23-r-rmarkdown_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
