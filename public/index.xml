<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paul Apivat</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>Paul Apivat</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2022 Paul Apivat Hanvongse. All Rights Reserved.</copyright><lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Paul Apivat</title>
      <link>/</link>
    </image>
    
    <item>
      <title>Functions in Python</title>
      <link>/technical_notes/example_tech/python_functions/</link>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_functions/</guid>
      <description>&lt;h2 id=&#34;docstrings&#34;&gt;Docstrings&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;def function(arg_1, arg_2=42):
&amp;quot;&amp;quot;&amp;quot; Description of function

Args: 
   arg_1(str): description of argument one
   arg_2(int, optional): 
   
Returns:
   bool: description of return value
   
Raises:
   ValueError: include errors that function intentionally raises (if applicable)
   
Note: any notes here
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;immutable-vs-mutable&#34;&gt;Immutable vs Mutable&lt;/h2&gt;
&lt;h3 id=&#34;immutable&#34;&gt;Immutable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;bool&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;bytes&lt;/li&gt;
&lt;li&gt;tuple&lt;/li&gt;
&lt;li&gt;frozenset&lt;/li&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mutable&#34;&gt;Mutable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;li&gt;dict&lt;/li&gt;
&lt;li&gt;set&lt;/li&gt;
&lt;li&gt;bytearray&lt;/li&gt;
&lt;li&gt;objects&lt;/li&gt;
&lt;li&gt;functions&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;context-managers-function-based&#34;&gt;Context Managers (function-based)&lt;/h2&gt;
&lt;p&gt;Creating a context manager, basic structure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Define a function&lt;/li&gt;
&lt;li&gt;(optional) Add any setup code your context needs&lt;/li&gt;
&lt;li&gt;Use the &amp;lsquo;yield&amp;rsquo; keyword&lt;/li&gt;
&lt;li&gt;(optional) Add any teardown code your context needs&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;@contextlib.contextmanager&lt;/code&gt; &lt;strong&gt;decorator&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;yield-keyword&#34;&gt;Yield keyword&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;@contextlib.contextmanager
def my_context():
    # Add any set up code you need
    yield
    # Add any teardown code you need
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;open-a-file&#34;&gt;Open a file&lt;/h3&gt;
&lt;p&gt;Generic structure and example using &lt;code&gt;open()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# generic structure
with &amp;lt;context-manager&amp;gt;(&amp;lt;args&amp;gt;) as &amp;lt;variable-name&amp;gt;:
    # Run code here
    # This code is running &#39;inside the context&#39;
# This code runs after the context is removed

with open(&#39;my_file.txt&#39;) as my_file:
    text = my_file.read()
    length = len(text)
    
print(&#39;The file is {} characters long&#39;.format(length))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;read-file&#34;&gt;Read file&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;@contextlib.context.manager
def open_read_only(filename):
    &amp;quot;&amp;quot;&amp;quot;description: open a file in read-only mode
    
    args: filename(str): location of file to read
    
    yields: file object
    &amp;quot;&amp;quot;&amp;quot;
    read_only_file = open(filename, mode=&#39;r&#39;)
    # Yield read_only_file so it can be assigned to my_file
    yield read_only_file
    # close read_only_file
    read_only_file.close()
    
with open_read_only(&#39;my_file.txt&#39;) as my_file:
    print(my_file.read())
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;count-words&#34;&gt;Count words&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;with open(&amp;quot;alice.txt&amp;quot;) as file:
    text = file.read()
    
n = 0
for word in text.split():
    if word.lower() in [&#39;cat&#39;, &#39;cats&#39;]:
        n += 1

print(&#39;Lewis Carroll used the word &amp;quot;cat&amp;quot; {} times&#39;.format(n))

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set-a-timer&#34;&gt;Set a timer&lt;/h3&gt;
&lt;p&gt;Time how long a function takes to run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;image = get_image_from_instagram()

# time how long Numpy takes to run
with timer():
    print(&#39;Numpy version&#39;)
    process_with_numpy(image)

# timer with context manager
@contextlib.contextmanager
def timer():
    &amp;quot;&amp;quot;&amp;quot;description: time the execution of a context block
    
    Yields: None
    &amp;quot;&amp;quot;&amp;quot;
    start = time.time()
    # send control back to the context block
    yield
    end = time.time()
    print(&#39;Elapsed: {:.2f}s&#39;.format(end - start))
    
with timer():
    print(&#39;This should take approx 0.25 seconds&#39;)
    time.sleep(0.25)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;setup-and-teardown-db-connection-example&#34;&gt;Setup and teardown (db connection example)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;@contextlib.contextmanager
def database(url):
    # set up database connection
    db = postgres.connect(url)
    
    yield db
    
    # tear down database connection
    db.disconnect()

url = &#39;http://domain.name/data&#39;
with database(url) as my_db:
    course_list = my_db.execute(
    &#39;SELECT * FROM courses&#39;
    )
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-a-decorator&#34;&gt;Using a decorator&lt;/h3&gt;
&lt;h2 id=&#34;advanced-topics&#34;&gt;Advanced Topics&lt;/h2&gt;
&lt;h3 id=&#34;nested-contexts&#34;&gt;Nested Contexts&lt;/h3&gt;
&lt;p&gt;Use nested loop with a context manager. This is legal in python.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;def copy(src, dst):
    &amp;quot;&amp;quot;&amp;quot;copy the content of one file to another
    
    args: 
        src (str): file name of file to be copied
        dst (str): where to write the new file
    &amp;quot;&amp;quot;&amp;quot;
    # open both files
    with open(src) as f_src:
        with open(dst) as f_dst:
            # read and write each line, one at a time
            for line in f_src:
                f_dst.write(line)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;handling-errors&#34;&gt;Handling errors&lt;/h3&gt;
&lt;p&gt;Use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;try&lt;/li&gt;
&lt;li&gt;except&lt;/li&gt;
&lt;li&gt;finally&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;def get_printer(ip):
    p = connect_to_printer(ip)
    
    try:
        yield
    finally:
        p.disconnect()
        print(&#39;disconnected from printer&#39;)
        
doc = {&#39;text&#39;: &#39;This is a test.&#39;}

with get_printer(&#39;10.0.34.111&#39;) as printer:
    printer.print_page(doc[&#39;txt&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;patterns&#34;&gt;Patterns&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Open Close&lt;/li&gt;
&lt;li&gt;Lock Release&lt;/li&gt;
&lt;li&gt;Change Reset&lt;/li&gt;
&lt;li&gt;Enter Exit&lt;/li&gt;
&lt;li&gt;Start Stop&lt;/li&gt;
&lt;li&gt;Setup Teardown&lt;/li&gt;
&lt;li&gt;Connect Disconnect&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;decorators&#34;&gt;Decorators&lt;/h2&gt;
&lt;p&gt;Decorators use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;functions as objects&lt;/li&gt;
&lt;li&gt;nested functions&lt;/li&gt;
&lt;li&gt;nonlocal scope&lt;/li&gt;
&lt;li&gt;closures&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lists-and-dictionaries-of-functions&#34;&gt;Lists and dictionaries of functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;store function in a dictionary&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;dict_of_functions = {
    &#39;funct1&#39;: open,
    &#39;funct2&#39;: print
}

dict_of_functions[&#39;funct2&#39;](&#39;I am printing with the value of a dictionary&#39;)

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;pass function into another function&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;scope&#34;&gt;Scope&lt;/h2&gt;
&lt;h3 id=&#34;global&#34;&gt;global&lt;/h3&gt;
&lt;p&gt;Use &lt;strong&gt;global&lt;/strong&gt; key word to update a variable from inside the function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;call_count = 0

def my_function():
    # use a keyword that lets us update call_count
    global call_count
    call_count += 1
    
    print(&amp;quot;You&#39;ve called my_function() {} times!&amp;quot;.format(
        call_count
    ))

for _ in range(20):
    my_function()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;nonlocal&#34;&gt;nonlocal&lt;/h3&gt;
&lt;p&gt;Use &lt;strong&gt;nonlocal&lt;/strong&gt; keyword to update a variable in nested function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;def read_files():
    file_contents = None
    
    def save_contents(filename):
        # Add a keyword that lets us modify file_contents
        nonlocal file_contents
        if file_contents is None:
            file_contents = []
        with open(filename) as fin:
            file_contents.append(fin.read())
            
    for filename in [&#39;bitcoin.txt&#39;, &#39;sovindividual.txt&#39; ,&#39;smartcontracts.txt&#39;]:
        save_contents(filename)
    
    return file_contents
    
print(&#39;\n&#39;.join(read_files()))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;closures&#34;&gt;Closures&lt;/h2&gt;
&lt;p&gt;A closure is python&amp;rsquo;s way of attaching a &lt;strong&gt;nonlocal&lt;/strong&gt; variable to a return function so that the function can operate even when called outside of parent scope.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;def parent(arg_1, arg_2):
    value = 22
    my_dict = {&#39;chocolate&#39;: &#39;yummy&#39;}
    
    def child():
        print(2 * value)
        print(my_dict[&#39;chocolate&#39;])
        print(arg_1 + arg_2)
        
    return child
    
new_function = parent(3, 4)

print([cell.cell_contents for cell in new_function.__closure__])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;deletion&#34;&gt;deletion&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;overwriting&#34;&gt;overwriting&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Use concat to merge dataframes</title>
      <link>/technical_notes/example_tech/pandas_concat_df/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/pandas_concat_df/</guid>
      <description>&lt;h2 id=&#34;merge-dataframes-with-concat&#34;&gt;Merge dataframes with concat&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You want to combine multiple dataframes into one, to later push into a database. Something like &lt;code&gt;rbind&lt;/code&gt; or &lt;code&gt;cbind&lt;/code&gt; in R.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need to &lt;strong&gt;reset index&lt;/strong&gt; twice to push into a database.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;
# put dataframes into a list
frames = [df_24, df_63, df_305, df_492, df_878]

# use pandas and concat function to combine
concat_frames = pd.concat(frames)

# reset index twice
concat_frames_1 = concat_frames.reset_index()
concat_frames_2 = concat_frames_1.reset_index()

# OPTIONAL: select specific columns
specific_col_frames = concat_frames_2[[
    &#39;level_0&#39;, &#39;Name&#39;, &#39;Address&#39;, &#39;Circle_Id&#39;]]

# OPTIONAL: rename some columns
# change column name &#39;level_0&#39; -&amp;gt; &#39;index&#39;
final_frames = specific_col_frames.rename(columns={&#39;level_0&#39;: &#39;index&#39;})
  

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on Data and DAOs 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create DataFrames from Nested JSON data</title>
      <link>/technical_notes/example_tech/python_create_df_from_nested_json/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_create_df_from_nested_json/</guid>
      <description>&lt;h2 id=&#34;turning-nested-json-data-into-dataframes&#34;&gt;Turning Nested JSON data into dataframes&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You&amp;rsquo;ve connected to an 
&lt;a href=&#34;https://paulapivat.com/technical_notes/example_tech/python_api_connection/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API endpoint&lt;/a&gt;, that is structured as a nested json, here&amp;rsquo;s how to loop through and select certain values into a dataframe for further processing.&lt;/p&gt;
&lt;p&gt;In one example, we&amp;rsquo;re looping through a particular endpoint from 
&lt;a href=&#34;https://coordinape.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Coordinape&lt;/a&gt;. We&amp;rsquo;re going to loop through one level (list of dictionaries) and &lt;strong&gt;append&lt;/strong&gt; data to &lt;strong&gt;empty lists&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Second example, we&amp;rsquo;ll &lt;em&gt;conditionally&lt;/em&gt; loop through the &lt;em&gt;second level&lt;/em&gt; (a dictionary) to grab specific values. As a &lt;em&gt;bonus&lt;/em&gt;, we&amp;rsquo;ll also use &lt;strong&gt;try-except&lt;/strong&gt;(error handling) to handle an &lt;code&gt;AttributeError&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we&amp;rsquo;ll create the &lt;strong&gt;dataframe from lists&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;
# empty lists
name_list_24 = []
address_list_24 = []
circle_id_list_24 = []
discord_username_list_24 = []
profile_address_24 = []


# loop through level 1
for dct in df_manifest_24[&#39;circle.users&#39;][0]:
    name_list_24.append(dct[&#39;name&#39;])
    address_list_24.append(dct[&#39;address&#39;])
    circle_id_list_24.append(dct[&#39;circle_id&#39;])


# conditionally loop through level 2 
# use try-except
for dct in df_manifest_24[&#39;circle.users&#39;][0]:
    try:
        for k, v in dct[&#39;profile&#39;].items():
            if k == &#39;discord_username&#39;:
                discord_username_list_24.append(v)
            elif k == &#39;address&#39;:
                profile_address_24.append(v)
            else:
                print(&amp;quot;Done.&amp;quot;)
    except:
        AttributeError
    pass

# create dataframe from lists
df_24 = pd.DataFrame(list(zip(name_list_24, address_list_24, circle_id_list_24)),
                     columns=[&#39;Name&#39;, &#39;Address&#39;, &#39;Circle_Id&#39;])

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;loading-nested-data-json_normalize&#34;&gt;Loading Nested Data &lt;code&gt;json_normalize&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: Before creating a dataframe as we saw above, sometimes we just need to convert &lt;em&gt;nested&lt;/em&gt; JSON data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data breakdown&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; is variable we save json dump coming in from http request.&lt;/li&gt;
&lt;li&gt;flatten a portion of &lt;code&gt;data&lt;/code&gt;, data[&amp;lsquo;businesses&amp;rsquo;] and load into dataframe, &amp;lsquo;bookstores&amp;rsquo;&lt;/li&gt;
&lt;li&gt;the &amp;lsquo;bookstores&amp;rsquo; dataframe has many columns, some of which is a &lt;em&gt;column of arrays&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;one column, &lt;code&gt;categories&lt;/code&gt; is a column of arrays (deeply nested data)&lt;/li&gt;
&lt;li&gt;now, flatten &lt;strong&gt;that&lt;/strong&gt; data (categories) setting parameters to &lt;code&gt;json_normalize&lt;/code&gt;, including&lt;/li&gt;
&lt;li&gt;data, sep, record_path, meta and meta-prefix&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# import json_normalize
import pandas as pd
import requests
from pandas.io.json import json_normalize

# use dotenv to hide token info
import os
from dotenv import load_dotenv   
load_dotenv()    

# headers
api_url = os.environ.get(&amp;quot;API_URL&amp;quot;)
api_key = os.environ.get(&amp;quot;API_KEY&amp;quot;)
headers = {&amp;quot;Authorization&amp;quot;: &amp;quot;Bearer {}&amp;quot;.format(api_key)}
params = {&amp;quot;term&amp;quot;: &amp;quot;bookstore&amp;quot;,
          &amp;quot;location&amp;quot;: &amp;quot;San Francisco&amp;quot;}
          
# make API call and extract JSON data
response = requests.get(api_url,
                        headers=headers,
                        params=params)
                        
# data is entire json dump                       
data = response.json()

# data is also nested json
# flatten data and load to dataframe with _ separator
bookstores = json_normalize(data[&#39;businesses&#39;], sep=&amp;quot;_&amp;quot;)
print(list(bookstores))

# print deeply nested data
# within bookstores dataframe, choose &amp;quot;categories&amp;quot; column
print(bookstores.categories.head())

# flatten categories data, bring in business details
df = json_normalize(data[&#39;businesses&#39;],
                    sep=&amp;quot;_&amp;quot;,
                    record_path = &amp;quot;categories&amp;quot;,
                    meta = [&amp;quot;name&amp;quot;,
                            &amp;quot;alias&amp;quot;,
                            &amp;quot;rating&amp;quot;,
                            [&amp;quot;coordinates&amp;quot;, &amp;quot;latitude&amp;quot;],
                            [&amp;quot;coordinates&amp;quot;, &amp;quot;longitude&amp;quot;]],
                    meta_prefix=&amp;quot;biz_&amp;quot;)





&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data and web3 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Looping through the 3 Main Data Structures in Python</title>
      <link>/technical_notes/example_tech/python_looping_through_data_structures/</link>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_looping_through_data_structures/</guid>
      <description>&lt;h2 id=&#34;looping-through-the-3-main-data-structures-in-python&#34;&gt;Looping through the 3 Main Data Structures in Python&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: An introduction to loops and data structures.&lt;/p&gt;
&lt;p&gt;In Python, three main ones are &lt;code&gt;lists&lt;/code&gt;, &lt;code&gt;sets&lt;/code&gt; and &lt;code&gt;dictionaries&lt;/code&gt;. Here are some vignettes to show how they can be looped.&lt;/p&gt;
&lt;h3 id=&#34;three-ways-to-loop&#34;&gt;Three ways to loop&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# set
data = {&#39;Caleb&#39;, &#39;Jimmy&#39;, &#39;Sam&#39;, &#39;Monica&#39;, &#39;Caleb&#39;}

# list
data = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]

# dictionary
data = {
    &#39;Caleb&#39;: 5,
    &#39;Jimmy&#39;: 10,
    &#39;Sam&#39;: 12,
    &#39;Monica&#39;: 20,
    &#39;Caleb&#39;: 4
}


# direct
for i in data:
   print(i)
   
# range &amp;amp; len
for i in range(len(data)):
   print(i)


# enumerate
# grab index and key, not value
# remove duplicate keys
for i, letter in enumerate(data):
   print(i, letter)
   
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;iterating-through-dictionaries&#34;&gt;Iterating through Dictionaries&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;data = {
    &#39;Caleb&#39;: 5,
    &#39;Jimmy&#39;: 10,
    &#39;Sam&#39;: 12,
    &#39;Monica&#39;: 20,
    &#39;Caleb&#39;: 4
}

# .items() method returns key &amp;amp; values
for key, val in data.items():
    print(key, val)
    
# enumerate gets index &amp;amp; key (no values)
for index, value in enumerate(data):
    print(index, value)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;updating-dictionaries&#34;&gt;Updating Dictionaries&lt;/h2&gt;
&lt;p&gt;You have a dictionary with key, value pairs, you want to update values of &lt;em&gt;existing&lt;/em&gt; keys and find new keys and determine value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;drinks_in_storage = {
    &amp;quot;grape&amp;quot;: 5, 
    &amp;quot;black cherry&amp;quot;: 3, 
    &amp;quot;cola&amp;quot;: 4
}

# update with List of Lists
drink_purchased = [[&#39;grape&#39;, 3], [&#39;black cherry&#39;, 1], [&#39;cola&#39;, 5], [&#39;orange&#39;, 12]]

# can also update with List of Sets
drink_purchased = [(&#39;grape&#39;, 3), (&#39;black cherry&#39;, 1), (&#39;cola&#39;, 5), (&#39;orange&#39;, 12)]

# checking if a key is present before updating value
for drink in drink_purchased:
    if drinks_in_storage.get(drink[0]):
        drinks_in_storage[drink[0]] += drink[1]
    else:
        drinks_in_storage[drink[0]] = drink[1]

# see that drinks_in_storage added &#39;orange&#39;:12 to the dictionary
print(drinks_in_storage) 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;using-defaultdict&#34;&gt;Using defaultdict&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# -------------------------- without defaultdict
drink_purchased = [(&#39;grape&#39;, 3), (&#39;black cherry&#39;, 1), (&#39;cola&#39;, 5), (&#39;orange&#39;, 12)]

# checking if a key is present before updating value
for drink in drink_purchased:
    if drinks_in_storage.get(drink[0]):
        drinks_in_storage[drink[0]] += drink[1]
    else:
        drinks_in_storage[drink[0]] = drink[1]
        
        
# -------------------------- with defaultdict
drinks_in_storage = defaultdict(int, drinks_in_storage)

drink_purchased = [[&#39;grape&#39;, 3], [&#39;black cherry&#39;, 1], [&#39;cola&#39;, 5], [&#39;orange&#39;, 12]]

# cut out the &#39;else&#39;
for drink in drink_purchased:
        drinks_in_storage[drink[0]] += drink[1]


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ways to Join Sets</title>
      <link>/technical_notes/example_tech/python_joining_sets/</link>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_joining_sets/</guid>
      <description>&lt;h2 id=&#34;4-operations-to-join-sets&#34;&gt;4 Operations to Join Sets&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You have sets containing strings, you can join, find intersections, or differences and symmetric differences.&lt;/p&gt;
&lt;h3 id=&#34;4-operations&#34;&gt;4 Operations&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;my_drinks = {&#39;grape&#39;, &#39;cola&#39;, &#39;black cherry&#39;}
her_drinks = {&#39;lime&#39;, &#39;cola&#39;}

# position if not retained in a set
print(my_drinks, her_drinks)

# 4 operations to know about

# union
print(&amp;quot;Union&amp;quot;, my_drinks | her_drinks)


# intersection
print(&amp;quot;Intersection&amp;quot;, my_drinks &amp;amp; her_drinks)

# difference
print(&amp;quot;Difference&amp;quot;, my_drinks - her_drinks)


# symmetric difference
print(&amp;quot;Symmetric Difference&amp;quot;, my_drinks ^ her_drinks)
   
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Establishing an API connection with the requests library</title>
      <link>/technical_notes/example_tech/python_api_connection/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_api_connection/</guid>
      <description>&lt;h2 id=&#34;api-connection&#34;&gt;API Connection&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You need to use &lt;code&gt;requests&lt;/code&gt; to consume an API, but with authorization parameters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This pattern can be used across project, I used this to consume &lt;strong&gt;Coordinape&lt;/strong&gt; API data. You&amp;rsquo;ll want to set up a &lt;code&gt;dot env&lt;/code&gt; file to contain any secret API or authorization keys.&lt;/p&gt;
&lt;p&gt;Referencing this 
&lt;a href=&#34;https://stackoverflow.com/questions/19069701/python-requests-library-how-to-pass-authorization-header-with-single-token&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stack overflow&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# ---- generic pattern

# Request
REQ = &#39;https://api.site.com/something/else/else&#39;

# Token (stored in .env)
AUTH_TOKEN = &#39;Bearer 8888|fliuzabuvdgfnsuczkncsq12454632&#39;

# Use os library to pull Token from .env
auth_token = os.environ.get(&#39;AUTH_TOKEN&#39;)

# Create Header parameter
HEADER = {&#39;Authorization&#39;: f&#39;{auth_token}&#39;}

# Putting it all together
response = requests.get(REQ, headers=HEADER)

# Print result
print(response.json())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s a real example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# request library to establish connection
import requests
from pprint import pprint

# os library used with python-dotenv to grab AUTH_TOKEN from .env
import os

# using python-dotenv method
from dotenv import load_dotenv
load_dotenv()

# authorization &amp;amp; header
auth_token = os.environ.get(&#39;AUTH_TOKEN&#39;)
HEADER = {&#39;Authorization&#39;: f&#39;{auth_token}&#39;}

# ----- Data Endpoints

# Coordinape Round -- OG Bankless(June): Circle id 24
response24 = requests.get(
    &#39;https://api.coordinape.com/api/v2/token-gifts?circle_id=24&#39;, headers=HEADER)
pprint(response24.json())
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;navigating-nested-json-data&#34;&gt;Navigating Nested JSON Data&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;import requests
from pprint import pprint
import os
import pandas as pd

# using python-dotenv method
from dotenv import load_dotenv
load_dotenv()

# api endpoints, authorization &amp;amp; header
auth_token = os.environ.get(&#39;AUTH_TOKEN&#39;)
api_endpoint_manifest = os.environ.get(&#39;API_ENDPOINT_MANIFEST&#39;)
api_endpoint_users = os.environ.get(&#39;API_ENDPOINT_USERS&#39;)
HEADER = {&#39;Authorization&#39;: f&#39;{auth_token}&#39;}

# --- Primary steps to explore nested data ------
response = requests.get(f&#39;{api_endpoint_manifest}&#39;, headers=HEADER)
result = response.json()
dataframe = pd.json_normalize(result)
list_of_column_names = list(dataframe)

# dataframe is [1 rows x 48 columns]
# unpack dataframe using f-string
for item in list_of_column_names:
    print(dataframe[f&#39;{item}&#39;])

# ------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data and web3 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Establishing a Mongo database connection with pymongo</title>
      <link>/technical_notes/example_tech/python_connect_mongodb/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_connect_mongodb/</guid>
      <description>&lt;h2 id=&#34;establish-connection-to-mongodb&#34;&gt;Establish connection to MongoDB&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: Querying data in a NoSQL database (mongo) is fine, but for many data analysis tasks, it may be friendlier to operate in a &lt;code&gt;Python&lt;/code&gt; and &lt;code&gt;Pandas&lt;/code&gt; environment.&lt;/p&gt;
&lt;p&gt;We will make a database connection, query the the data as a &lt;code&gt;json&lt;/code&gt; dump and access it as a list of dictionaries. Each mongo collection being largely thought of as a python dictionary. The below example comes from the Bounty Board project i&amp;rsquo;m working on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We will employ the &lt;strong&gt;python-dotenv&lt;/strong&gt; method for storing environment variables and measure to have &lt;code&gt;pymongo&lt;/code&gt; previously installed.&lt;/p&gt;
&lt;p&gt;Here are some external reference for accomplishing this task:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://pymongo.readthedocs.io/en/stable/tutorial.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PyMongo Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.w3schools.com/python/python_mongodb_find.asp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python MongoDB Find in w3schools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://towardsdatascience.com/using-mongo-databases-in-python-e93bc3b6ff5f&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Using Mongo Databases in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.geeksforgeeks.org/how-to-fetch-data-from-mongodb-using-python/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fetch data from MongoDB using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/13210730/how-to-make-pymongos-find-return-a-list&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Turn pymongo&amp;rsquo;s find() return a list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;import os
from dotenv import load_dotenv  # for python-dotenv method
load_dotenv()  # for python-dotenv method


def get_database():
    &amp;quot;&amp;quot;&amp;quot;Description
    import pymongo
    establish connection to mongo client and return
    
    Args: none.
    Return: client connection
    Notes/Raises:
    &amp;quot;&amp;quot;&amp;quot;
    from pymongo import MongoClient
    import pymongo
    connection_string = os.environ.get(&#39;CONNECTION_STRING&#39;)
    client = MongoClient(connection_string)
    return client


def get_collection():
    &amp;quot;&amp;quot;&amp;quot;Description:
    Go through bountyboard database and bounties collection
    
    Args: none.
    Return: all bounties
    Notes/Raises:
    &amp;quot;&amp;quot;&amp;quot;
    dbname = get_database()
    bb = dbname[&#39;bountyboard&#39;]
    col = bb[&#39;bounties&#39;]
    return col


results = list(get_collection().find())
print(type(results))

# if __name__ == &amp;quot;__main__&amp;quot;:
#    dbname = get_database()
#    print(dbname)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data and web3 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Show ahead/behind for all local branches</title>
      <link>/technical_notes/example_tech/github_check_status_branches/</link>
      <pubDate>Sun, 28 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/github_check_status_branches/</guid>
      <description>&lt;h2 id=&#34;show-aheadbehind-for-all-local-branches&#34;&gt;Show ahead/behind for all local branches&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You can do &lt;code&gt;git status&lt;/code&gt; to see how far ahead or behind the &lt;em&gt;current&lt;/em&gt; branch your work is, but sometimes you want to see the status of &lt;strong&gt;all&lt;/strong&gt; branches.&lt;/p&gt;
&lt;p&gt;This is the command to run in terminal. Make sure you&amp;rsquo;re in the appropriate project directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;$ git for-each-ref --format=&amp;quot;%(refname:short) %(upstream:track) %(upstream:remotename)&amp;quot; refs/heads

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See this 
&lt;a href=&#34;https://stackoverflow.com/questions/7773939/show-git-ahead-and-behind-info-for-all-branches-including-remotes/20499690#20499690&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stack overflow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Update local branch to upstream origin</title>
      <link>/technical_notes/example_tech/github_update_local_branch_to_origin/</link>
      <pubDate>Sun, 28 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/github_update_local_branch_to_origin/</guid>
      <description>&lt;h2 id=&#34;update-local-branch-to-upstream-origin&#34;&gt;Update local branch to upstream origin&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: The branch you&amp;rsquo;re working off has fallen behind from the origin, you need to get it up-to-date. &lt;em&gt;This&lt;/em&gt; allow you to get your local branch up-to-date with &amp;lsquo;origin&amp;rsquo; &lt;strong&gt;without&lt;/strong&gt; having to switch over the &lt;code&gt;develop&lt;/code&gt; branch to run &lt;code&gt;git pull&lt;/code&gt;, you can do it right in the current branch.&lt;/p&gt;
&lt;p&gt;This is the command to run in terminal. Make sure you&amp;rsquo;re in the appropriate project directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# ensure we are working off the latest version of the upstream repo
git pull origin

# bring the latest changes into our local branch
git merge develop

# resolve conflicts...

# push the latest version of the local branch...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See this 
&lt;a href=&#34;https://stackoverflow.com/questions/7773939/show-git-ahead-and-behind-info-for-all-branches-including-remotes/20499690#20499690&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stack overflow&lt;/a&gt; for a command to see ahead/behind for all branches.&lt;/p&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting .env to store sensitive info without pushing to GitHub</title>
      <link>/technical_notes/example_tech/python_dotenv/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_dotenv/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;FIRST steps for any project are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the directory&amp;rsquo;s root and create &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;.env&lt;/code&gt; (dot env) to &lt;code&gt;.gitignore&lt;/code&gt; to 
&lt;a href=&#34;https://stackoverflow.com/questions/30696930/how-to-hide-env-file-from-github&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hide from GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;note&lt;/strong&gt;: Use one &lt;code&gt;.env&lt;/code&gt; file per project, you can store multiple API Keys, passwords and other sensitive info.&lt;/li&gt;
&lt;li&gt;Best practice to store &lt;code&gt;.env&lt;/code&gt; on same root directory as &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;setting-up-dotenv-files&#34;&gt;Setting up dotenv Files&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Use Case&lt;/strong&gt;: We have sensitive API Keys and Secret Keys we don&amp;rsquo;t want to put into version control, but we need to access.&lt;/p&gt;
&lt;p&gt;The best practice is to create a &lt;code&gt;.env&lt;/code&gt; file at the root of your project and store the keys in there, and &lt;strong&gt;most importantly&lt;/strong&gt;, making sure to include &lt;code&gt;.env&lt;/code&gt; in a &lt;code&gt;.gitignore&lt;/code&gt; file so it &lt;em&gt;does not&lt;/em&gt; get included in versioning. 
&lt;a href=&#34;https://dev.to/biplov/handling-passwords-and-secret-keys-using-environment-variables-2ei0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The challenge is to install the &lt;code&gt;dotenv&lt;/code&gt; module to access the &lt;code&gt;load_dotenv&lt;/code&gt; function in order to access the data in the environment variable (&lt;code&gt;.env&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;First, here&amp;rsquo;s how the structure of the directory &lt;em&gt;could&lt;/em&gt; look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
âââ .env
âââ settings.py
âââ .gitignore
âââ project_directory_1
        âââ file.py
âââ project_directory_2
        âââ another_file.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key things to pay attention here are &lt;code&gt;.env&lt;/code&gt;, &lt;code&gt;your_python_script.py&lt;/code&gt; and &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For the present hypothetical project, here&amp;rsquo;s what needs to be in the &lt;code&gt;.gitignore&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#.gitignore

# Environents
.env
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s what needs to be in &lt;code&gt;.env&lt;/code&gt;. The example here is accessing Twitter API. The first time you&amp;rsquo;re setting this up, I&amp;rsquo;d recommend using a &amp;ldquo;fake&amp;rdquo; CONSUMER_KEY (aka API Key) and CONSUMER_SECRET (API Secret Key) just to test it out and make sure that it doesn&amp;rsquo;t get inadvertently added to version control (&lt;strong&gt;note&lt;/strong&gt;: see setting up &lt;code&gt;.gitignore&lt;/code&gt; above).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# you&#39;ll put your actual API Keys and Secrete Keys here

TWITTER_CONSUMER_KEY=fakeconsumerkey
TWITTER_CONSUMER_SECRET=fakeconsumersecret
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within the &lt;code&gt;your_python_script.py&lt;/code&gt; file, you&amp;rsquo;ll 
&lt;a href=&#34;https://dev.to/biplov/handling-passwords-and-secret-keys-using-environment-variables-2ei0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;have&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from dotenv import load_dotenv   #for python-dotenv method
load_dotenv()                    #for python-dotenv method

import os 

user_name = os.environ.get(&#39;USER&#39;)
password = os.environ.get(&#39;password&#39;)

print(user_name, password)

# output

username password
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From there you&amp;rsquo;ll go into &lt;code&gt;file.py&lt;/code&gt; and use the dotenv module to access environment variables (sensitive API Keys).&lt;/p&gt;
&lt;p&gt;The example below accesses Twitter API.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#file.py

# for python-dotenv method of access environment variables
from twython import Twython
import webbrowser

import os
import dotenv
from dotenv import load_dotenv
load_dotenv()

###### TWITTER API ######

# IMPORTANT: PLUG YOUR KEY AND SECRET IN DIRECTLY (without os.environ.get())
CONSUMER_KEY = os.environ.get(&amp;quot;TWITTER_CONSUMER_KEY&amp;quot;)         # API Key
CONSUMER_SECRET = os.environ.get(&amp;quot;TWITTER_CONSUMER_SECRET&amp;quot;)   # API Secret Key
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming everything is setup properly, you should be able to run the following code within &lt;code&gt;IPython&lt;/code&gt; and have &lt;code&gt;CONSUMER_KEY&lt;/code&gt; return a string:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import os
import dotenv
from dotenv import load_dotenv

load_dotenv() # True
CONSUMER_KEY = os.environ.get(&amp;quot;TWITTER_CONSUMER_KEY&amp;quot;)

CONSUMER_KEY  # &#39;fakeconsumerkey&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;installing-dotenv-module&#34;&gt;Installing dotenv module&lt;/h2&gt;
&lt;p&gt;This is the challenging part. I had installed &lt;code&gt;dotenv&lt;/code&gt; but was unable to access it within &lt;code&gt;settings.py&lt;/code&gt; and &lt;code&gt;file.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, because we&amp;rsquo;re using Python3, anything that involves &lt;code&gt;pip install&lt;/code&gt; should  be &lt;code&gt;pip3 install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I had to uninstall, then re-install &lt;code&gt;dotenv&lt;/code&gt;, and what worked was following this 
&lt;a href=&#34;https://stackoverflow.com/questions/58943578/i-have-installed-python-dotenv-but-python-cannot-find-it&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stack Overflow answer&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# update Nov 17, 2021, this works
$ pip3 install -U python-dotenv

# old installation
conda install -c conda-forge python-dotenv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sometimes having both &lt;code&gt;dotenv&lt;/code&gt; and &lt;code&gt;python-dotenv&lt;/code&gt; install can cause conflict. In which case, in your virtual environment, try below. Based on 
&lt;a href=&#34;https://stackoverflow.com/questions/58943578/i-have-installed-python-dotenv-but-python-cannot-find-it&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this answer&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# update Nov 17, 2021 - use python-dotenv method

pip3 uninstall dotenv
pip3 uninstall python-dotenv
pip3 install python-dotenv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;rsquo;ll know you have something working when you run the following code in the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotenv --version   # dotenv, version 0.19.2   (Nov 17, 2021)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Picking columns, rows in Pandas</title>
      <link>/technical_notes/example_tech/pandas_pick_df_rows_columns/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/pandas_pick_df_rows_columns/</guid>
      <description>&lt;h2 id=&#34;picking-columns-rows-in-pandas&#34;&gt;Picking columns, rows in Pandas&lt;/h2&gt;
&lt;p&gt;Note: To identify a specific cell, it&amp;rsquo;s good to have at least a unique &lt;code&gt;id&lt;/code&gt; column to reference.&lt;/p&gt;
&lt;p&gt;This part grabs the specific row: &lt;code&gt;df.loc[df[&#39;id&#39;] == number]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This part grabs the specific column: &lt;code&gt;[&#39;column_name&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# generic
df.loc[df[&#39;id&#39;] == number][&#39;column_name&#39;]

# specific
concat_frames_4.loc[concat_frames_4[&#39;id&#39;] == 1983][&#39;choice&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on Data and DAOs 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use string interpolation to query GraphQL</title>
      <link>/technical_notes/example_tech/python_string_interpolation_graphql/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_string_interpolation_graphql/</guid>
      <description>&lt;h2 id=&#34;use-pythons-string-interpolation-to-query-graphql&#34;&gt;Use Python&amp;rsquo;s string interpolation to query GraphQL&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: For this project, I had previously grabbed the latest timestamp in a data table, assigned it to a variable and now want to use it as input for a GraphQL query:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# Run separate request to GraphQL endpoint
# use max_tx_timestamp in parameter &#39;where: {timestamp_gte: max_tx_timestamp}&#39;
# this will return on-chain tx since latest timestamp (i.e., max_tx_timestamp)

variables = {&#39;input&#39;: max_tx_timestamp}

query = f&amp;quot;&amp;quot;&amp;quot;
{{
  transferBanks(first: 1000, where: {{timestamp_gte:{max_tx_timestamp}}}, orderBy: timestamp, orderDirection: asc, subgraphError: allow) {{
    id
    from_address
    to_address
    amount
    amount_display
    timestamp
    timestamp_display
  }}
}}
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then to make sure this &lt;em&gt;string interpolation&lt;/em&gt; actually works, we need to make a post request to the GraphQL API endpoint, query it, save that query into a data frame.&lt;/p&gt;
&lt;p&gt;(NOTE: This requies toggling back and forth between the database client like pgAdmin and your ipython environment)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# note: &#39;variables&#39; defined above


def run_query(q):
    request = requests.post(&#39;https://api.studio.thegraph.com/query/1121/bankv1/v0.0.5&#39;
                            &#39;&#39;,
                            json={&#39;query&#39;: query, &#39;variables&#39;: variables})
    if request.status_code == 200:
        return request.json()
    else:
        raise Exception(&#39;Query failed. return code is {}.     {}&#39;.format(
            request.status_code, query))


result = run_query(query)

# print results
print(&#39;Print Bank Subgraph Result - {}&#39;.format(result))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Python to query GraphQL</title>
      <link>/technical_notes/example_tech/python_query_graphql/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_query_graphql/</guid>
      <description>&lt;h2 id=&#34;using-python-to-query-graphql&#34;&gt;Using Python to query GraphQL&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: We need to query GraphQL, in JSON format, to convert to dataframe.&lt;/p&gt;
&lt;p&gt;There are several ways to go about this. The simplest way is to use the &lt;code&gt;requests&lt;/code&gt; library to make HTTP requests to the API endpoint, then the &lt;code&gt;json&lt;/code&gt; library to convert those requests into JSON format:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;import requests
import json
import pandas as pd

def run_query(q):
    request = requests.post(&#39;https://api-endpoint&#39;
                            &#39;&#39;,
                            json={&#39;query&#39;: query})
    if request.status_code == 200:
        return request.json()
    else:
        raise Exception(&#39;Query failed. return code is {}.     {}&#39;.format(
            request.status_code, query))

# basic query first
query = &amp;quot;&amp;quot;&amp;quot;
{
    transferBanks(first: 1000, orderBy: timestamp, orderDirection: asc, subgraphError: allow) {
    id
    from_address
    to_address
    amount
    amount_display
    timestamp
    timestamp_display
  }
}
&amp;quot;&amp;quot;&amp;quot;

# returns JSON
result = run_query(query)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An alternative way is to use the &lt;code&gt;gql&lt;/code&gt; and the &lt;code&gt;gql.transport.aiohttp&lt;/code&gt; libraries:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;from gql import gql, Client
from gql.transport.aiohttp import AIOHTTPTransport

# Select transport with url endpoint
transport = AIOHTTPTransport(
    url=&amp;quot;https://api.studio.thegraph.com/query/1121/bankv1/v0.0.5&amp;quot;)

# create GraphQL client using defined transport
client = Client(transport=transport, fetch_schema_from_transport=True)

# GraphQL query
query = gql(&amp;quot;&amp;quot;&amp;quot;
{
    transferBanks(first: 1000, where: {timestamp_gte: &amp;quot;1635403557&amp;quot;}, orderBy: timestamp, orderDirection: asc, subgraphError: allow) {
    id
    from_address
    to_address
    amount
    amount_display
    timestamp
    timestamp_display
    }
}
&amp;quot;&amp;quot;&amp;quot;)

# run query on transport
result = client.execute(query)
print(result)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Pandas to Convert JSON to Dataframes</title>
      <link>/technical_notes/example_tech/python_json_to_df/</link>
      <pubDate>Mon, 01 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_json_to_df/</guid>
      <description>&lt;h2 id=&#34;using-pandas-to-convert-json-to-dataframes&#34;&gt;Using Pandas to Convert JSON to Dataframes&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: We are pulling in JSON data and need to convert it to a dataframe to load to a relational database or for further analysis.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s likely the JSON is nested with at least two levels. Here the &lt;code&gt;requests&lt;/code&gt; library makes an http request to an API endpoint. A function &lt;code&gt;run_query(q)&lt;/code&gt; is written to return the request in JSON data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;import requests
import json
import pandas as pd

def run_query(q):
    request = requests.post(&#39;https://api-endpoint&#39;
                            &#39;&#39;,
                            json={&#39;query&#39;: query})
    if request.status_code == 200:
        return request.json()
    else:
        raise Exception(&#39;Query failed. return code is {}.     {}&#39;.format(
            request.status_code, query))

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we need to unnest the JSON into a list of dictionaries before converting into dataframe. THe flow is JSON -&amp;gt; get Items -&amp;gt; turn into List -&amp;gt; dig down into List of Dictionaries -&amp;gt; convert to dataframe:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# returns JSON
result = run_query(query)

# get Items
result_items = result.items()
# turn into List
result_list = list(result_items)
# dig down into List of Dictionaries (2 levels)
lst_of_dict = result_list[0][1].get(&#39;transferBanks&#39;)
# convert to data frame
df = pd.json_normalize(lst_of_dict)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Github Repo</title>
      <link>/technical_notes/example_tech/github_make_repo/</link>
      <pubDate>Wed, 21 Jul 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/github_make_repo/</guid>
      <description>&lt;h2 id=&#34;guide-for-creating-a-github-repo-and-cloning-locally&#34;&gt;Guide for Creating a GitHub Repo and Cloning Locally&lt;/h2&gt;
&lt;p&gt;This guide can help you setup a fresh new GitHub Repo, then clone it locally to begin working in your local environment, then pushing changes up to your GitHub Repo.&lt;/p&gt;
&lt;p&gt;This guide assumes you have a Text Editor like VSCode installed and that you can use the &lt;strong&gt;Terminal&lt;/strong&gt; to navigate through various folders.&lt;/p&gt;
&lt;h2 id=&#34;creating-repo&#34;&gt;Creating Repo&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Sign-up for a GitHub Account&lt;/li&gt;
&lt;li&gt;Navigate to Your Profile&lt;/li&gt;
&lt;li&gt;Click on Repositories&lt;/li&gt;
&lt;li&gt;Click on green button &amp;ldquo;New&amp;rdquo; (for New Repo)&lt;/li&gt;
&lt;li&gt;In the Repository Name field, give your new repo a name*&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Names should have no spaces, use underscore _ to separate words (ie., special_project)&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;
&lt;p&gt;Description is optional&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Default is Public (a Private Repo requires a monthly fee)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tick Add a README and Choose license (if applicable, if not just go with a README)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A .gitignore file is recommended if your project has sensitive info associated with it that you&amp;rsquo;d like to keep OUT of GitHub&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &amp;ldquo;Create Repository&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;cloning-locally&#34;&gt;Cloning Locally&lt;/h2&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;Navigate to your newly created repository (still on GitHub)&lt;/li&gt;
&lt;li&gt;Click on the Green Button &amp;ldquo;Code&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Select the HTTPS (default) option and &lt;strong&gt;copy&lt;/strong&gt; the &lt;a href=&#34;https://github.com/YourName/special_project&#34;&gt;https://github.com/YourName/special_project&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you&amp;rsquo;ve copied the &lt;code&gt;https&lt;/code&gt; address, you&amp;rsquo;ll use the &lt;strong&gt;terminal&lt;/strong&gt; in your text editor (i.e., VSCode) to navigate to a folder on your local machine (desktop or laptop) where you&amp;rsquo;ve &lt;em&gt;already&lt;/em&gt; created a folder just for coding projects (i.e., coding_projects)&lt;/p&gt;
&lt;ol start=&#34;14&#34;&gt;
&lt;li&gt;Open the text editor (i.e., VS Code), click on Terminal in the menu bar, &amp;ldquo;New Terminal&amp;rdquo;, this will open your terminal to have you start at a level &lt;em&gt;above&lt;/em&gt; the Desktop. Suppose you have a folder &lt;em&gt;on&lt;/em&gt; your Desktop that says &amp;ldquo;coding_projects&amp;rdquo; you&amp;rsquo;ll want to &lt;strong&gt;clone&lt;/strong&gt; your newly-created github repo &lt;em&gt;in&lt;/em&gt; this folder. But you have to navigate to &lt;em&gt;coding_projects&lt;/em&gt; folder first. Here&amp;rsquo;s the command to navigate in Terminal:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;cd Desktop/coding_projects&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;15&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; means change directory; here, you&amp;rsquo;ll change directory into your Desktop, then into coding_projects folder (two steps) to &lt;strong&gt;clone&lt;/strong&gt; your github repository (special_project)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(in Terminal), you&amp;rsquo;re now inside the &lt;code&gt;coding_projects&lt;/code&gt; folder, you&amp;rsquo;ll run this command, pasting the &lt;code&gt;https&lt;/code&gt; address that you copied from your GitHub Repo:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/YourName/special_project&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will initialize your repo locally. From here, try making a minor change to the README file.&lt;/p&gt;
&lt;ol start=&#34;17&#34;&gt;
&lt;li&gt;
&lt;p&gt;Make a small change to your README file on your Text Editor, then save the changes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Back in Terminal, you&amp;rsquo;ll add the changes, then commit, then push back up to GitHub. You&amp;rsquo;ll run these commands:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;   (this should indicate in red that you have new changes)
&lt;code&gt;git add .&lt;/code&gt;    (you&amp;rsquo;ll add those changes)
&lt;code&gt;git push&lt;/code&gt;     (you&amp;rsquo;re pushing those changes to your GitHub Repo)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: you might see a prompt to do &lt;code&gt;git push --upstream origin&lt;/code&gt;, which happens if this is the first push you&amp;rsquo;re making to the repo.&lt;/p&gt;
&lt;p&gt;Now you&amp;rsquo;ve cloned your repo locally, made some changes, then pushed it back up to GitHub. Its important to &lt;strong&gt;note&lt;/strong&gt; that the process described here is to allow you to track changes for your personal coding projects, &lt;strong&gt;NOT&lt;/strong&gt; any code for production or development environment.&lt;/p&gt;
&lt;p&gt;In those cases, the team may have it&amp;rsquo;s own protocol for version control and you&amp;rsquo;ll want to get familiar and follow those protocols.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making a Pull Request on a GitHub Repo</title>
      <link>/technical_notes/example_tech/github_make_pr/</link>
      <pubDate>Fri, 16 Jul 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/github_make_pr/</guid>
      <description>&lt;h2 id=&#34;guide-for-contributing-to-another-code-base-by-making-a-pull-request&#34;&gt;Guide for contributing to another code base by making a pull request&lt;/h2&gt;
&lt;h2 id=&#34;public-repo&#34;&gt;Public Repo&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Identify a project you want to contribute to on GitHub&lt;/li&gt;
&lt;li&gt;Fork that project&lt;/li&gt;
&lt;li&gt;Clone it to your local machine*&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt; : Do not clone in another directory that was &lt;em&gt;already&lt;/em&gt; cloned from another repo. For example, when I cloned 
&lt;a href=&#34;https://github.com/PaulApivat/pytalentsolution&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pytalentsolution&lt;/a&gt; on my local machine, I initially cloned it &lt;em&gt;inside&lt;/em&gt; Saku directory, which was &lt;em&gt;itself&lt;/em&gt; a clone of an already-existing-repo. The correct way was to create a &lt;em&gt;new&lt;/em&gt; directory for pytalentsolution.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Make a new branch&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;4a: &lt;code&gt;cd&lt;/code&gt; into directory of the cloned repo&lt;/li&gt;
&lt;li&gt;4b: use &lt;code&gt;git branch&lt;/code&gt; to confirm you&amp;rsquo;re on the &lt;code&gt;*master&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;4c: use &lt;code&gt;git checkout -b name_of_new_branch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4d: use &lt;code&gt;git branch&lt;/code&gt; to check that you&amp;rsquo;re on &lt;code&gt;name_of_new_branch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;
&lt;p&gt;Make changes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push it back to your repo&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt; : You&amp;rsquo;ll get a message &lt;code&gt;git push remote --&lt;/code&gt; use this instead of the traditional &lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;(Go back to the forked repo in GitHub) Click the &lt;strong&gt;Compare &amp;amp; Pull Request&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;add a description to changes made in the pull request&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Click &lt;strong&gt;Create pull request&lt;/strong&gt; to open a new pull request&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;private-repo&#34;&gt;Private Repo&lt;/h2&gt;
&lt;p&gt;1-3. You cannot fork a private repo&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;Clone directly to local machine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git branch -a&lt;/code&gt; to see all branches in the project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt; to confirm you&amp;rsquo;re on master branch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[important] &lt;code&gt;git status&lt;/code&gt; to check if ahead or behind (if behind, use &lt;code&gt;git pull&lt;/code&gt; to fetch and download content from a remote repository)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[from git master] create a &lt;strong&gt;new&lt;/strong&gt; branch use &lt;code&gt;git checkout -b name_of_new_branch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;git branch&lt;/code&gt; to make sure you&amp;rsquo;re on new branch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make changes, then normal: git add, git commit -m &amp;ldquo;message&amp;rdquo;, git push&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt; : You&amp;rsquo;ll get a message &lt;code&gt;git push remote --&lt;/code&gt; use this instead of the traditional &lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;(Go back to the forked repo in GitHub) Click the &lt;strong&gt;Compare &amp;amp; Pull Request&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Add good PR description, 
&lt;a href=&#34;https://www.pullrequest.com/blog/writing-a-great-pull-request-description/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;see here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;Click &lt;strong&gt;Create pull request&lt;/strong&gt; to open a new pull request&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;production-vs-development&#34;&gt;Production vs Development&lt;/h2&gt;
&lt;p&gt;Ongoing projects with several contributors will generally separate the &lt;strong&gt;main&lt;/strong&gt; from &lt;strong&gt;develop&lt;/strong&gt; branch. Making a PR in this context is &lt;em&gt;slighty&lt;/em&gt; different:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In the command line, switch to development branch &lt;code&gt;git checkout develop&lt;/code&gt; (even if you don&amp;rsquo;t see the &lt;code&gt;develop&lt;/code&gt; branch locally, you may just see &lt;code&gt;main&lt;/code&gt; or a new branch you created &lt;code&gt;new_branch&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now that you&amp;rsquo;re &lt;em&gt;starting&lt;/em&gt; on &lt;code&gt;develop&lt;/code&gt; branch, do &lt;code&gt;git pull origin develop&lt;/code&gt; to make sure that any prior changes from the &lt;code&gt;develop&lt;/code&gt; branch is pulled in locally, and you&amp;rsquo;re up-to-date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then from &lt;code&gt;develop&lt;/code&gt;, create a new &lt;code&gt;feature&lt;/code&gt; branch like so: &lt;code&gt;git checkout feature/new-branch&lt;/code&gt;. (note: &lt;code&gt;feature/new-branch&lt;/code&gt; is a naming convention that explicitly says you&amp;rsquo;re creating a new feature branch).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then make your changes or add new code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then, &lt;code&gt;git push origin&lt;/code&gt; (in this case, origin will be develop)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once you go back to github, if you see &lt;code&gt;compare and pull request&lt;/code&gt;, make sure it is being merged into &lt;code&gt;develop&lt;/code&gt; and &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;when-feature-branch-goes-out-of-sync-with-development&#34;&gt;When Feature branch goes out of sync with Development&lt;/h2&gt;
&lt;p&gt;Sometimes you&amp;rsquo;ve already pushed a pull request, but the development branch goes ahead of your proposed changes. Here&amp;rsquo;s how to handle:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Switch to a specific feature branch (no need to go back to develop): &lt;code&gt;git checkout branch_name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;git pull origin develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then &lt;code&gt;git push origin&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3a. If there&amp;rsquo;s an &lt;code&gt;Index Error&lt;/code&gt;, run&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git reset --hard&lt;/code&gt; *&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clean -df&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git reset&lt;/code&gt; is to take the current branch and reset it to point somewhere else, also bringing the index and working tree along. Here&amp;rsquo;s a more visual explanation (
&lt;a href=&#34;https://stackoverflow.com/questions/2530060/in-plain-english-what-does-git-reset-d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If your main branch is &lt;code&gt;C&lt;/code&gt; and you want to point your current branch somewhere else:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- A - B - C (HEAD, main branch)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and you want to point to &lt;code&gt;B&lt;/code&gt;, not &lt;code&gt;C&lt;/code&gt;, then you use &lt;code&gt;git reset B&lt;/code&gt; to move it there:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- A - B (HEAD, main branch)  # - C is still here, but there&#39;s no branch pointing to it anymore
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;vim&#34;&gt;VIM&lt;/h2&gt;
&lt;p&gt;If for whatever reason you find yourself on VIM, you can escape by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Press &lt;code&gt;esc&lt;/code&gt; (escape)&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;:&lt;/code&gt; (colon)&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;wq&lt;/code&gt; (write and quit)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Or one-line command to get out of VIM&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Press &lt;code&gt;:wq!&lt;/code&gt; (colon, write and quit)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Using Faker to simulate fake data with Python</title>
      <link>/technical_notes/example_tech/python_faker/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_faker/</guid>
      <description>&lt;h2 id=&#34;creating-mock-data-in-python-with-the-faker-library&#34;&gt;Creating mock data in Python with the Faker library&lt;/h2&gt;
&lt;p&gt;If you need to simulate mock data, the &lt;code&gt;Faker&lt;/code&gt; 
&lt;a href=&#34;https://github.com/joke2k/faker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;library&lt;/a&gt; is a great resource. Shout out to 
&lt;a href=&#34;https://twitter.com/joke2k&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@joke2k&lt;/a&gt; for maintaining this project.&lt;/p&gt;
&lt;p&gt;The full code for a recent project is below, with breakdown of each section to follow. Project context: Utilizing MongoDB as our NoSQL database. I&amp;rsquo;ve created a basic document (json) and now need to replicate multiple documents to simulate data once it&amp;rsquo;s populated with data from the frontend (or a Bot for this project specifically).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from json import dumps
from faker import Faker
import collections

database = []
filename = &#39;testing_bounty&#39;
length = 5
fake = Faker()

# fake.word(ext_word_list=)
random_currencies = [&#39;BANK&#39;, &#39;ETH&#39;, &#39;BTC&#39;]

random_guilds = [&amp;quot;Marketing Guild&amp;quot;, &amp;quot;Treasury Guild&amp;quot;,
                 &amp;quot;Developer&#39;s Guild&amp;quot;, &amp;quot;Analytics Guild&amp;quot;, &amp;quot;Writer&#39;s Guild&amp;quot;]

discord_handle = [&amp;quot;@bob#8888&amp;quot;, &amp;quot;@alice#1234&amp;quot;,
                  &amp;quot;@carol#5555&amp;quot;, &amp;quot;@delta#2222&amp;quot;, &amp;quot;@lambda#3333&amp;quot;]

bounty_status = [&#39;Open&#39;, &#39;Draft&#39;, &#39;In-Progress&#39;,
                 &#39;In-Review&#39;, &#39;Completed&#39;, &#39;Deleted&#39;]

skills = [&amp;quot;writing&amp;quot;,
          &amp;quot;design&amp;quot;,
          &amp;quot;software development&amp;quot;,
          &amp;quot;strategic planning&amp;quot;,
          &amp;quot;data analysis&amp;quot;,
          &amp;quot;grant writing&amp;quot;,
          &amp;quot;proposal development&amp;quot;,
          &amp;quot;team building&amp;quot;,
          &amp;quot;marketing&amp;quot;]

for x in range(length):
    database.append(collections.OrderedDict([
        (&#39;season&#39;, fake.random_int(0, 10)),
        (&#39;bounty&#39;, fake.sentence()),
        (&#39;bountyDescription&#39;, fake.sentence()),
        (&#39;doneCriteria&#39;, fake.sentence()),
        (&#39;bountyReward&#39;, collections.OrderedDict([
            (&#39;currency&#39;, fake.word(ext_word_list=random_currencies)),
            (&#39;amount&#39;, fake.random_int(0, 50000))
        ])),
        # list of dictionaries
        (&#39;applicableGuilds&#39;, [collections.OrderedDict(
            [(&#39;guildName&#39;, fake.word(ext_word_list=random_guilds))]), collections.OrderedDict([(&#39;guildName&#39;, fake.word(ext_word_list=random_guilds))])]),
        (&#39;bountyCreatedBy&#39;, collections.OrderedDict([
            (&#39;isDaoMember&#39;, fake.pybool()),
            (&#39;guildName&#39;, fake.word(ext_word_list=random_guilds)),
            (&#39;discordHandle&#39;, fake.word(ext_word_list=discord_handle)),
            (&#39;publicAddress&#39;, &amp;quot;0x2d94aa3e47d9d5024503ca8&amp;quot; + fake.pystr())
        ])),
        (&#39;bountyCreatedAt&#39;, fake.date_between(start_date=&#39;today&#39;, end_date=&#39;+3m&#39;)),
        (&#39;bountyDueAt&#39;, fake.date_between(start_date=&#39;today&#39;, end_date=&#39;+1y&#39;)),
        (&#39;bountyActivatedAt&#39;, fake.date_between(
            start_date=&#39;today&#39;, end_date=&#39;+6m&#39;)),
        (&#39;bountyClaimedBy&#39;, collections.OrderedDict([
            (&#39;guildName&#39;, fake.word(ext_word_list=random_guilds)),
            (&#39;discordHandle&#39;, fake.word(ext_word_list=discord_handle)),
            (&#39;publicAddress&#39;, &amp;quot;0x2d94aa3e47d9d5024503ca8&amp;quot; + fake.pystr())
        ])),
        (&#39;bountyClaimedAt&#39;, fake.date_between(start_date=&#39;today&#39;, end_date=&#39;+4m&#39;)),
        (&#39;bountySubmittedBy&#39;, fake.word(ext_word_list=random_guilds)),
        (&#39;bountySubmittedAt&#39;, fake.date_between(
            start_date=&#39;today&#39;, end_date=&#39;+11m&#39;)),
        (&#39;bountySubmissionLink&#39;, &amp;quot;www.&amp;quot; + fake.safe_domain_name()),
        # list of dictionaries
        (&#39;bountyStatus&#39;, [collections.OrderedDict([
            (&#39;status&#39;, fake.word(ext_word_list=bounty_status)),
            (&#39;bountyStatusTime&#39;, fake.date_between(
                start_date=&#39;today&#39;, end_date=&#39;+1y&#39;))
        ])]),
        (&#39;bountyHash&#39;, fake.md5(raw_output=False)),
        # list of words
        (&#39;skillsRequired&#39;, [fake.word(ext_word_list=skills),
                            fake.word(ext_word_list=skills)])
    ]))

with open(&#39;%s.json&#39; % filename, &#39;w&#39;) as output:
    # turns date_between into string, circumvent json serialization
    output.write(dumps(database, indent=4, sort_keys=False, default=str))
print(&amp;quot;Done.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s a breakdown, section-by-section:&lt;/p&gt;
&lt;p&gt;Since we&amp;rsquo;ll be creating mock json data, the &lt;code&gt;json&lt;/code&gt; built-in library is imported (specifically &lt;code&gt;dumps&lt;/code&gt;), the &lt;code&gt;Faker&lt;/code&gt; library is the main tool and we&amp;rsquo;ll also be using &lt;code&gt;OrderedDict&lt;/code&gt; from &lt;code&gt;collections&lt;/code&gt; to create document objects.&lt;/p&gt;
&lt;p&gt;Database is set to an empty array which will store the json object (&lt;code&gt;OrderedDict&lt;/code&gt;). We&amp;rsquo;ll save the file that we eventually write as &lt;code&gt;testing_bounty&lt;/code&gt; and keep it a short length (5), while we&amp;rsquo;re still testing.&lt;/p&gt;
&lt;p&gt;Finally, we initialize the &lt;code&gt;Faker&lt;/code&gt; library by calling the Faker function and setting to &lt;code&gt;fake&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from json import dumps
from faker import Faker
import collections

database = []
filename = &#39;testing_bounty&#39;
length = 5
fake = Faker()   &amp;lt;--- important
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This next section save a list of words that pertinent to our project in lists. As we create mock json objects, for certain fields, we&amp;rsquo;ll want to populate from a sample of &lt;strong&gt;keywords&lt;/strong&gt; that&amp;rsquo;s important for our project.&lt;/p&gt;
&lt;p&gt;Without these keywords, we&amp;rsquo;ll need to rely on random words/sentences that comes with the &lt;code&gt;Faker&lt;/code&gt; library and that may not always be appropriate for our context.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# fake.word(ext_word_list=)
random_currencies = [&#39;BANK&#39;, &#39;ETH&#39;, &#39;BTC&#39;]

random_guilds = [&amp;quot;Marketing Guild&amp;quot;, &amp;quot;Treasury Guild&amp;quot;,
                 &amp;quot;Developer&#39;s Guild&amp;quot;, &amp;quot;Analytics Guild&amp;quot;, &amp;quot;Writer&#39;s Guild&amp;quot;]

discord_handle = [&amp;quot;@bob#8888&amp;quot;, &amp;quot;@alice#1234&amp;quot;,
                  &amp;quot;@carol#5555&amp;quot;, &amp;quot;@delta#2222&amp;quot;, &amp;quot;@lambda#3333&amp;quot;]

bounty_status = [&#39;Open&#39;, &#39;Draft&#39;, &#39;In-Progress&#39;,
                 &#39;In-Review&#39;, &#39;Completed&#39;, &#39;Deleted&#39;]

skills = [&amp;quot;writing&amp;quot;,
          &amp;quot;design&amp;quot;,
          &amp;quot;software development&amp;quot;,
          &amp;quot;strategic planning&amp;quot;,
          &amp;quot;data analysis&amp;quot;,
          &amp;quot;grant writing&amp;quot;,
          &amp;quot;proposal development&amp;quot;,
          &amp;quot;team building&amp;quot;,
          &amp;quot;marketing&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This next section is where we create a number of json objects, specified by length. Everything is pushed into an &lt;code&gt;collections.OrderedDict&lt;/code&gt; and in some cases, we have nested data.&lt;/p&gt;
&lt;p&gt;Most of the fields are typical &lt;code&gt;key-value&lt;/code&gt; pairs. There are variations in the &lt;code&gt;values&lt;/code&gt;, including:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;strings (&lt;code&gt;fake.sentence()&lt;/code&gt;, &lt;code&gt;fake.word()&lt;/code&gt;, &lt;code&gt;fake.pystr()&lt;/code&gt;); you can sample from list of words created above&lt;/li&gt;
&lt;li&gt;integers (&lt;code&gt;fake.random_int()&lt;/code&gt;); you can randomize within a range of integers&lt;/li&gt;
&lt;li&gt;dates (&lt;code&gt;fake.date_between&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;boolean (&lt;code&gt;fake.pybool&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;dictionaries / json object (&lt;code&gt;collections.OrderedDict&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;list of dictionaries, enclose within &lt;code&gt;[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;list of strings&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;
for x in range(length):
    database.append(collections.OrderedDict([
        (&#39;season&#39;, fake.random_int(0, 10)),
        (&#39;bounty&#39;, fake.sentence()),
        (&#39;bountyDescription&#39;, fake.sentence()),
        (&#39;doneCriteria&#39;, fake.sentence()),
        (&#39;bountyReward&#39;, collections.OrderedDict([
            (&#39;currency&#39;, fake.word(ext_word_list=random_currencies)),
            (&#39;amount&#39;, fake.random_int(0, 50000))
        ])),
        # list of dictionaries
        (&#39;applicableGuilds&#39;, [collections.OrderedDict(
            [(&#39;guildName&#39;, fake.word(ext_word_list=random_guilds))]), collections.OrderedDict([(&#39;guildName&#39;, fake.word(ext_word_list=random_guilds))])]),
        (&#39;bountyCreatedBy&#39;, collections.OrderedDict([
            (&#39;isDaoMember&#39;, fake.pybool()),
            (&#39;guildName&#39;, fake.word(ext_word_list=random_guilds)),
            (&#39;discordHandle&#39;, fake.word(ext_word_list=discord_handle)),
            (&#39;publicAddress&#39;, &amp;quot;0x2d94aa3e47d9d5024503ca8&amp;quot; + fake.pystr())
        ])),
        (&#39;bountyCreatedAt&#39;, fake.date_between(start_date=&#39;today&#39;, end_date=&#39;+3m&#39;)),
        (&#39;bountyDueAt&#39;, fake.date_between(start_date=&#39;today&#39;, end_date=&#39;+1y&#39;)),
        (&#39;bountyActivatedAt&#39;, fake.date_between(
            start_date=&#39;today&#39;, end_date=&#39;+6m&#39;)),
        (&#39;bountyClaimedBy&#39;, collections.OrderedDict([
            (&#39;guildName&#39;, fake.word(ext_word_list=random_guilds)),
            (&#39;discordHandle&#39;, fake.word(ext_word_list=discord_handle)),
            (&#39;publicAddress&#39;, &amp;quot;0x2d94aa3e47d9d5024503ca8&amp;quot; + fake.pystr())
        ])),
        (&#39;bountyClaimedAt&#39;, fake.date_between(start_date=&#39;today&#39;, end_date=&#39;+4m&#39;)),
        (&#39;bountySubmittedBy&#39;, fake.word(ext_word_list=random_guilds)),
        (&#39;bountySubmittedAt&#39;, fake.date_between(
            start_date=&#39;today&#39;, end_date=&#39;+11m&#39;)),
        (&#39;bountySubmissionLink&#39;, &amp;quot;www.&amp;quot; + fake.safe_domain_name()),
        # list of dictionaries
        (&#39;bountyStatus&#39;, [collections.OrderedDict([
            (&#39;status&#39;, fake.word(ext_word_list=bounty_status)),
            (&#39;bountyStatusTime&#39;, fake.date_between(
                start_date=&#39;today&#39;, end_date=&#39;+1y&#39;))
        ])]),
        (&#39;bountyHash&#39;, fake.md5(raw_output=False)),
        # list of words
        (&#39;skillsRequired&#39;, [fake.word(ext_word_list=skills),
                            fake.word(ext_word_list=skills)])
    ]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we run our script, we&amp;rsquo;ll want to save and serialize the &lt;code&gt;OrderedDict&lt;/code&gt; in a json file. We also want to enclose our dates in strings to avoid getting a &lt;code&gt;json serialization error&lt;/code&gt;; this is done by setting the parameters of &lt;code&gt;output.write()&lt;/code&gt; to &lt;code&gt;default=str&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with open(&#39;%s.json&#39; % filename, &#39;w&#39;) as output:
    # turns date_between into string, circumvent json serialization
    output.write(dumps(database, indent=4, sort_keys=False, default=str))
print(&amp;quot;Done.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Git Stash vs Git Commit</title>
      <link>/technical_notes/example_tech/git_stash/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/git_stash/</guid>
      <description>&lt;h2 id=&#34;understanding-git-stash-vs-git-commit&#34;&gt;Understanding Git Stash vs Git Commit&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;: You&amp;rsquo;re on a feature branch and you want to switch to another branch, but there could be conflicts between a file that was edited on a current branch and the destination branch you&amp;rsquo;re switching &lt;em&gt;into&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This only happens because git tries to preserve your unstashed/unstaged changes across branches.&lt;/p&gt;
&lt;p&gt;Your choices are to &lt;code&gt;commit&lt;/code&gt; or &lt;code&gt;stash&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the future, you can run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git restore name-of-conflicting-fie&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and if its a file that &lt;em&gt;should be tracked&lt;/em&gt;, you can run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; (but no need to run &lt;code&gt;git push&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt; to save the changes on name-of-conflicting-fie for future retrieval. When you need to apply the changes, you can run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git stash apply&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; adds a commit to your local environment. Local is just for you - no one else can see that you&amp;rsquo;ve added a commit. They can only see that you&amp;rsquo;ve added a commit once you push the commit to a repo, which is what happened when you ran:
&lt;code&gt;git push origin branch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push&lt;/code&gt; takes your local commit and adds the new commit to the remote repo referenced by origin and the branch specified in &lt;code&gt;branch&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up Poetry for Dependency Management</title>
      <link>/technical_notes/example_tech/python_poetry/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_poetry/</guid>
      <description>&lt;h2 id=&#34;setting-up-poetry-for-dependency-management&#34;&gt;Setting up Poetry for Dependency Management&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://python-poetry.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Poetry&lt;/a&gt; is python packaging and dependency management made easy.&lt;/p&gt;
&lt;h4 id=&#34;poetry-install-script&#34;&gt;Poetry Install Script&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;$ curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sample-project&#34;&gt;Sample Project&lt;/h2&gt;
&lt;h4 id=&#34;create-sample-project&#34;&gt;Create Sample Project&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;$ poetry new how-long
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;creating-virtual-environment&#34;&gt;Creating virtual environment&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is done only &lt;strong&gt;once&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;$ poetry config virtualenvs.in-project true
$ poetry install
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;launch-virtual-environment&#34;&gt;Launch virtual environment&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;$ poetry shell 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;uninstall-virtual-environment&#34;&gt;Uninstall virtual environment&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;$ poetry env remove 3.x
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;existing-project&#34;&gt;Existing Project&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Switch to master branch (if not already on)&lt;/li&gt;
&lt;li&gt;git status&lt;/li&gt;
&lt;li&gt;git pull&lt;/li&gt;
&lt;li&gt;git checkout -b new_branch_name&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Assume that &lt;code&gt;poetry config virtualenvs.in-project true&lt;/code&gt; has been run.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;$ poetry install
$ poetry shell 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check &lt;code&gt;python&lt;/code&gt; environment.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing a git commit message</title>
      <link>/technical_notes/example_tech/git_commit_message/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/git_commit_message/</guid>
      <description>&lt;h2 id=&#34;git-commit-messages&#34;&gt;Git commit messages&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;: You&amp;rsquo;ve merged a branch to master/main and you get this message. See 
&lt;a href=&#34;https://stackoverflow.com/questions/19085807/please-enter-a-commit-message-to-explain-why-this-merge-is-necessary-especially&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;original stackoverflow&lt;/a&gt; question for more context:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please enter a commit message to explain why this merge is necessary,
especially if it merges an updated upstream into a topic branch.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You try typing a message or hitting enter or escaping and &lt;strong&gt;nothing&lt;/strong&gt; happens.
This is &lt;strong&gt;not&lt;/strong&gt; an error message. Git is using your default editor. Here&amp;rsquo;s what to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;press &amp;ldquo;i&amp;rdquo; (i for insert)&lt;/li&gt;
&lt;li&gt;write your merge message&lt;/li&gt;
&lt;li&gt;press &amp;ldquo;esc&amp;rdquo; (escape)&lt;/li&gt;
&lt;li&gt;write &amp;ldquo;:wq&amp;rdquo; (write &amp;amp; quite)&lt;/li&gt;
&lt;li&gt;then press enter&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Setting up Conda Virtual Env and IPython</title>
      <link>/technical_notes/example_tech/python_virtualenv/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_virtualenv/</guid>
      <description>&lt;h2 id=&#34;virtual-environment-best-practices&#34;&gt;Virtual Environment Best Practices&lt;/h2&gt;
&lt;p&gt;NOTE: This is from chapter 2 of Joel Grus&#39; &amp;lsquo;Data Science from Scratch&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;Joel&amp;rsquo;s a known 
&lt;a href=&#34;https://www.youtube.com/watch?v=7jiPeIFXb6U&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;opponent of notebooks&lt;/a&gt; and recommends operating in IPython instead.&lt;/p&gt;
&lt;p&gt;I was pleasantly surprised that the process of setting up a virtual environment and IPython was relatively painless. Here&amp;rsquo;s my process, taken from the book with some tweaks:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# create a Python 3.6 environment named &#39;dsfs&#39;
conda create -n dsfs python=3.6

# update conda to latest version (4.9.0)
conda update -n base -c defaults conda

# to activate virtual environment (named it &#39;dsfs&#39; to keep it simple)
source activate dsfs

# install pip (note: currently using Python 3.8.5)
python3 get-pip.py

# install IPython 
python3 -m pip install ipython

# save IPython session
# save lines 1-21 in session to file initial_ipython_session.py
%save initial_ipython_session 1-21

# exit IPython
ctrl + D

# exit conda virtual environment
conda deactivate

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;pulling-up-a-saved-ipython-session-in-vscode&#34;&gt;Pulling up a saved IPython session in VSCode&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: I am using VSCode as my main python IDE outside of &lt;code&gt;jupyter notebooks&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After you&amp;rsquo;ve saved an IPython session (see above), you may want to pull up the &lt;code&gt;.py&lt;/code&gt; file for further edits at a later time. To do this, you&amp;rsquo;ll need to ensure that the &lt;code&gt;code&lt;/code&gt; command for VSCode is installed.&lt;/p&gt;
&lt;p&gt;Assuming you&amp;rsquo;re already &lt;em&gt;in&lt;/em&gt; VSCode, 
&lt;a href=&#34;https://stackoverflow.com/questions/30065227/run-open-vscode-from-mac-terminal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;press&lt;/a&gt; (I&amp;rsquo;m using macOS):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Command + Shift + P
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then select &lt;code&gt;Shell Command: Install code in PATH&lt;/code&gt;. That&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;To open a previously saved &lt;code&gt;IPython&lt;/code&gt; session in VSCode from the VSCode terminal, type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% code name_of_file.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this can be done from (base) or from a previously configured virtual environment session, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(base) paulapivat@Pauls-MacBook dsfs % code function_session.py
(base) paulapivat@Pauls-MacBook dsfs % source activate dsfs
(dsfs) paulapivat@Pauls-MacBook dsfs % code function_session.py
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating and Looping through DataFrames</title>
      <link>/technical_notes/example_tech/python_tip2/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_tip2/</guid>
      <description>&lt;h2 id=&#34;creating-and-looping-through-list-of-tuples&#34;&gt;Creating and Looping through List of Tuples&lt;/h2&gt;
&lt;p&gt;If you come to Python from R, it&amp;rsquo;s not immediately obvious how Lists, Dictionaries, Tuples, Series, then Loops help you do the things you can do in R.&lt;/p&gt;
&lt;p&gt;You can begin to connect the dots when you see that Lists of Tuples are the building blocks of DataFrames - available in both languages to handle tidy (tabular) data.&lt;/p&gt;
&lt;h1 id=&#34;lists&#34;&gt;Lists&lt;/h1&gt;
&lt;p&gt;Lists are ordered and mutable collection of data. Below are lists of strings and integers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name_list = [&#39;paul&#39;, &#39;apivat&#39;, &#39;marvin&#39;, &#39;pim&#39;, &#39;milin&#39;]
int_list = [3,4,5,2,5,6,7,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;tuples&#34;&gt;Tuples&lt;/h1&gt;
&lt;p&gt;Tuples, also collections, are ordered and immutable. But more related to the handling of data, tuples can be converted to DataFrames (using the Pandas library). Below, the List of Tuples (data) is converted into a DataFrame.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import pandas as pd

data = [
    (&#39;r1&#39;, &#39;c1&#39;, 11, 11),
    (&#39;r1&#39;, &#39;c2&#39;, 12, 12),
    (&#39;r2&#39;, &#39;c1&#39;, 21, 21),
    (&#39;r2&#39;, &#39;c2&#39;, 22, 22)
]

df = pd.DataFrame(data, columns=[&#39;R_Number&#39;, &#39;C_Number&#39;, &#39;Avg&#39;, &#39;Std&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;loops&#34;&gt;Loops&lt;/h1&gt;
&lt;p&gt;You can loop through lists of strings and integers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int_list = [3,4,5,2,5,6,7,5]

for num in int_list:
    print(num)
    
name_list = [&#39;paul&#39;, &#39;apivat&#39;, &#39;marvin&#39;, &#39;pim&#39;, &#39;milin&#39;]

for name in name_list:
    print(name)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;looping-through-list-of-tuples-dataframe&#34;&gt;Looping through List of Tuples (DataFrame)&lt;/h1&gt;
&lt;p&gt;Just like you can loop through &lt;em&gt;any&lt;/em&gt; collection, you can loop through a list of tuples - which means you can loop through DataFrames.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Looping through column names
df = pd.DataFrame(data, columns=[&#39;R_Number&#39;, &#39;C_Number&#39;, &#39;Avg&#39;, &#39;Std&#39;])

for col_names in df:
    print(col_names)
    
# Looping through a specific column
for items in df[&#39;R_Number&#39;]:
    print(items)
    
# Looping through a specific row
for items in df.iloc[1]:
    print(items)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s the basic connection between python fundamental data structures and for-loop operations and data science.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Random Numbers &amp; Reproducibility in Python</title>
      <link>/technical_notes/example_tech/python_reproducibility/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_reproducibility/</guid>
      <description>&lt;h2 id=&#34;random-numbers-with-numpy&#34;&gt;Random Numbers with Numpy&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Numpy&lt;/code&gt; has a sub-module called &lt;code&gt;random&lt;/code&gt;. Technically both are of the &amp;lsquo;module&amp;rsquo; class. &lt;code&gt;numpy.random&lt;/code&gt; contains other methods like: &lt;code&gt;seed&lt;/code&gt;, &lt;code&gt;set_state&lt;/code&gt;, &lt;code&gt;standard_t&lt;/code&gt; etc.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Submodules

import numpy

print(&amp;quot;numpy.random is a&amp;quot;, type(numpy.random))
print(&amp;quot;numpy is a&amp;quot;, type(numpy))
print(&amp;quot;it contains names such as...&amp;quot;, dir(numpy.random)[-15:])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reproducibility&#34;&gt;Reproducibility&lt;/h2&gt;
&lt;p&gt;When using &lt;code&gt;numpy.random&lt;/code&gt;, you can ensure reproducibility by accessing &lt;code&gt;numpy.random.seed(30)&lt;/code&gt;, which mirrors #Rstats&#39; &lt;code&gt;set.seed(30)&lt;/code&gt; behavior.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import random

numpy.random.seed(30)
rolls = numpy.random.randint(low=1, high=6, size=10)
rolls
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Connecting BigQuery to Google Data Studio [Basic Setup]</title>
      <link>/technical_notes/example_tech/google_cloud_tip1/</link>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/google_cloud_tip1/</guid>
      <description>&lt;h2 id=&#34;steps-for-connecting-bigquery-to-data-studio&#34;&gt;Steps for Connecting BigQuery to Data Studio&lt;/h2&gt;
&lt;p&gt;This note outlines the basic steps required to generate charts in Google Data Studio, specifically pulling data from BigQuery.&lt;/p&gt;
&lt;h1 id=&#34;bigquery&#34;&gt;BigQuery&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;The starting point is to generate a query in BigQuery&lt;/li&gt;
&lt;li&gt;Once a query is created, click &lt;strong&gt;Save Results&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In the pop-up window, a prompt: &amp;ldquo;choose where to save the results data from the query&amp;rdquo;, save result as BigQuery Table&lt;/li&gt;
&lt;li&gt;Set project name (i.e., jobsbot)&lt;/li&gt;
&lt;li&gt;Set dataset name (i.e., internalmongo)&lt;/li&gt;
&lt;li&gt;Create table name, for the specific query (i.e., jobfieldname_ranking)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;google-data-studio&#34;&gt;Google Data Studio&lt;/h1&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Click Add Data&lt;/li&gt;
&lt;li&gt;Find BigQuery in Google Connectors&lt;/li&gt;
&lt;li&gt;Locate saved query table (see above) (i.e., My Projects &amp;gt; jobsbot (project) &amp;gt; internalmongo (dataset) &amp;gt; jobfieldname_ranking (table/specific query))&lt;/li&gt;
&lt;li&gt;Click Add&lt;/li&gt;
&lt;li&gt;Select &amp;lsquo;Add a Chart&amp;rsquo; (note: could be Table or Chart style)&lt;/li&gt;
&lt;li&gt;Optional: copy/paste Table to create a companion Chart for table&lt;/li&gt;
&lt;li&gt;Select Table; in Data Menu, select Metric, &amp;lsquo;Add Metric&amp;rsquo; to swap out generic default Report Count (for more informative data generated from the query)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Python Setup Options</title>
      <link>/technical_notes/example_tech/python_tip1/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_tip1/</guid>
      <description>&lt;h2 id=&#34;setting-up-python-for-r-users&#34;&gt;Setting up Python for R Users&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve recently started #66DaysOfData and will be using this opportunity to make some headway into the world of Python. It&amp;rsquo;s reputation for having a complex, at times frustrating, setup process precedes itself and is probably warranted. That said, here are some tips to minimize that.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my current OS environment. Mac users will have an older version of Python that comes with the computer, you can type &lt;code&gt;python --version&lt;/code&gt; into your terminal to find out. Here&amp;rsquo;s mine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;macOS Catalina version 10.15.5
Python 2.7.16
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;python-2-vs-python-3&#34;&gt;Python 2 vs Python 3&lt;/h1&gt;
&lt;p&gt;There appears to be general consensus for anyone starting out in Python that you&amp;rsquo;ll want Python 3. There&amp;rsquo;s no debate here. Just get Python 3. I found the easiest way to go to Python Release for Mac OS X, which as of this writing is Python 3.8.5 and use the 
&lt;a href=&#34;https://www.python.org/downloads/release/python-385/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;macOS 64-bit installer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once installed, you&amp;rsquo;ll want to check.&lt;/p&gt;
&lt;p&gt;Instead of &lt;code&gt;python --version&lt;/code&gt;, which checks Python 2, you&amp;rsquo;ll use &lt;code&gt;python3 --version&lt;/code&gt;. This implies that Python 3 isn&amp;rsquo;t merely a &amp;ldquo;newer&amp;rdquo; version of Python, but that they are completely different categories.&lt;/p&gt;
&lt;h1 id=&#34;anaconda&#34;&gt;Anaconda&lt;/h1&gt;
&lt;p&gt;While this isn&amp;rsquo;t my first choice of development environment, it is the first option that allowed me to get coding in Python the fastest.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll download the 
&lt;a href=&#34;https://www.anaconda.com/products/individual&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Individual Edition&lt;/a&gt; of the Anaconda, open-source platform. You&amp;rsquo;ll download the application for your desktop and you&amp;rsquo;ll find &lt;code&gt;Anaconda-Navigator&lt;/code&gt; in your list of applications (or where ever you chose to place your newly installed application).&lt;/p&gt;
&lt;p&gt;NOTE: Shortly after installing and using, the Desktop version of Anaconda froze and I had a difficult time even &amp;ldquo;Force Quitting&amp;rdquo; it, so my preferred method of launching Anaconda Navigator is to open the mac terminal and type in the command &lt;code&gt;anaconda-navigator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The navigator supports &lt;code&gt;Jupyter Notebooks&lt;/code&gt;, &lt;code&gt;PyCharm&lt;/code&gt; and even &lt;code&gt;RStudio&lt;/code&gt; among other environments.&lt;/p&gt;
&lt;p&gt;I will be using &lt;code&gt;Jupyter Notebooks&lt;/code&gt; while I get acclimated to Python, but ultimately i&amp;rsquo;m looking for interoperability with #Rstats.&lt;/p&gt;
&lt;h1 id=&#34;reticulate&#34;&gt;Reticulate&lt;/h1&gt;
&lt;p&gt;This is an &lt;code&gt;R package&lt;/code&gt; that allows you to run &lt;code&gt;Python&lt;/code&gt; code in &lt;code&gt;R&lt;/code&gt; environments. The feature I am looking forward to using is the &lt;code&gt;R Markdown&lt;/code&gt; document that allows me to run chunks of python code.&lt;/p&gt;
&lt;p&gt;Work-in-Progress: TBD&lt;/p&gt;
&lt;h1 id=&#34;vscode&#34;&gt;VSCode&lt;/h1&gt;
&lt;p&gt;This is another popular IDE with widely used Python Extension.&lt;/p&gt;
&lt;p&gt;Work-in-Progress: TBD&lt;/p&gt;
&lt;h1 id=&#34;pycharm&#34;&gt;PyCharm&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve heard this IDE most closely resembles RStudio in ease of use.&lt;/p&gt;
&lt;p&gt;Work-in-Progress: TBD&lt;/p&gt;
&lt;h1 id=&#34;spyder&#34;&gt;Spyder&lt;/h1&gt;
&lt;p&gt;This appears to be close approximation of the functionality in RStudio.&lt;/p&gt;
&lt;p&gt;Work-in-Progress: TBD&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Page 1</title>
      <link>/courses/example/example1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/example/example1/</guid>
      <description>&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;
&lt;h2 id=&#34;tip-1&#34;&gt;Tip 1&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
&lt;h2 id=&#34;tip-2&#34;&gt;Tip 2&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Technical Notes Page 1</title>
      <link>/technical_notes/example_tech/technical_notes1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/technical_notes1/</guid>
      <description>&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;
&lt;h2 id=&#34;technical-tip-1&#34;&gt;Technical Tip 1&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
&lt;h2 id=&#34;technical-tip-2&#34;&gt;Technical Tip 2&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SQL Scripts to check for duplicates</title>
      <link>/technical_notes/example_tech/sql_check_duplicates/</link>
      <pubDate>Thu, 10 Mar 2022 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/sql_check_duplicates/</guid>
      <description>&lt;h2 id=&#34;check-for-duplicate-rows-in-a-table&#34;&gt;Check for Duplicate Rows in a Table&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: When running a data pipeline, it is often easier to check for data duplicates &lt;em&gt;after load&lt;/em&gt; rather than during &lt;em&gt;extract&lt;/em&gt; or &lt;em&gt;transform&lt;/em&gt; (ETL).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;: The script below checks for the &lt;code&gt;subgraph_bank_transactions&lt;/code&gt; table, a pipeline that pulls in data from the $BANK token subgraph into a postgres database. This is part of the DAODash project.&lt;/p&gt;
&lt;h3 id=&#34;approach-1-id-has-duplicates&#34;&gt;Approach 1: &lt;code&gt;id&lt;/code&gt; has duplicates&lt;/h3&gt;
&lt;p&gt;If the &lt;code&gt;query returned no data&lt;/code&gt;, that means there are no duplicates.&lt;/p&gt;
&lt;p&gt;In this case, &lt;code&gt;id&lt;/code&gt; &lt;em&gt;does&lt;/em&gt; have duplicates.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;SELECT
  id,
  COUNT(id)
FROM subgraph_bank_transactions 
GROUP BY id
HAVING COUNT(id) &amp;gt; 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;32165&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31561&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32657&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;approach-1a-graph_id-does-not-have-duplicates&#34;&gt;Approach 1a: &lt;code&gt;graph_id&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; have duplicates&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;SELECT
  graph_id,
  COUNT(graph_id)
FROM subgraph_bank_transactions 
GROUP BY graph_id
HAVING COUNT(graph_id) &amp;gt; 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Result: &lt;code&gt;The query returned no data&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;approach-2&#34;&gt;Approach 2&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;SELECT 
  a.*
FROM subgraph_bank_transactions a
JOIN (SELECT id, graph_id, amount_display, COUNT(*)
      FROM subgraph_bank_transactions 
      GROUP BY id, graph_id, amount_display
      HAVING COUNT(*) &amp;gt; 1) b 
ON a.id = b.id
AND a.graph_id = b.graph_id
AND a.amount_display = b.amount_display 
ORDER BY a.id

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Sources&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://learnsql.com/cookbook/how-to-find-duplicate-rows-in-sql/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Learnsql.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://chartio.com/learn/databases/how-to-find-duplicate-values-in-a-sql-table/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chartio Data Tutorials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For more content on web3 data 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Method to retrieve latest document</title>
      <link>/technical_notes/example_tech/mongodb_retrieve_latest_document/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_retrieve_latest_document/</guid>
      <description>&lt;h2 id=&#34;method-1-query-collection-for-latest-document&#34;&gt;Method 1: Query collection for latest document&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: To get the first document in a collection, the default &lt;code&gt;findOne()&lt;/code&gt; or &lt;code&gt;find_one()&lt;/code&gt; function works. However, how do we get the &lt;em&gt;latest&lt;/em&gt; document?&lt;/p&gt;
&lt;p&gt;There are several approaches, but I think this one is the simplest:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# first get the total number of documents in the collection
db.collection.count()

# Then use skip()
db.collection.find().skip(db.collection.count() - 1).pretty()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;heres-the-implementation-in-python&#34;&gt;Here&amp;rsquo;s the implementation in Python&lt;/h3&gt;
&lt;p&gt;The example is taken from the 
&lt;a href=&#34;https://twitter.com/daobountyboard&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bounty Board project&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# find latest document to inspect

# client is a dictionary of databases
db = client[&#39;bountyboard&#39;]

# collections are attributes of databases
bounties_col = db[&#39;bounties&#39;]


latest_bounties_doc = bounties_col.find().skip(n_bounties - 1)

print(list(latest_bounties_doc)[0].keys())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Postgres DB Connection with Python</title>
      <link>/technical_notes/example_tech/database_connection_python/</link>
      <pubDate>Sat, 26 Feb 2022 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/database_connection_python/</guid>
      <description>&lt;h2 id=&#34;postgres-database-connection&#34;&gt;Postgres Database Connection&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: In this example, we&amp;rsquo;ll use Python, SQLAlchemy to connect to a Postgres database. Moreover, we&amp;rsquo;ll use Python context managers for cleaner 
&lt;a href=&#34;https://paulapivat.com/technical_notes/example_tech/python_functions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;functions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This example is from a &lt;strong&gt;DAODash pipeline&lt;/strong&gt; to update the &lt;code&gt;bank_subgraph_transactions&lt;/code&gt; table.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This example does not separate business logic from database connection, but has them in the same file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# libraries for postgres connection
import os
from sqlalchemy import create_engine
from sqlalchemy import text

# using python-dotenv to access environment variables
from dotenv import load_dotenv
load_dotenv()


# db_string = &#39;postgresql://user:password@localhost:port/mydatabase&#39;

db_string = os.environ.get(&#39;DB_STRING&#39;)

@contextlib.contextmanager
def get_postgres_conn(db_string):
    &amp;quot;&amp;quot;&amp;quot;description:
    Context manager to automatically close DB connection
    Retrieve credentials from environment variables (.env)
    yield: database connection
    note: close database connection
    &amp;quot;&amp;quot;&amp;quot;

    db = create_engine(db_string)

    yield db

    db.dispose()


# use get_postgres_conn context manager
# note: interaction w/ subgraph_bank_transactions table from postgres db
with get_postgres_conn(db_string) as conn:
    result = conn.execute(
        text(&amp;quot;SELECT MAX(tx_timestamp) AS max_tx_timestamp, MAX(id) AS max_id FROM subgraph_bank_transactions&amp;quot;)
    )
    for row in result:
        max_tx_timestamp = row.max_tx_timestamp
        max_id = row.max_id
        print(&amp;quot;new max_tx_timestamp: &amp;quot;, max_tx_timestamp)
        print(&amp;quot;new max_id: &amp;quot;, max_id)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on web3 data 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use pandas with SQL queries</title>
      <link>/technical_notes/example_tech/sql_and_pandas/</link>
      <pubDate>Wed, 16 Feb 2022 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/sql_and_pandas/</guid>
      <description>&lt;h2 id=&#34;pandas-and-sql&#34;&gt;Pandas and SQL&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You want to further manipulate SQL data in Python. You can use &lt;code&gt;SQLAlchemy&lt;/code&gt; and &lt;code&gt;pandas&lt;/code&gt; to achieve this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# Load Libraries
import pandas as pd
from sqlalchemy import create_engine

# for python-dotenv method
import os
from dotenv import load_dotenv   
load_dotenv()    

# db connection
sql_db_connection = os.environ.get(&amp;quot;SQL_DB_CONNECTION&amp;quot;)  # os.environ.get(&#39;postgres:///data.db&#39;)

# Create database engine
engine = create_engine(sql_db_connection)

# write query to get records with filter
query = &amp;quot;&amp;quot;&amp;quot;SELECT *
             FROM table 
            WHERE borough = &#39;BRONX&#39;
               OR borough = &#39;BROOKLYN&#39;
&amp;quot;&amp;quot;&amp;quot;

# query the database
bronx_query = pd.read_sql(query, engine)

print(bronx_query.unique())  # print distinct records
print(bronx_query.shape())   # print shape of data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data in web3 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get unique users, week-to-week</title>
      <link>/technical_notes/example_tech/mongodb_unique_id/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_unique_id/</guid>
      <description>&lt;h2 id=&#34;getting-unique-users&#34;&gt;Getting Unique Users&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You want to query both &lt;strong&gt;total&lt;/strong&gt; and &lt;strong&gt;unique&lt;/strong&gt; users on a week-to-week basis. Here&amp;rsquo;s an example with &lt;em&gt;unique creators&lt;/em&gt; of bounties.&lt;/p&gt;
&lt;p&gt;Change the MongoDB code for claimer, submitter and reviewer.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# Total and Unique Bounty Creators by Week
# Jan 1 - Jan 31, 2022
# NOTE: change MongoDB code with claimer, submitter or reviewer data
db.bounties.aggregate([
  {
    $match: {
      $and: [
        { customer_id: &amp;quot;8888888888888888&amp;quot; },
        { createdAt: { $gte: &amp;quot;2022-01-01&amp;quot; } },
        { createdAt: { $lt: &amp;quot;2022-02-01&amp;quot; } },
      ],
    },
  },
  {
    $project: {
      _id: 1,
      createdAt: { $toDate: &amp;quot;$createdAt&amp;quot; },
      &amp;quot;createdBy.discordHandle&amp;quot;: 1,
    },
  },
  {
    $group: {
      _id: { week: { $isoWeek: &amp;quot;$createdAt&amp;quot; } },
      num_creators: { $sum: 1 },
      unique_creators: { $addToSet: &amp;quot;$createdBy.discordHandle&amp;quot; },
    },
  },
]);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add comma separator in geom_text label</title>
      <link>/technical_notes/example_tech/rstats_viz_comma_geom_text/</link>
      <pubDate>Fri, 21 Jan 2022 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_viz_comma_geom_text/</guid>
      <description>&lt;h2 id=&#34;add-comma-separator-in-geom_text-label&#34;&gt;Add comma separator in geom_text label&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You want to create &lt;strong&gt;two y-axes&lt;/strong&gt;. The left y-axis measures an amount, while the &lt;em&gt;right&lt;/em&gt; y-axis converts the amount to a percentage.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;
df %&amp;gt;%
   ggplot(aes(x = var1, y = var2)) +
   geom_col() +
   geom_text(aes(label = scales::comma(Count_variable)), size = 15)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data, tech and web3 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sum variable by group</title>
      <link>/technical_notes/example_tech/rstats_tip_sum_var_group/</link>
      <pubDate>Fri, 21 Jan 2022 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_tip_sum_var_group/</guid>
      <description>&lt;h2 id=&#34;sum-variable-by-group&#34;&gt;Sum variable by group&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You want to sum by group. Assuming the dataframe has at least two columns, &lt;code&gt;category&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Check out 
&lt;a href=&#34;https://stackoverflow.com/questions/1660124/how-to-sum-a-variable-by-group&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;original answer&lt;/a&gt; on stack overflow.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;library(dplyr)

df %&amp;gt;%
   group_by(category) %&amp;gt;%
   summarise(summed_value = sum(value))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data, tech and web3 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manually insert data to database</title>
      <link>/technical_notes/example_tech/postgresql_insert_csv_to_db/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/postgresql_insert_csv_to_db/</guid>
      <description>&lt;h2 id=&#34;delete-a-table&#34;&gt;Delete a table&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: If you have a CSV file, you can manually load it into PostgreSQL through the pgAdmin client. This may require creating the data values in Excel first.&lt;/p&gt;
&lt;p&gt;First, you&amp;rsquo;d have to create a table with the right columns in pgAdmin before inserting data in.&lt;/p&gt;
&lt;p&gt;To create in Excel, you&amp;rsquo;d need a function to copy the values from the dataframe into a tuple of string values. Data is cut short to keep the example manageable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There needs to be a comma between columns below or else it throws an error. This example is for a table with 7 columns; your situation may differ.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# In Excel
=CONCATENATE(&amp;quot;(&#39;&amp;quot;,B2,&amp;quot;&#39;,&#39;&amp;quot;,C2,&amp;quot;&#39;,&#39;&amp;quot;,D2,&amp;quot;&#39;,&#39;&amp;quot;,E2,&amp;quot;&#39;,&#39;&amp;quot;,F2,&amp;quot;&#39;,&#39;&amp;quot;,G2,&amp;quot;&#39;,&#39;&amp;quot;,H2,&amp;quot;&#39;),&amp;quot;)


# sample tuple format
(&#39;0x7a250d5630b4cf539739df2c5dacb4c659f2488d&#39;,&#39;14897.1883870177&#39;,&#39;0x59c1349bc6f28a427e78ddb6130ec669c2f39b48&#39;,&#39;0x0f433138b2a8f2997ef387ffcebec7cd204ab2053c43f8d4a6efaa74eddc0e0c-23&#39;,&#39;1620159318&#39;,&#39;Tue, 04 May 2021 20:15:18 GMT&#39;),
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the data is prepped in Excel, you can manully paste into pgAdmin (note: can be error prone with 20,000+ rows). Data is cut short to keep the example manageable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;INSERT INTO public.table_to_insert(
        amount_display, from_address, id, timestamp, to_address)
        VALUES
        (&#39;14897.1883870177&#39;,&#39;0x59c1349bc6f28a427e78ddb6130ec669c2f39b48&#39;,&#39;0x0f433138b2a8f2997ef387ffcebec7cd204ab2053c43f8d4a6efaa74eddc0e0c-23&#39;,&#39;1620159318&#39;,&#39;Tue, 04 May 2021 20:15:18 GMT&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: this is similar to how it&amp;rsquo;s done using the &lt;code&gt;sqlalchemy&lt;/code&gt; library in python.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# Sending Multiple Parameters
with engine.connect() as conn:
    conn.execute(
        text(&amp;quot;INSERT INTO some_table (x, y) VALUES (:x, :y)&amp;quot;),
        [{&amp;quot;x&amp;quot;: 11, &amp;quot;y&amp;quot;: 12}, {&amp;quot;x&amp;quot;: 13, &amp;quot;y&amp;quot;: 14}]
    )
    conn.commit()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You have to &lt;code&gt;CREATE TABLE&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; you &lt;code&gt;INSERT INTO&lt;/code&gt;. Here&amp;rsquo;s a full example of creating a table in Postgres. The code is truncated to save time.&lt;/p&gt;
&lt;p&gt;Incidentally, you have to delete the table if you mistakenly created it in Postgres (use SQL commands to &lt;em&gt;Create&lt;/em&gt; the table.)&lt;/p&gt;
&lt;p&gt;NOTE: &lt;strong&gt;PGAdmin&lt;/strong&gt; is the client, but this should transfer across client.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# delete table (if needed)
DROP TABLE bankless_snapshot_header_1;

# create table before insert in postgres
CREATE TABLE IF NOT EXISTS bankless_snapshot_header_1 (
	id SERIAL,
	proposal_id VARCHAR(100),
	title VARCHAR(2000),
	start_date BIGINT,
	end_date BIGINT,
	PRIMARY KEY (proposal_id)
)

# insert data (copied from csv) to postgres
INSERT INTO bankless_snapshot_header_1(
	id, proposal_id, title, start_date, end_date)
	VALUES
	(&#39;0&#39;,&#39;QmdoixPMMT76vSt6ewkE87JZJywS1piYsGC3nJJpcrPXKS&#39;,&#39;Approve the Bankless DAO GenesisÂ¬â Proposal?&#39;,&#39;1620154800&#39;,&#39;1620414000&#39;),
(&#39;1&#39;,&#39;QmbCCAH3WbAFJS4FAUTvpWGmtgbaeMh1zoKgocdt3ZJmdr&#39;,&#39;What charity should CMS Holdings donate 100k towards? &#39;,&#39;1620327600&#39;,&#39;1620673200&#39;),
(&#39;2&#39;,&#39;QmYvsZ7AU2XyhpBL8g4QRQbLRX6uU3t5CHNdFQbs5r7ypJ&#39;,&#39;Badge Distribution for Second Airdrop&#39;,&#39;1620759600&#39;,&#39;1621018800&#39;),
(&#39;3&#39;,&#39;QmQX2DQcDTZzCpM6DTVNJutQJwWXtxJDTMpBoFjbnaM9i2&#39;,&#39;Reward Season 0 Active Members &#39;,&#39;1623196800&#39;,&#39;1623456000&#39;),
(&#39;4&#39;,&#39;QmXrfAHMoRcu5Vy3DsRTfokqLBTEKR6tqKVecLvkgw5NZf&#39;,&#39;Bankless DAO Season 1 &#39;,&#39;1623985200&#39;,&#39;1624590000&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Each row below &amp;ldquo;VALUES&amp;rdquo; is wrapped in a single parenthesis.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# Correct
INSERT INTO public.coordinape_rounds(
        id, coord_id, recipient_address, sender_address, recipient_id, sender_id, tokens, circle_id, epoch_id, timestamp)
        VALUES
        ()
        ()
        ()
        
# Incorrect
INSERT INTO public.coordinape_rounds(
        id, coord_id, recipient_address, sender_address, recipient_id, sender_id, tokens, circle_id, epoch_id, timestamp)
        VALUES
        (       # &amp;lt;--- not needed
        ()
        ()
        ()
        )       # &amp;lt;--- not needed
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;demo-2&#34;&gt;Demo 2&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;: For the Snapshot data pipeline, I had to create two pipes - one for proposals and one for votes. This is the process for votes, it&amp;rsquo;s similar, but there are differences:&lt;/p&gt;
&lt;p&gt;I initially set &lt;code&gt;FOREIGN KEY (proposal_id)&lt;/code&gt;, but got a syntax error, there&amp;rsquo;s a 
&lt;a href=&#34;https://www.postgresqltutorial.com/postgresql-foreign-key/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;specific way to set up foreign key constraints first&lt;/a&gt; before explicitly define foreign key during &lt;code&gt;CREATE TABLE&lt;/code&gt; events.&lt;/p&gt;
&lt;p&gt;Also, some rows at non-explicit null values (&#39;&#39;), so I had to manually go line-by-line to set to &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# Create Table in Postgresql

CREATE TABLE IF NOT EXISTS stg_bankless_snapshot_1(
	id SERIAL,
	vote_id VARCHAR(100),
	voter VARCHAR(100),
	created BIGINT,
	choice REAL,
	__typename VARCHAR(20),
	proposal_id VARCHAR(100)
)

# Insert data
INSERT INTO stg_bankless_snapshot_1(
	id, vote_id, voter, created, choice, __typename, proposal_id)
	VALUES
(&#39;0&#39;,&#39;QmQFvHkah7w2qAcY4iECn6THDbaypto8JVF5G6YQaneZRV&#39;,&#39;0xD00dF71434Cf40b2CDb65ff73bD9789933adA44A&#39;,&#39;1620413879&#39;,&#39;1&#39;,&#39;Vote&#39;,&#39;QmdoixPMMT76vSt6ewkE87JZJywS1piYsGC3nJJpcrPXKS&#39;),
(&#39;1&#39;,&#39;QmSS2x2xBRwTigXR5vucVp75FqCP5ns3CLYK3dLgNQonkC&#39;,&#39;0x910176D294AFA2cD017928cA92a0bf5a01152194&#39;,&#39;1620413347&#39;,&#39;1&#39;,&#39;Vote&#39;,&#39;QmdoixPMMT76vSt6ewkE87JZJywS1piYsGC3nJJpcrPXKS&#39;),
(&#39;2&#39;,&#39;QmSa7QFD3vsV6bhsfSKGW1tUtQyJk3umMTgVkFS1H8fnXJ&#39;,&#39;0x37bf9E28E099335DCec53a8b7FadeFDE6DbF108d&#39;,&#39;1620410370&#39;,&#39;1&#39;,&#39;Vote&#39;,&#39;QmdoixPMMT76vSt6ewkE87JZJywS1piYsGC3nJJpcrPXKS&#39;),

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;demo-3&#34;&gt;Demo 3&lt;/h2&gt;
&lt;p&gt;Demonstrating creation of table for a recent project (i.e., Coordinape data).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Timestamp would ideally be TIMESTAMP, not DECIMAL.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;CREATE TABLE IF NOT EXISTS coordinape_rounds (
	id BIGINT,
	coord_id BIGINT,
	recipient_address VARCHAR(200),
	sender_address VARCHAR(200),
	recipient_id BIGINT,
	sender_id BIGINT,
	tokens BIGINT,
	circle_id BIGINT,
	epoch_id BIGINT,
	timestamp DECIMAL,
	PRIMARY KEY (coord_id)
);

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;demo-4-inserting-into-pre-existing-table&#34;&gt;Demo 4 Inserting into pre-existing table&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;id&lt;/code&gt; values starting at 30. Existing table has id = 29 as last one.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;INSERT INTO bankless_wallet_entity_2(
	id, human_readable, entity_type, wallet_address)
	VALUES
	(&#39;30&#39;,&#39;Education Guild Multisig&#39;, &#39;Guild Multisig&#39;, &#39;0xSAMPLEADDRESS&#39;),
	(&#39;31&#39;, &#39;DevOps Infrastructure Multisig&#39;, &#39;Project Multisig&#39;, &#39;0xSAMPLEADDRESS&#39;),
	(&#39;32&#39;, &#39;Balancer Multisig&#39;, &#39;Project Multisig&#39;, &#39;0xSAMPLEADDRESS&#39;),
	(&#39;33&#39;, &#39;Balancer Liquidity Mining Program Multisig&#39;, &#39;Project Multisig&#39;, &#39;0xSAMPLEADDRESS&#39;),
	(&#39;34&#39;, &#39;International Media Node Multisig&#39;, &#39;Project Multisig&#39;, &#39;0xSAMPLEADDRESS&#39;),
	(&#39;35&#39;, &#39;Book Club Multisig&#39;, &#39;Project Multisig&#39;, &#39;0xSAMPLEADDRESS&#39;),
	(&#39;36&#39;, &#39;Podcast Hatchery Multisig&#39;, &#39;Project Multisig&#39;, &#39;0xSAMPLEADDRESS&#39;),
	(&#39;37&#39;, &#39;Flipper Zone Multisig&#39;, &#39;Project Multisig&#39;, &#39;0xSAMPLEADDRESS&#39;);
	
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on Data and DAOs 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing dataframe to postgresql database</title>
      <link>/technical_notes/example_tech/postgresql_sqlalchemy_upload_df/</link>
      <pubDate>Sat, 25 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/postgresql_sqlalchemy_upload_df/</guid>
      <description>&lt;h2 id=&#34;writing-dataframe-to-postgresql-database&#34;&gt;Writing dataframe to postgresql database&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You need to write data from an API endpoint into postgres. You can use SQLAlchemy and Python for the job. A benefit of this method is that you don&amp;rsquo;t need to rely on Excel.&lt;/p&gt;
&lt;p&gt;In the example below, we query data from an API endpoint (Coordinape), and we&amp;rsquo;ve setup &lt;code&gt;.env&lt;/code&gt; to store authorization credentials. We used pandas to transform the data &lt;em&gt;before&lt;/em&gt; loading to postgres.&lt;/p&gt;
&lt;p&gt;Now we want to use SQLAlchemy to write the dataframe to postgres.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://pythontic.com/pandas/serialization/postgresql?fbclid=IwAR0fzgR7wBspGl6mAqWyt8N2lDwS7a36MvWLoFstDJBQDJsnBVMo7J0cwGc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# libraries for database connection
import time
from sqlalchemy import create_engine
import psycopg2

# NOTE: By now a dataframe is ready for writing to postgres
# here the dataframe = concat_frames_5

# Use SQLAlchemy
# INPUT DATABASE CONNECTION STRING
conn_string = os.environ.get(&#39;CONN_STRING&#39;)
print(conn_string)

alchemyEngine = create_engine(conn_string)
postgreSQLConnection = alchemyEngine.connect()

postgreSQLTable = &amp;quot;coordinape_rounds_3&amp;quot;

try:
    frame = concat_frames_5.to_sql(
        postgreSQLTable, postgreSQLConnection, if_exists=&#39;fail&#39;)
except ValueError as vs:
    print(vx)
except Exception as ex:
    print(ex)
else:
    print(
        f&amp;quot;PostgreSQL Table {postgreSQLTable} has been created successfully.&amp;quot;)
finally:
    postgreSQLConnection.close()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on Data and DAOs 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get values from nested array</title>
      <link>/technical_notes/example_tech/mongodb_grab_value_nested_array/</link>
      <pubDate>Fri, 24 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_grab_value_nested_array/</guid>
      <description>&lt;h2 id=&#34;grab-values-from-nested-arrays-in-a-document&#34;&gt;Grab values from nested arrays in a document&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You want to figure out how much time has elapsed between two timestamps. But those timestamps are nested in arrays.&lt;/p&gt;
&lt;p&gt;This is similar to the operation in 
&lt;a href=&#34;https://paulapivat.com/technical_notes/example_tech/mongodb_subtract_timestamps/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this post&lt;/a&gt;, with a key difference: the timestamps are nested within an &lt;strong&gt;array of objects&lt;/strong&gt;, so we have to get those values out, then convert &lt;code&gt;$toDate&lt;/code&gt;, then subtract.&lt;/p&gt;
&lt;p&gt;Note: We&amp;rsquo;re &lt;strong&gt;not&lt;/strong&gt; using &lt;code&gt;$unwind&lt;/code&gt; here because we want multiple timestamps within the same document.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.bounties.aggregate([
    {$match: {&amp;quot;$and&amp;quot;: [{season: 2}, {customer_id: &#39;905250069463326740&#39;}, {status: &amp;quot;Completed&amp;quot;}]}},
    {$project: {&amp;quot;statusHistory.status&amp;quot;: 1, &amp;quot;statusHistory.setAt&amp;quot;: 1}},
    {$project: {draft: {$arrayElemAt: [&amp;quot;$statusHistory&amp;quot;, 0]},  open: {$arrayElemAt: [&amp;quot;$statusHistory&amp;quot;, 1]}, in_progress: {$arrayElemAt: [&amp;quot;$statusHistory&amp;quot;, 2]}, in_review: {$arrayElemAt: [&amp;quot;$statusHistory&amp;quot;, 3]}, completed: {$arrayElemAt: [&amp;quot;$statusHistory&amp;quot;, 4]}}},
    {$project: {draft: {$toDate: &amp;quot;$draft.setAt&amp;quot;}, open: {$toDate: &amp;quot;$open.setAt&amp;quot;}, in_progress: {$toDate: &amp;quot;$in_progress.setAt&amp;quot;}, in_review: {$toDate: &amp;quot;$in_review.setAt&amp;quot;}, completed: {$toDate: &amp;quot;$completed.setAt&amp;quot;} }},
    {$project: {_id: 1, draft_to_open: {$divide: [{$subtract: [&amp;quot;$open&amp;quot;, &amp;quot;$draft&amp;quot;]}, 3600000]}, open_to_progress: {$divide: [{$subtract: [&amp;quot;$in_progress&amp;quot;, &amp;quot;$open&amp;quot;]}, 3600000]}, progress_to_review: {$divide: [{$subtract: [&amp;quot;$in_review&amp;quot;, &amp;quot;$in_progress&amp;quot;]}, 3600000]}, review_to_completed: {$divide: [{$subtract: [&amp;quot;$completed&amp;quot;, &amp;quot;$in_review&amp;quot;]}, 3600000]}}}
])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving past 7-days data</title>
      <link>/technical_notes/example_tech/mongodb_past_7_days/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_past_7_days/</guid>
      <description>&lt;h2 id=&#34;retrieving-past-7-days-data&#34;&gt;Retrieving past 7-days data&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You want to query a collection to get documents that were generated in the past 7 days.&lt;/p&gt;
&lt;h2 id=&#34;no-hard-coding&#34;&gt;No Hard Coding&lt;/h2&gt;
&lt;p&gt;Reference this 
&lt;a href=&#34;https://stackoverflow.com/questions/33194825/find-objects-created-in-last-week-in-mongo/46906862&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stack overflow post&lt;/a&gt;. To calculate the past 7-days we need to multiply: 7 days * 24 hours per day * 60 minutes per hour * 60 seconds per minute * 1000 milliseconds per second.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We want to get to milliseconds when dealing with timestamps.&lt;/p&gt;
&lt;p&gt;This example shows this method in &lt;code&gt;find()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.collection.find({
    timestamp: {
        $gte: new Date(new Date() - 7 * 60 * 60 * 24 * 1000)
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;applied-to-aggregation-pipeline&#34;&gt;Applied to Aggregation Pipeline&lt;/h3&gt;
&lt;p&gt;This query can be used in &lt;strong&gt;Shell&lt;/strong&gt; as well as on &lt;strong&gt;Mongo Chart/Compass&lt;/strong&gt;. Whne using in Mongo Chart, do &lt;strong&gt;not&lt;/strong&gt; use Format to preserve: &lt;code&gt;new Date(new Date())&lt;/code&gt;. This is from an example query for Bounty Board where we&amp;rsquo;re querying bounties created in the past 7-days.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.bounties.aggregate([
    {$match: {&amp;quot;$and&amp;quot;: [{season: 2}, {customer_id: &#39;834499078434979890&#39;} ]}},
    {$project: {_id: 1, _customer_id: &amp;quot;$customer_id&amp;quot;, _title: &amp;quot;$title&amp;quot;, _status: &amp;quot;$status&amp;quot;, _createdAt: &amp;quot;$createdAt&amp;quot;, _claimedAt: &amp;quot;$claimedAt&amp;quot;, _submittedAt: &amp;quot;$submittedAt&amp;quot;, _reviewedAt: &amp;quot;$reviewedAt&amp;quot;}},
    {$project: {_id: 1, customer_id: &amp;quot;$_customer_id&amp;quot;, title: &amp;quot;$_title&amp;quot;, status: &amp;quot;$_status&amp;quot;, createdAt: {$toDate: &amp;quot;$_createdAt&amp;quot;}, claimedAt: {$toDate: &amp;quot;$_claimedAt&amp;quot;}, submittedAt: {$toDate: &amp;quot;$_submittedAt&amp;quot;}, reviewedAt: {$toDate: &amp;quot;$_reviewedAt&amp;quot;}}},
    {$match: {&amp;quot;createdAt&amp;quot;: {&amp;quot;$gt&amp;quot;: new Date(new Date() - 7 * 60 * 60 * 24 * 1000)}}}
])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;mongo-shell&#34;&gt;Mongo Shell&lt;/h2&gt;
&lt;p&gt;Note: This operation can be done in &lt;strong&gt;Mongo Shell&lt;/strong&gt;, need to find another way to do it in Mongo Compass / Atlas.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# Compute the time 7 days ago to use in filtering the data
# across all customers
var d = new Date();
d.setDate(d.getDate()-7);

db.bounties.aggregate([
    {$match: {season: 2, customer_id: &#39;905250069463326740&#39;}},
    {$project: {_id: 1, title: 1, customer_id: 1, createdAt: {$toDate: &amp;quot;$createdAt&amp;quot;}}},
    {$match: {&#39;createdAt&#39;: {$gt: d}}},
    {$unwind: &#39;$createdAt&#39;},
    {$match: {&#39;createdAt&#39;: {$gt: d}}}
]).pretty()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;hard-coded&#34;&gt;Hard Coded&lt;/h2&gt;
&lt;p&gt;Break out in case of emergency, generally avoid.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# Note: hardcoded ISODate

db.bounties.aggregate([
    {$match: {&amp;quot;$and&amp;quot;: [{season: 2}, {customer_id: &#39;834499078434979890&#39;} ]}},
    {$project: {_id: 1, _customer_id: &amp;quot;$customer_id&amp;quot;, _title: &amp;quot;$title&amp;quot;, _status: &amp;quot;$status&amp;quot;, _createdAt: &amp;quot;$createdAt&amp;quot;, _claimedAt: &amp;quot;$claimedAt&amp;quot;, _submittedAt: &amp;quot;$submittedAt&amp;quot;, _reviewedAt: &amp;quot;$reviewedAt&amp;quot;}},
    {$project: {_id: 1, customer_id: &amp;quot;$_customer_id&amp;quot;, title: &amp;quot;$_title&amp;quot;, status: &amp;quot;$_status&amp;quot;, createdAt: {$toDate: &amp;quot;$_createdAt&amp;quot;}, claimedAt: {$toDate: &amp;quot;$_claimedAt&amp;quot;}, submittedAt: {$toDate: &amp;quot;$_submittedAt&amp;quot;}, reviewedAt: {$toDate: &amp;quot;$_reviewedAt&amp;quot;}}},
    {$match: {&amp;quot;createdAt&amp;quot;: {&amp;quot;$gte&amp;quot;: ISODate(&amp;quot;2021-12-15T00:00:00Z&amp;quot;)}}}
]) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Show current user, db access and role</title>
      <link>/technical_notes/example_tech/mongodb_show_current_user/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_show_current_user/</guid>
      <description>&lt;h2 id=&#34;show-current-user&#34;&gt;Show current user&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You want to grab &lt;em&gt;your&lt;/em&gt; own info as the current user of MongoDB.&lt;/p&gt;
&lt;p&gt;Run this command in Mongo Shell.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.name_of_collection.runCommand({connectionStatus: 1})

# once you get user name, you can use this command
db.getUser(&amp;quot;UserName&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get time elapsed between two Timestamps</title>
      <link>/technical_notes/example_tech/mongodb_subtract_timestamps/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_subtract_timestamps/</guid>
      <description>&lt;h2 id=&#34;get-time-elapsed-between-two-events&#34;&gt;Get time elapsed between two events&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You want to figure out how much time has elapsed between two timestamps.&lt;/p&gt;
&lt;p&gt;The example below uses &lt;code&gt;$project&lt;/code&gt; 3 consecutive times.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You have to convert timestamps (in string) to Date object with &lt;code&gt;$toDate&lt;/code&gt; conversion. Another assumption is that timetsamps provide milliseconds so we need to subtract two dates by milliseconds, then convert those to either hours, days etc.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.bounties.aggregate([
    {$match: {&amp;quot;$and&amp;quot;: [{season: 2}, {customer_id: &#39;905250069463326740&#39;}, {status: &amp;quot;Completed&amp;quot;}]}},
    {$project: {_id: 0, _customer_id: &amp;quot;$customer_id&amp;quot;, _title: &amp;quot;$title&amp;quot;, _status: &amp;quot;$status&amp;quot;, _createdAt: &amp;quot;$createdAt&amp;quot;, _claimedAt: &amp;quot;$claimedAt&amp;quot;, _submittedAt: &amp;quot;$submittedAt&amp;quot;, _reviewedAt: &amp;quot;$reviewedAt&amp;quot;}},
    {$project: {_id: 0, customer_id: &amp;quot;$_customer_id&amp;quot;, title: &amp;quot;$_title&amp;quot;, status: &amp;quot;$_status&amp;quot;, createdAt: {$toDate: &amp;quot;$_createdAt&amp;quot;}, claimedAt: {$toDate: &amp;quot;$_claimedAt&amp;quot;}, submittedAt: {$toDate: &amp;quot;$_submittedAt&amp;quot;}, reviewedAt: {$toDate: &amp;quot;$_reviewedAt&amp;quot;}}},
    {$project: {step_one: {$divide: [{$subtract: [&amp;quot;$claimedAt&amp;quot;, &amp;quot;$createdAt&amp;quot;]}, 8.64e+7]} }}
]) 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;calculate-time-difference-in-hours&#34;&gt;Calculate Time Difference in Hours&lt;/h2&gt;
&lt;p&gt;Here I make the &lt;em&gt;third&lt;/em&gt; &lt;code&gt;$project&lt;/code&gt; step more explicit by renaming the time stamps to reflect stages in bounty development.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There are 3600000 milli-seconds in an hour.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# subtract two timestamps - prod
db.bounties.aggregate([
    {$match: {&amp;quot;$and&amp;quot;: [{season: 2}, {customer_id: &#39;834499078434979890&#39;}, {status: &amp;quot;Completed&amp;quot;}]}},
    {$project: {_id: 0, _customer_id: &amp;quot;$customer_id&amp;quot;, _title: &amp;quot;$title&amp;quot;, _status: &amp;quot;$status&amp;quot;, _createdAt: &amp;quot;$createdAt&amp;quot;, _claimedAt: &amp;quot;$claimedAt&amp;quot;, _submittedAt: &amp;quot;$submittedAt&amp;quot;, _reviewedAt: &amp;quot;$reviewedAt&amp;quot;}},
    {$project: {_id: 0, customer_id: &amp;quot;$_customer_id&amp;quot;, title: &amp;quot;$_title&amp;quot;, status: &amp;quot;$_status&amp;quot;, createdAt: {$toDate: &amp;quot;$_createdAt&amp;quot;}, claimedAt: {$toDate: &amp;quot;$_claimedAt&amp;quot;}, submittedAt: {$toDate: &amp;quot;$_submittedAt&amp;quot;}, reviewedAt: {$toDate: &amp;quot;$_reviewedAt&amp;quot;}}},
    {$project: {title: 1, time_to_claim: {$divide: [{$subtract: [&amp;quot;$claimedAt&amp;quot;, &amp;quot;$createdAt&amp;quot;]}, 3600000]}, time_to_submit: {$divide: [{$subtract: [&amp;quot;$submittedAt&amp;quot;, &amp;quot;$claimedAt&amp;quot;]}, 3600000]}, time_to_review: {$divide: [{$subtract: [&amp;quot;$reviewedAt&amp;quot;, &amp;quot;$submittedAt&amp;quot;]}, 3600000]} }}
]) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring Mongo&#39;s Aggregation Pipeline</title>
      <link>/technical_notes/example_tech/mongodb_aggregation_pipeline/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_aggregation_pipeline/</guid>
      <description>&lt;h2 id=&#34;pipelines-in-mongo&#34;&gt;Pipelines in Mongo&lt;/h2&gt;
&lt;p&gt;Previously, we looked at a &amp;ldquo;pipeline&amp;rdquo; &lt;code&gt;$lookup&lt;/code&gt; -&amp;gt; &lt;code&gt;$unwind&lt;/code&gt; -&amp;gt; &lt;code&gt;$project&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;$lookup&lt;/code&gt; to create the join. Then &lt;code&gt;$unwind&lt;/code&gt; to focus on the &amp;ldquo;result&amp;rdquo; of the &lt;code&gt;$lookup&lt;/code&gt; (&amp;ldquo;as:&amp;hellip;&amp;quot;). Finally, &lt;code&gt;$project&lt;/code&gt; to specify the specific key-value pairs you want.&lt;/p&gt;
&lt;p&gt;Note: In &lt;strong&gt;Mongo Compass Charts&lt;/strong&gt;, you can &lt;em&gt;re-use&lt;/em&gt; either &lt;code&gt;queries&lt;/code&gt; &lt;code&gt;{}&lt;/code&gt; or &lt;code&gt;aggregation&lt;/code&gt; &lt;code&gt;[]&lt;/code&gt; entered into the query field&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example to join the &lt;code&gt;bounties&lt;/code&gt; and &lt;code&gt;customers&lt;/code&gt; collection from the Bounty Board project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.bounties.aggregate([
  {
    $lookup: {
      from: &amp;quot;customers&amp;quot;,
      localField: &amp;quot;customer_id&amp;quot;,
      foreignField: &amp;quot;customer_id&amp;quot;,
      as: &amp;quot;customerName&amp;quot;,
    },
  },
  {
    $unwind: &amp;quot;$customerName&amp;quot;,
  },
  {
    $project: {
      _id: 0,
      title: 1,
      &amp;quot;customerName.customerName&amp;quot;: 1,
    },
  },
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;aggregation-framework&#34;&gt;Aggregation Framework&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s breakdown aggregation pipelines further. Here are some variations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;match-group-sort&lt;/li&gt;
&lt;li&gt;match-sortByCount&lt;/li&gt;
&lt;li&gt;match-sort-project&lt;/li&gt;
&lt;li&gt;match-project-group-sort&lt;/li&gt;
&lt;li&gt;match-project-group&lt;/li&gt;
&lt;li&gt;project-sort&lt;/li&gt;
&lt;li&gt;project-group&lt;/li&gt;
&lt;li&gt;(multiple $project) to project in a specific order&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This shows the flexibility of Aggregation pipelines and different ways to querying and displaying data.&lt;/p&gt;
&lt;p&gt;Here are codes associated with the above examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;match-group-sort&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# seasonal filter
# group by Bounty Creator, number of bounties per creator
# average reward posted
# sort by total bounties per person

db.bounties
  .aggregate([
    { $match: { season: 2 } },
    {
      $group: {
        _id: { creator_name: &amp;quot;$createdBy.discordHandle&amp;quot; },
        num_bounties_created: { $sum: 1 },
        avg_reward_amt: { $avg: &amp;quot;$reward.amount&amp;quot; },
      },
    },
    { $sort: { num_bounties_created: -1 } },
  ])
  .pretty();
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;match-sortByCount&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# short cut to grouping by Bounty Creator
# can apply to Claimers and Submitters
db.bounties.aggregate([
  { $match: { season: 2 } },
  { $sortByCount: &amp;quot;$createdBy.discordHandle&amp;quot; },
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;match-sort-project&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# seasonal filter
# sort by createdAt date, starting with most recent
# project/display only title and createdAt date
# note: can use &#39;$toDate&#39; instead of &#39;$convert, input, to&#39;
db.bounties.aggregate([
    { $match: { season: 2 } },
    { $sort: { createdAt: -1 } },
    {
      $project: {
        _id: 0,
        title: 1,
        createdAt: { $convert: { input: &amp;quot;$createdAt&amp;quot;, to: &amp;quot;date&amp;quot; } },
      },
    },
  ]).pretty();
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;match-project-group-sort&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# seasonal filter
# display avg_reward bountied per week
# group by week
# sort by week, by week in descending order
db.bounties.aggregate([
  { $match: { season: 1 } },
  {
    $project: {
      _id: 0,
      season: 1,
      &amp;quot;reward.amount&amp;quot;: 1,
      createdAt: { $toDate: &amp;quot;$createdAt&amp;quot; },
    },
  },
  {
    $group: {
      _id: { week: { $isoWeek: &amp;quot;$createdAt&amp;quot; } },
      avg_reward: { $avg: &amp;quot;$reward.amount&amp;quot; },
    },
  },
  { $sort: { week: -1 } },
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;match-project-group&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here you can filter by multiple conditions, then project the columns you want to see and then group to get a summation.&lt;/p&gt;
&lt;p&gt;This was useful to tally total values in Bounties given and/or claimed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.bounties.aggregate([
    {$match: {&amp;quot;$and&amp;quot;: [{season: 2}, {customer_id: &#39;905250069463326740&#39;}, {status: &amp;quot;Completed&amp;quot;}]}},
    {$project: {_id: 0, customer_id: 1, &amp;quot;reward.amount&amp;quot;: 1, &amp;quot;reward.currency&amp;quot;: 1, status: 1}},
    {$group: {_id: &amp;quot;$customer_id&amp;quot;, sum: {$sum: &amp;quot;$reward.amount&amp;quot;}}}
])
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;project-sort&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# display subset of fields in bounties
# then, sort by reward amount
db.bounties.aggregate([
  {
    $project: {
      _id: 0,
      season: 1,
      title: 1,
      &amp;quot;reward.amount&amp;quot;: 1,
      &amp;quot;reward.currency&amp;quot;: 1,
    },
  },
  { $sort: { &amp;quot;reward.amount&amp;quot;: -1 } },
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;project-group&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# group bounty by Season,
# average reward committed
db.bounties.aggregate([
  { $project: { _id: 0, season: 1, &amp;quot;reward.amount&amp;quot;: 1 } },
  {
    $group: {
      _id: { bounty_season: &amp;quot;$season&amp;quot; },
      avg_reward: { $avg: &amp;quot;$reward.amount&amp;quot; },
    },
  },
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;(multiple $project) to project in a specific order&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here I used &lt;code&gt;$project&lt;/code&gt; twice consecutively. First time to put the key-value fields in a specific order (i.e., createdAt, then claimedAt, then submittedAt, then reviewedAt). Second time to get the original field names.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.bounties.aggregate([
    {$match: {&amp;quot;$and&amp;quot;: [{season: 2}, {customer_id: &#39;905250069463326740&#39;}]}},
    {$project: {_id: 0, _customer_id: &amp;quot;$customer_id&amp;quot;, _title: &amp;quot;$title&amp;quot;, _status: &amp;quot;$status&amp;quot;, _createdAt: &amp;quot;$createdAt&amp;quot;, _claimedAt: &amp;quot;$claimedAt&amp;quot;, _submittedAt: &amp;quot;$submittedAt&amp;quot;, _reviewedAt: &amp;quot;$reviewedAt&amp;quot;}},
    {$project: {_id: 0, customer_id: &amp;quot;$_customer_id&amp;quot;, title: &amp;quot;$_title&amp;quot;, status: &amp;quot;$_status&amp;quot;, createdAt: &amp;quot;$_createdAt&amp;quot;, claimedAt: &amp;quot;$_claimedAt&amp;quot;, submittedAt: &amp;quot;$_submittedAt&amp;quot;, reviewedAt: &amp;quot;$_reviewedAt&amp;quot;}}
])

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use $project to display data in a specific order</title>
      <link>/technical_notes/example_tech/mongodb_display_data_in_order/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_display_data_in_order/</guid>
      <description>&lt;h2 id=&#34;use-project-to-display-data-in-a-specific-order&#34;&gt;Use $project to display data in a specific order&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: In an &lt;strong&gt;Aggregation&lt;/strong&gt; pipeline, you may want to display data being &lt;code&gt;$project&lt;/code&gt;-ed in a specific order.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how you&amp;rsquo;d do it. Put an &lt;em&gt;underscore&lt;/em&gt; to the key names &lt;code&gt;_variable&lt;/code&gt; and reference the actual variable in the value, &lt;code&gt;_variable: &amp;quot;$variable&amp;quot;&lt;/code&gt;. See this 
&lt;a href=&#34;https://stackoverflow.com/questions/35254128/is-it-possible-to-get-the-fields-in-the-order-of-projection-in-aggregation-frame&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stack overflow&lt;/a&gt; for reference.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# pay attention to first $project
db.bounties.aggregate([
    {$match: {&amp;quot;$and&amp;quot;: [{season: 2}, {customer_id: &#39;905250069463326740&#39;}]}},
    {$project: {_id: 0, _customer_id: &amp;quot;$customer_id&amp;quot;, _title: &amp;quot;$title&amp;quot;, _status: &amp;quot;$status&amp;quot;, _createdAt: &amp;quot;$createdAt&amp;quot;, _claimedAt: &amp;quot;$claimedAt&amp;quot;, _submittedAt: &amp;quot;$submittedAt&amp;quot;, _reviewedAt: &amp;quot;$reviewedAt&amp;quot;}},
    {$project: {_id: 0, customer_id: &amp;quot;$_customer_id&amp;quot;, title: &amp;quot;$_title&amp;quot;, status: &amp;quot;$_status&amp;quot;, createdAt: &amp;quot;$_createdAt&amp;quot;, claimedAt: &amp;quot;$_claimedAt&amp;quot;, submittedAt: &amp;quot;$_submittedAt&amp;quot;, reviewedAt: &amp;quot;$_reviewedAt&amp;quot;}}
])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;use-project-twice-to-get-original-field-names&#34;&gt;Use $project twice to get original field names&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: After displaying in a specific order, you may want to retain the original field name. To do this, you&amp;rsquo;d use &lt;code&gt;$project&lt;/code&gt; &lt;em&gt;again&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# pay attention to second $project
db.bounties.aggregate([
    {$match: {&amp;quot;$and&amp;quot;: [{season: 2}, {customer_id: &#39;905250069463326740&#39;}]}},
    {$project: {_id: 0, _customer_id: &amp;quot;$customer_id&amp;quot;, _title: &amp;quot;$title&amp;quot;, _status: &amp;quot;$status&amp;quot;, _createdAt: &amp;quot;$createdAt&amp;quot;, _claimedAt: &amp;quot;$claimedAt&amp;quot;, _submittedAt: &amp;quot;$submittedAt&amp;quot;, _reviewedAt: &amp;quot;$reviewedAt&amp;quot;}},
    {$project: {_id: 0, customer_id: &amp;quot;$_customer_id&amp;quot;, title: &amp;quot;$_title&amp;quot;, status: &amp;quot;$_status&amp;quot;, createdAt: &amp;quot;$_createdAt&amp;quot;, claimedAt: &amp;quot;$_claimedAt&amp;quot;, submittedAt: &amp;quot;$_submittedAt&amp;quot;, reviewedAt: &amp;quot;$_reviewedAt&amp;quot;}}
])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use $match to filter multiple conditions in Aggregation framework</title>
      <link>/technical_notes/example_tech/mongodb_filter_multiple_condition/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_filter_multiple_condition/</guid>
      <description>&lt;h2 id=&#34;filter-multiple-conditions-using-match&#34;&gt;Filter multiple conditions using $match&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: At the beginning of an &lt;strong&gt;Aggregation&lt;/strong&gt; pipeline, you may want to filter for multiple conditions before &lt;code&gt;$project&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how you&amp;rsquo;d do it. Use &lt;code&gt;$and&lt;/code&gt; operator with an &lt;em&gt;array&lt;/em&gt; of conditions. This example is from the Bounty Board project. The query is filtering for &lt;code&gt;season&lt;/code&gt;, &lt;code&gt;customer_id&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.bounties.aggregate([
    {$match: {&amp;quot;$and&amp;quot;: [{season: 2}, {customer_id: &#39;905250069463326740&#39;}, {status: &amp;quot;Completed&amp;quot;}]}},
    {$project: {_id: 0, customer_id: 1, &amp;quot;reward.amount&amp;quot;: 1, &amp;quot;reward.currency&amp;quot;: 1, status: 1}},
    {$group: {_id: &amp;quot;$customer_id&amp;quot;, sum: {$sum: &amp;quot;$reward.amount&amp;quot;}}}
])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Incidentally, this pipeline is a useful pattern to remember: &lt;code&gt;$match&lt;/code&gt; -&amp;gt; &lt;code&gt;$project&lt;/code&gt; -&amp;gt; &lt;code&gt;$group&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create Categorical Buckets</title>
      <link>/technical_notes/example_tech/mongodb_categorical_buckets/</link>
      <pubDate>Fri, 17 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_categorical_buckets/</guid>
      <description>&lt;h2 id=&#34;create-categorical-buckets-from-a-continuous-variable&#34;&gt;Create categorical buckets from a continuous variable&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You have a continuous variable like &amp;ldquo;age&amp;rdquo; and want to create categorical buckets (i.e., ages 10-20, 21-30, 31-40 etc)&lt;/p&gt;
&lt;p&gt;Note: We can create minimum ages here&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# creating age buckets
# group documents into those buckets
# summary statistics

db.contacts.aggregate([
    {$bucket: {groupBy: &amp;quot;$dob.age&amp;quot;, boundaries: [18, 30, 40, 50, 60, 120], output: {
        numPersons: { $sum: 1},
        averageAge: {$avg: &amp;quot;$dob.age&amp;quot;}
    }}}
]).pretty()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: This version auto-generates buckets&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;// buckets auto
// break continuous variable into categorical

db.contacts.aggregate([
 {
     $bucketAuto: {
         groupBy: &amp;quot;$dob.age&amp;quot;,
         buckets: 5,
         output: {
            numPersons: { $sum: 1},
            averageAge: {$avg: &amp;quot;$dob.age&amp;quot;}
         }
     }
 }
]).pretty()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Concatenate String</title>
      <link>/technical_notes/example_tech/mongodb_concatenate_string/</link>
      <pubDate>Fri, 17 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_concatenate_string/</guid>
      <description>&lt;h2 id=&#34;combine-string-variables-to-use-in-aggregation-pipeline&#34;&gt;Combine string variables to use in Aggregation Pipeline&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You have a &amp;ldquo;first name&amp;rdquo; and &amp;ldquo;last name&amp;rdquo; you want to concatenate to use in a &lt;code&gt;$project&lt;/code&gt; stage.&lt;/p&gt;
&lt;p&gt;Note: We filter for males only, then also limit results to 10 documents.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# match by gender first if want to filter for only male
db.contacts.aggregate([
    {$match: {gender: &amp;quot;male&amp;quot;}},
    {$project: {_id: 0, name: {$concat: [&amp;quot;$name.first&amp;quot;, &amp;quot; &amp;quot;, &amp;quot;$name.last&amp;quot;]}, birthdate: {$toDate: &amp;quot;$dob.date&amp;quot;}}},
    {$sort: {birthdate: 1}},
    {$skip: 10},
    {$limit: 10}
]).pretty()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Error Tracking with Sentry</title>
      <link>/technical_notes/example_tech/webdev_sentry_install/</link>
      <pubDate>Sat, 11 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/webdev_sentry_install/</guid>
      <description>&lt;h2 id=&#34;install-error-tracking-with-sentry&#34;&gt;Install Error Tracking with Sentry&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: Developers want error logging for their applications to track performance. Especially when deployed to actual users.&lt;/p&gt;
&lt;p&gt;The following example features error tracking with &lt;strong&gt;Sentry.io&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;
&lt;h3 id=&#34;sentry-setup&#34;&gt;Sentry Setup&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Figure out what frontend language your team is using, go through the installation guide (e.g., we used NextJS)&lt;/li&gt;
&lt;li&gt;Install sentry&lt;/li&gt;
&lt;li&gt;Install configuration files. Sentry.io had a convenient installation wizard.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll need to add &lt;code&gt;options&lt;/code&gt; to two &lt;code&gt;Sentry.init()&lt;/code&gt; (i.e., client and server config files)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# example sentry.init() file from sentry.client.config.js
Sentry.init({
  dsn:
    SENTRY_DSN ||
    &amp;quot;https://8cd5c6d0a0a14e2ab48371d22a9535b4@o1071534.ingest.sentry.io/6069034&amp;quot;,
  // Adjust this value in production, or use tracesSampler for greater control
  tracesSampleRate: 1.0,
  debug,
  // ...
  // Note: if you want to override the automatic release value, do not set a
  // `release` value here - use the environment variable `SENTRY_RELEASE`, so
  // that it will also get attached to your source maps
});
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Include SENTRY_DSN in &lt;code&gt;.env.local&lt;/code&gt; file:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# make sure the digits 8888888 match the sentry project when you login
SENTRY_DSN = &amp;quot;https://8alphanumericstring4.ingest.sentry.io/8888888&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Log into sentry account with username and password&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;setting-up-a-test-database-connection&#34;&gt;Setting up a Test Database connection&lt;/h3&gt;
&lt;p&gt;You want to run a local instance of the App. One way to ensure you&amp;rsquo;re able to run your App locally is to also run a test database to confirm that data on the frontend, matches what&amp;rsquo;s in the test database.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a .env.local file to store database credentials (&lt;strong&gt;MONGODB_URI&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# specific mongo connection
MONGODB_URI=mongodb+srv://username:password@cluster0-m0sandbox.gamml.mongodb.net/project_name

# default
MONGODB_URI=mongodb://localhost:27017/project_name
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Make sure a Docker container with Mongo DB installed is running&lt;/li&gt;
&lt;li&gt;In parallel to your application running, fire up a Mongo instance locally (note how it&amp;rsquo;s the &lt;strong&gt;same&lt;/strong&gt; string as whats in the &lt;code&gt;MONGODB_URI&lt;/code&gt; in your &lt;code&gt;.env.local&lt;/code&gt; file.)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# cd into project folder but mongo should be globally accessible
$ mongosh âmongodb+srv://username:password@cluster0-m0sandbox.gamml.mongodb.net/project_nameâ
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Query something you see on the frontend (e.g., user_id) on the backend to see that data matches.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;run-local-instance-of-application&#34;&gt;Run local instance of Application&lt;/h3&gt;
&lt;p&gt;note: Bounty-board App&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cd into root directory of the &lt;code&gt;app&lt;/code&gt; (../packages/react-app)&lt;/li&gt;
&lt;li&gt;yarn &amp;amp; yarn dev&lt;/li&gt;
&lt;li&gt;enter &lt;code&gt;localhost:3000&lt;/code&gt; on your browser to see the App running.&lt;/li&gt;
&lt;li&gt;Also note &lt;em&gt;sentry logging&lt;/em&gt; in your terminal&lt;/li&gt;
&lt;li&gt;Query something you see on the frontend (e.g., user_id) on the backend to see that data matches.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;throw-an-error&#34;&gt;Throw an error&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Manually have sentry sent a message to the Sentry UI tool through &lt;code&gt;sentry.server.config.js&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;
## capturing errors
Sentry.captureMessage(&amp;quot;Insert message with captureMessage.&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Throw a naturally occuring error like a wrong API route in the browser&lt;/li&gt;
&lt;li&gt;Check sentry.io account for error logging.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Approaches to finding Non-Matching Rows between Two Columns</title>
      <link>/technical_notes/example_tech/rstats_tip6/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_tip6/</guid>
      <description>&lt;h2 id=&#34;approaches-to-finding-non-matching-rows-between-2-columns&#34;&gt;Approaches to finding non-matching rows between 2 columns&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You have two email lists - a full and already_sent. The latter is a subset of the former.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;first&lt;/strong&gt; condition to test is that the &lt;code&gt;full&lt;/code&gt; and &lt;code&gt;already_sent&lt;/code&gt; lists are mutually exclusive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, the examples below assume the columns are in different dataframes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Third&lt;/strong&gt;, you generally put the longer column first in a function.&lt;/p&gt;
&lt;p&gt;Then, you want to find non-matching rows.&lt;/p&gt;
&lt;h2 id=&#34;demo-two-tables&#34;&gt;Demo Two Tables&lt;/h2&gt;
&lt;p&gt;Table 1: a1&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Table 2: a2&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# generate two dataframes to demo
a1 &amp;lt;- data.frame(a = 1:5, b=letters[1:5])
a2 &amp;lt;- data.frame(a = 1:3, b=letters[1:3])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;dplyr-anti_join&#34;&gt;Dplyr: anti_join&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;anti_join&lt;/code&gt; function comes with &lt;code&gt;dplyr&lt;/code&gt;. You will find non-matching rows between 2 tables;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;library(dplyr)

anti_join(a1, a2, by = &#39;b&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;dplyr-setdiff&#34;&gt;Dplyr: setdiff&lt;/h2&gt;
&lt;p&gt;This returns the non-matching rows by individual characters. You&amp;rsquo;ll need to wrap the output in a &lt;code&gt;data.frame()&lt;/code&gt;. This solution is not as clean as a &lt;code&gt;anti_join&lt;/code&gt; or the &lt;code&gt;setDT&lt;/code&gt; down below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;library(dplyr)

# individual characters
setdiff(a1$b, a2$b)

# wrapped in a dataframe
data.frame(setdiff(a1$b, a2$b))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;datatable-setdt&#34;&gt;Data.Table: setDT&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;library(data.table)

setDT(a1)[!a1$b %chin% a2$b]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;double-check-in-excel&#34;&gt;Double check in Excel&lt;/h2&gt;
&lt;p&gt;Check if values column &lt;code&gt;a1&lt;/code&gt; exists in column &lt;code&gt;a2&lt;/code&gt;. You&amp;rsquo;re going to create a middle column between the two with values of either &lt;code&gt;Exist&lt;/code&gt;, where both emails exists or &lt;code&gt;Not Exist&lt;/code&gt;, where one column is missing.&lt;/p&gt;
&lt;p&gt;Assuming &lt;code&gt;a1&lt;/code&gt; starts on cell A4.
Assuming &lt;code&gt;a2&lt;/code&gt; starts on cell C4.&lt;/p&gt;
&lt;p&gt;In the scenario of Full Email List vs Emails Sent case, &lt;code&gt;a1&lt;/code&gt; (Full Email List) had 4286 rows, while &lt;code&gt;a2&lt;/code&gt; (Emails Sent) had 2373 rows. Here&amp;rsquo;s the Excel function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# Excel
=IF(ISERROR(VLOOKUP(C2,$A$2:$A$4286, 1, FALSE)),&amp;quot;Not Exist&amp;quot;,&amp;quot;Exist&amp;quot; )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.extendoffice.com/documents/excel/3040-excel-check-if-value-is-in-another-column.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;finding-non-matching-rows-anti_join&#34;&gt;Finding Non-Matching Rows: anti_join()&lt;/h2&gt;
&lt;p&gt;We often need to join two columns from different data frames. Rows to be joined are &lt;em&gt;assumed&lt;/em&gt; to have the same value.&lt;/p&gt;
&lt;p&gt;Even different casing means those values will not be joined. For example: &amp;ldquo;Nigeria&amp;rdquo; and &amp;ldquo;NIGERIA&amp;rdquo; will not be joined.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s particularly useful to know which values are &lt;strong&gt;not&lt;/strong&gt; in sync when you have a list of countries and you want to join with one of the &lt;code&gt;map&lt;/code&gt; libraries (e.g., &lt;code&gt;ggmap&lt;/code&gt;). If the country is spelt differently, the join doesn&amp;rsquo;t happen.&lt;/p&gt;
&lt;p&gt;Enter anti_join:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;world_map1 &amp;lt;- world_map %&amp;gt;%
    mutate(id = region)

df1 &amp;lt;- df %&amp;gt;%
    mutate(id = country)
    
# use anti_join to figure out which rows are not aligned
anti_join(world_map1, df1, by = &amp;quot;id&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sort by Two Column</title>
      <link>/technical_notes/example_tech/postgresql_sort_two_columns/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/postgresql_sort_two_columns/</guid>
      <description>&lt;h2 id=&#34;sort-by-two-column&#34;&gt;Sort by Two Column&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You have a &lt;code&gt;Month&lt;/code&gt; and &lt;code&gt;Day&lt;/code&gt; column and you want to sort &lt;strong&gt;both&lt;/strong&gt; in descending order.&lt;/p&gt;
&lt;p&gt;Note: the last line.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;SELECT
  user_name,
  month,
  day,
  COUNT(content) AS content_count
FROM cte 
GROUP BY 1,2,3
ORDER BY month DESC, day DESC;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on Data and DAOs 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Full white background for any ggplot chart</title>
      <link>/technical_notes/example_tech/rstats_viz_white_background/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_viz_white_background/</guid>
      <description>&lt;h2 id=&#34;full-white-background-for-any-ggplot-chart&#34;&gt;Full white background for any ggplot chart&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You want a clean white background for your chart in GGPLOT, however you don&amp;rsquo;t remember how to adjust the theme().&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;
df %&amp;gt;%
  ggplot() +
  geom_col() +
  # white background
  theme_minimal() +
  theme(
        legend.position = &amp;quot;bottom&amp;quot;,
        panel.grid.major = element_line(colour = &amp;quot;white&amp;quot;),
        panel.grid.minor = element_line(colour = &amp;quot;white&amp;quot;)
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reverse Plotting</title>
      <link>/technical_notes/example_tech/rstats_tip_reverse_plotting/</link>
      <pubDate>Mon, 29 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_tip_reverse_plotting/</guid>
      <description>&lt;h2 id=&#34;left-to-right&#34;&gt;Left to Right&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: The &lt;em&gt;easiest&lt;/em&gt; way to flip bar chart arrangement on x-axis &lt;em&gt;after&lt;/em&gt; you&amp;rsquo;ve &amp;ldquo;reorder&amp;rdquo; by the y-axis values is to put a &amp;ldquo;minus&amp;rdquo; in front of the y variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# note the minus in front of content_count
df %&amp;gt;%
   ggplot(aes(x = reorder(username, -content_count), 
              y = content_count, 
              fill = num_roles_bin))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The more complicated way is to change the &lt;strong&gt;factor levels&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;top-to-bottom&#34;&gt;Top to Bottom&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: AFTER you display bar charts in a specific order because you successfully specified the 
&lt;a href=&#34;https://paulapivat.com/technical_notes/example_tech/rstats_tip_manually_order_factors/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;factor levels order&lt;/a&gt;, you simply want to reverse the order (from top-to-bottom).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;: I&amp;rsquo;ve created a specific factor order and simply want to reverse the order so what was on top is now on the bottom, using &lt;code&gt;scale_y_descrete(limits = rev())&lt;/code&gt;, the &lt;code&gt;rev()&lt;/code&gt; and &lt;code&gt;levels()&lt;/code&gt; function are used in tandem to specific the reverse.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;
new %&amp;gt;%
    count(name) %&amp;gt;%
    ggplot(aes(x = n, y = name, fill = name)) +
    geom_col() +
    geom_text(aes(label = n), hjust = -0.2, color = &amp;quot;white&amp;quot;) +
    # reverse from top to bottom on the y-axis
    # note levels for a specific column new$name already set previously
    scale_y_discrete(limits = rev(levels(new$name))) 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;right-to-left&#34;&gt;Right to Left&lt;/h2&gt;
&lt;p&gt;Works the same way, but using &lt;code&gt;scale_x_discrete&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fixing linting errors</title>
      <link>/technical_notes/example_tech/webdev_linting_error/</link>
      <pubDate>Wed, 24 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/webdev_linting_error/</guid>
      <description>&lt;h2 id=&#34;fixing-linting-errors&#34;&gt;Fixing Linting Errors&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You want to push up a Pull Request, but if any files has &lt;strong&gt;linting errors&lt;/strong&gt; it&amp;rsquo;ll be problematic with the PR.&lt;/p&gt;
&lt;h2 id=&#34;indicators-of-linting-errors&#34;&gt;Indicators of Linting Errors&lt;/h2&gt;
&lt;p&gt;When you open &lt;code&gt;terminal&lt;/code&gt; and see the &amp;ldquo;Problem&amp;rdquo; tab, linting errors will be show here. You can also see &lt;code&gt;red&lt;/code&gt; lines on any file itself. Sometimes your machine expects &amp;ldquo;tabs&amp;rdquo;, but you used &amp;ldquo;spaces&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The command to fix linting error for a particular file (change directory into the problematic file):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;$ yarn linting file_name.js --fix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving data in MongoDB</title>
      <link>/technical_notes/example_tech/mongodb_data_retrieval/</link>
      <pubDate>Tue, 23 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_data_retrieval/</guid>
      <description>&lt;h2 id=&#34;using-projection-to-limit-set-of-fields-retrieved&#34;&gt;Using Projection to Limit Set of Fields Retrieved&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You want to query a list of discordHandles or customerNames from a collection of documents (list of objects) and you don&amp;rsquo;t want &lt;em&gt;every&lt;/em&gt; field.&lt;/p&gt;
&lt;h3 id=&#34;returning-only-one-field-in-a-document&#34;&gt;Returning only one field in a document&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# list only customer names without their id
db.customers.find({}, {customerName: 1, _id: 0}).pretty()

# list discord handles without the id
db.bounties.find({}, {&amp;quot;createdBy.discordHandle&amp;quot;: 1, _id: 0}).pretty()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-comparison-operators-to-limit-number-of-documents-retrieved&#34;&gt;Using comparison operators to limit number of documents retrieved&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# list all bounties with reward amount greater than 100
db.bounties.find({&amp;quot;reward.amount&amp;quot;: {$gt: 100}}).pretty()

# list all bounties with reward less than 100
db.bounties.find({&amp;quot;reward.amount&amp;quot;: {$lt: 100}}).pretty()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Notable data types and common commands</title>
      <link>/technical_notes/example_tech/mongodb_data_types/</link>
      <pubDate>Tue, 23 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_data_types/</guid>
      <description>&lt;h2 id=&#34;data-types&#34;&gt;Data Types&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: These are specific for querying in Mongo. Good to keep these in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Text (&amp;ldquo;Max&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Boolean (true)&lt;/li&gt;
&lt;li&gt;Integer (int32) (55)&lt;/li&gt;
&lt;li&gt;NumberLong (int64) (10000000000)&lt;/li&gt;
&lt;li&gt;NumberDecimal (12.99)&lt;/li&gt;
&lt;li&gt;ObjectId  (ObjectId(&amp;ldquo;sfasd&amp;rdquo;))&lt;/li&gt;
&lt;li&gt;ISODate  (ISODate(&amp;ldquo;2021-11-23&amp;rdquo;))&lt;/li&gt;
&lt;li&gt;Timestamp (Timestamp(11421532))&lt;/li&gt;
&lt;li&gt;Embedded Document (&amp;ldquo;a&amp;rdquo;: {&amp;hellip;})&lt;/li&gt;
&lt;li&gt;Array             (&amp;ldquo;a&amp;rdquo;: [&amp;hellip;])&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;common-commands-in-mongo-shell&#34;&gt;Common Commands in Mongo Shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;To pull up quick descriptive stats for any database, type:
&lt;code&gt;db.stats()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To delete a collection, type:
&lt;code&gt;db.nameOfCollection.drop()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Importing a Collection</title>
      <link>/technical_notes/example_tech/mongodb_import_data/</link>
      <pubDate>Tue, 23 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_import_data/</guid>
      <description>&lt;h2 id=&#34;importing-data&#34;&gt;Importing Data&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You need to import an array of objects (i.e., a collection) in Mongo.&lt;/p&gt;
&lt;p&gt;Assuming you have the collection already stored in a JSON file, here&amp;rsquo;s the &lt;code&gt;shell&lt;/code&gt; command to import:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;$ mongoimport file-name.json -d databaseName -c collectionName --jsonArray --drop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The breakdown is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;-d databaseName
-c collectionName
--jsonArray  # importing an array of objects
--drop       # drop existing collection of same name to use most recent (optional)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>One-to-One Relations, Reference approach</title>
      <link>/technical_notes/example_tech/mongodb_joins/</link>
      <pubDate>Tue, 23 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_joins/</guid>
      <description>&lt;h2 id=&#34;joining&#34;&gt;Joining&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: Among many possible relationships, this is a one-to-one relation between two tables using the &amp;ldquo;Reference&amp;rdquo; &lt;strong&gt;instead&lt;/strong&gt; of the &amp;ldquo;Embedded Document&amp;rdquo; approach.&lt;/p&gt;
&lt;p&gt;Here i&amp;rsquo;m joining a &lt;code&gt;bounties&lt;/code&gt; collection with the &lt;code&gt;customers&lt;/code&gt; collection through the &lt;code&gt;customer_id&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.bounties.aggregate([
                        {$lookup: {from: &amp;quot;customers&amp;quot;, 
                                   localField: &amp;quot;customer_id&amp;quot;,
                                   foreignField: &amp;quot;customer_id&amp;quot;, 
                                   as:&amp;quot;customerName&amp;quot;}
                        }
                      ])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;joining-and-displaying-specific-fields&#34;&gt;Joining and Displaying Specific Fields&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: After joining two collections, you don&amp;rsquo;t want to print everything out, only a specific set of key-value pairs.&lt;/p&gt;
&lt;p&gt;Here I&amp;rsquo;m joining the &lt;code&gt;bounties&lt;/code&gt; and &lt;code&gt;customers&lt;/code&gt; collection and only want to display the &lt;code&gt;title&lt;/code&gt; of the bounty and the &lt;code&gt;customerName&lt;/code&gt; of the customer. (&lt;strong&gt;note&lt;/strong&gt;: To omit the &amp;ldquo;_id&amp;rdquo;, set it to &lt;code&gt;0&lt;/code&gt;.)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.bounties.aggregate([{
    $lookup: {
        from: &amp;quot;customers&amp;quot;, 
        localField: &amp;quot;customer_id&amp;quot;, 
        foreignField: &amp;quot;customer_id&amp;quot;, 
        as: &amp;quot;customerName&amp;quot;
    }
}, {
    $unwind: &amp;quot;$customerName&amp;quot;
}, {$project: {
        &amp;quot;_id&amp;quot;: 0,
        &amp;quot;title&amp;quot;: 1, 
        &amp;quot;customerName.customerName&amp;quot;: 1
    } 
}
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;pipelines-in-mongo&#34;&gt;Pipelines in Mongo&lt;/h2&gt;
&lt;p&gt;The &amp;ldquo;pipeline&amp;rdquo; here is &lt;code&gt;$lookup&lt;/code&gt; -&amp;gt; &lt;code&gt;$unwind&lt;/code&gt; -&amp;gt; &lt;code&gt;$project&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;$lookup&lt;/code&gt; to create the join. Then &lt;code&gt;$unwind&lt;/code&gt; to focus on the &amp;ldquo;result&amp;rdquo; of the &lt;code&gt;$lookup&lt;/code&gt; (&amp;ldquo;as:&amp;hellip;&amp;quot;). Finally, &lt;code&gt;$project&lt;/code&gt; to specify the specific key-value pairs you want.&lt;/p&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comparison Operators with GraphQL</title>
      <link>/technical_notes/example_tech/graphql_comparison_operators/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/graphql_comparison_operators/</guid>
      <description>&lt;h2 id=&#34;comparison-operators-with-graphql&#34;&gt;Comparison Operators with GraphQL&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: When querying a GraphQL endpoint, you might need to query from the &lt;em&gt;latest&lt;/em&gt; timestamp. You&amp;rsquo;ll need a &lt;strong&gt;comparison operator&lt;/strong&gt; for that.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s are the operators, taken from 
&lt;a href=&#34;https://stackoverflow.com/questions/45674423/how-to-filter-greater-than-in-graphql&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this stackoverflow answer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: You can add these operators to any key, for example if the column name was &amp;ldquo;created&amp;rdquo; (i.e., created at 123456789 timestamp), a query might include &lt;code&gt;created_gt&lt;/code&gt; to mean &amp;ldquo;timestamp greater than&amp;rdquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# sample query
votes(first: 1000, where: {created_gt: 123456789}) {
        id
        vote_id
        voter
        created
        proposal {
                id
        }
}

# Other comparison operators
_gt (greater than)
_lt (less than)
_gte (greater than or equal to)
_lte (less than or equal to)
_in (equal to)
_not_in (not equal to)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CRUD Operations in Mongo (Shell)</title>
      <link>/technical_notes/example_tech/mongodb_crud/</link>
      <pubDate>Thu, 11 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/mongodb_crud/</guid>
      <description>&lt;h2 id=&#34;create-read-update-delete-in-mongo-shell&#34;&gt;Create, Read, Update, Delete in Mongo (Shell)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: This is a summary of basic Mongo operations in shell. These commands can be used in create, seed test databases outside of the production database.&lt;/p&gt;
&lt;h3 id=&#34;basic-commands&#34;&gt;Basic commands&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# show available databases
show dbs

# use a database
use db_name

# show collections within database
show collections
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;delete-an-entire-collection&#34;&gt;Delete an entire collection&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.collectionName.drop()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;insert-one-document-into-a-collection&#34;&gt;Insert one document into a collection&lt;/h3&gt;
&lt;p&gt;Create a collection &lt;em&gt;and&lt;/em&gt; insert one document. Copy a document (i.e., an object or python dictionary) and paste in argument of &lt;code&gt;.insertOne()&lt;/code&gt;. What&amp;rsquo;s inserted is a single object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.newCollectionName.insertOne({})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: &lt;code&gt;MongoServerError: _id fields may not contain &#39;$&#39;-prefixed fields: $oid is not valid for storage.&lt;/code&gt; Because mongo shell automatically inserted ids:&lt;/p&gt;
&lt;p&gt;Example of two ObjectIds being inserted:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;{
  acknowledged: true,
  insertedIds: {
    &#39;0&#39;: ObjectId(&amp;quot;618d1fb2f5975b1a2ed10b91&amp;quot;),
    &#39;1&#39;: ObjectId(&amp;quot;618d1fb2f5975b1a2ed10b92&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;insert-many-documents-into-a-collection&#34;&gt;Insert many documents into a collection&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: to avoid &lt;code&gt;MongoServerError&lt;/code&gt; with &lt;code&gt;&#39;$&#39;oid is not valid for storage&lt;/code&gt; error, edit in VSCode before pasting in mongo shell.&lt;/p&gt;
&lt;p&gt;Note, parameter is an &lt;em&gt;array of objects&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.newCollectionName.insertMany([{}, {}])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;count-documents-inside-a-collection&#34;&gt;Count document(s) inside a collection&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.collection.countDocuments()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;find-document-where-integer-value--9000&#34;&gt;Find document where integer value &amp;gt; 9000&lt;/h3&gt;
&lt;p&gt;Using &lt;code&gt;$gt&lt;/code&gt; (greater than) as an example from the Bounty Board project.&lt;/p&gt;
&lt;p&gt;Alternatives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$lt&lt;/code&gt; less than&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$gte&lt;/code&gt; greater than or equal to&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.bounties2.find({&amp;quot;reward.amount&amp;quot;: {$gt: 9000} }).pretty()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;update-one-document&#34;&gt;Update one document&lt;/h3&gt;
&lt;p&gt;Updating &lt;code&gt;season&lt;/code&gt; from 1 to 2:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.bounties2.updateOne({_id: ObjectId(&amp;quot;618d2585f5975b1a2ed10b93&amp;quot;)}, {$set: {season: 2}})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;replaceone-instead-update&#34;&gt;ReplaceOne instead update&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is more tedious than updating just one field; with &lt;code&gt;replaceOne()&lt;/code&gt; you have to update &lt;strong&gt;all&lt;/strong&gt; fields otherwise, they get deleted. Arguably, this makes it more explicit (and safe) way to update.&lt;/p&gt;
&lt;p&gt;This replaces key-value pairs in the document with a specific &lt;code&gt;_id&lt;/code&gt; to only have 2 key-value pairs (erasing all others).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.bounties2.replaceOne({_id: ObjectId(&amp;quot;618d1cddf5975b1a2ed10b8f&amp;quot;)}, {season: 2, &amp;quot;title&amp;quot;: &amp;quot;Implement Changes&amp;quot;})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;print-more-than-just-20-documents&#34;&gt;Print more than just 20 documents&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;bountyboard&amp;gt; db.bounties2.find().forEach((bounties2Data) =&amp;gt; {printjson(bounties2Data)})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;return-only-one-field-in-a-document&#34;&gt;Return only one field in a document&lt;/h3&gt;
&lt;p&gt;Here we&amp;rsquo;re returning &amp;ldquo;title&amp;rdquo;, then &amp;ldquo;reward.amount&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# return title
db.bounties2.find({}, {title: 1, _id: 0}).pretty()

# return reward.amount
db.bounties2.find({}, {&amp;quot;reward.amount&amp;quot;: 1, _id: 0}).pretty()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;joining-two-collections&#34;&gt;Joining two collections&lt;/h3&gt;
&lt;p&gt;Note: Join two collections by &lt;code&gt;customerId&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.bounties2.aggregate([{ $lookup: { from: &amp;quot;customers&amp;quot;, localField: &amp;quot;customerId&amp;quot;, foreignField: &amp;quot;customerId&amp;quot;, as: &amp;quot;customerId&amp;quot; } }])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create a table to established connection with SQLAlchemy</title>
      <link>/technical_notes/example_tech/postgresql_create_table/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/postgresql_create_table/</guid>
      <description>&lt;h2 id=&#34;create-a-test-table-then-insert-data-to-establish-a-connection&#34;&gt;Create a Test Table then Insert data to establish a connection&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You want to create a quick &amp;lsquo;test&amp;rsquo; table via the &lt;code&gt;sqlalchemy&lt;/code&gt; library in Python to establish a connection with your postgres db.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# Create TEST table to confirm connection
db.execute(
    &amp;quot;CREATE TABLE IF NOT EXISTS films (title text, director text, year text)&amp;quot;)

# Insert data
db.execute(
    &amp;quot;INSERT INTO films (title, director, year) VALUES (&#39;Dune&#39;, &#39;Denis Villeneuve&#39;, &#39;2021&#39;)&amp;quot;)

# Read data
result_set = db.execute(&amp;quot;SELECT * FROM films&amp;quot;)
for r in result_set:
    print(r)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing databases in a Docker Container</title>
      <link>/technical_notes/example_tech/database_install_docker/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/database_install_docker/</guid>
      <description>&lt;h2 id=&#34;setting-up-docker-locally&#34;&gt;Setting up Docker locally&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: We need have an separate frontend-backend work environment instead of spinning up a test database in our &lt;em&gt;actual&lt;/em&gt; database.&lt;/p&gt;
&lt;p&gt;We need to separate &lt;code&gt;test environment&lt;/code&gt; from &lt;code&gt;dev/prod environment&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For demonstration, I&amp;rsquo;m pulling a docker container into my local machine to test a database for the bounty board project.&lt;/p&gt;
&lt;p&gt;Enter Docker. Assuming a dev has &lt;strong&gt;already setup&lt;/strong&gt; the docker container in a specific feature branch &lt;code&gt;feature/docker-compose-mongo&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# clone repo that contains docker container (bountyboard-docker directory is installed locally)
git clone https://github.com/jordaniza/bounty-board.git bountyboard-docker

# change directory into that directory&#39;s root
cd bountyboard-docker

# create new feature branch to match branch you want to pull locally (containing the docker container) 
git checkout -b feature/docker-compose-mongo

# pull container to your local environment
git pull origin feature/docker-compose-mongo

# change directory to folder with &amp;quot;Dockerfile&amp;quot;
cd mongo

# run command to start Docker up
docker-compose up --build

# start up (frontend) App
# install first
yarn &amp;amp;&amp;amp; yarn dev

## OPEN LOCALHOST:3000 http://localhost:3000

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;environment-variables&#34;&gt;ENVIRONMENT VARIABLES&lt;/h2&gt;
&lt;p&gt;We have to change directory into &lt;code&gt;packages/react-app/.env.local&lt;/code&gt; to create the &lt;code&gt;.env.local&lt;/code&gt; file (changed for security)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# terminal
$ code .env.local

# paste this into the newly opened file

BUILD_ENV=development
MONGODB_DB=bountyboard
#PROD_MONGODB_URI=
MONGODB_URI=mongodb://localhost:27017/bountyboard
NEXT_PUBLIC_DISCORD_SERVER_ID=8******************0
NEXT_PUBLIC_DISCORD_CHANNEL_BOUNTY_BOARD_ID=8******************0

# Public Environments
NEXT_PUBLIC_DAO_CURRENT_SEASON=1
NEXT_PUBLIC_DAO_CURRENT_SEASON_END_DATE=2021-08-31T04:00:00.000Z

# URLs
NEXT_PUBLIC_DAO_BOUNTY_BOARD_URL=https://bountyboard.bankless.community
DISCORD_BOUNTY_BOARD_WEBHOOK=

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;what-happens-when-you-pull-a-docker-container-locally&#34;&gt;What happens when you pull a Docker container locally&lt;/h2&gt;
&lt;p&gt;We are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pulling a folder for MongoDB with the latest scripts, schema, and Dockerfiles&lt;/li&gt;
&lt;li&gt;Using the docker-compose utility, &lt;code&gt;docker-compose up --build&lt;/code&gt; to fire up a Mongo container, and a temporary seeding container&lt;/li&gt;
&lt;li&gt;The seeding container runs a set of bash scripts to populate the DB
you can see this in &lt;code&gt;mongo/seed.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;opening-additional-terminal-windows-mongo&#34;&gt;Opening Additional Terminal windows: Mongo&lt;/h2&gt;
&lt;p&gt;Once, I ran &lt;code&gt;yarn dev&lt;/code&gt; I got the Application to fire up, &lt;code&gt;ready - started server on 0.0.0.0:3000, url: http://localhost:3000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;but &lt;code&gt;Mongo&lt;/code&gt; wasn&amp;rsquo;t turned on.&lt;/p&gt;
&lt;p&gt;First, open up a new terminal, then:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;docker exec -it mongo_mongo_1 bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Install DOCKER in VSCode to follow along&lt;/p&gt;
&lt;p&gt;Find the Container that&amp;rsquo;s a GREEN TRIANGLE, right click, then &lt;code&gt;attach shell&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This did not work, so I needed to open a 3rd Terminal to type in:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;docker exec -it mongo_mongo_1 bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;exec&lt;/code&gt; executes a command &lt;code&gt;-it&lt;/code&gt; starts an interactive terminal session &lt;code&gt;mongo_mongo_1&lt;/code&gt; is the name of the container and &lt;code&gt;bash&lt;/code&gt; is the shell.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You should see something like &lt;code&gt;root@4d5cedd1a8a7:/#&lt;/code&gt;, then type in the following to fire up &lt;strong&gt;Mongo Shell&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;mongosh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another confirmation is &lt;code&gt;Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&amp;amp;serverSelectionTimeoutMS=2000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;At this point you can do basic Mongo commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;show collections
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: I was on the &lt;code&gt;test&amp;gt;&lt;/code&gt; database and needed to switch to &lt;code&gt;bountyboard&amp;gt;&lt;/code&gt; database where the &amp;ldquo;test&amp;rdquo; data was located and ready for testing.&lt;/p&gt;
&lt;p&gt;Other commands to run are &lt;code&gt;findOne()&lt;/code&gt; or &lt;code&gt;find()&lt;/code&gt; just to see the &lt;em&gt;seeded&lt;/em&gt; data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db.bounties.findOne()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; I did not get the front end to work so for this session, we only tested the database by querying in Mongo shell.&lt;/p&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Delete a table</title>
      <link>/technical_notes/example_tech/postgresql_delete_table/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/postgresql_delete_table/</guid>
      <description>&lt;h2 id=&#34;delete-a-table&#34;&gt;Delete a table&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: Sometimes when testing a pipeline, you mess up a table (e.g., append the wrong index), you just need to delete and start over.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;TRUNCATE TABLE public.name_of_table;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on Data and DAOs 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Copy to new table</title>
      <link>/technical_notes/example_tech/postgresql_copy_to_new_table/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/postgresql_copy_to_new_table/</guid>
      <description>&lt;h2 id=&#34;copy-existing-table-to-a-new-table&#34;&gt;Copy existing table to a new table&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: Useful to create &amp;lsquo;tests&amp;rsquo; tables while testing a new data pipeline. You can preserve the original in case you need to Write to or Update a table.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;CREATE TABLE new_table AS
TABLE original_table
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Connecting to postgresql database</title>
      <link>/technical_notes/example_tech/postgresql_connecting_sqlalchemy/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/postgresql_connecting_sqlalchemy/</guid>
      <description>&lt;h2 id=&#34;connecting-to-postgresql-database-with-python&#34;&gt;Connecting to postgresql database with python&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You need to establish connection to an existing table in your postgresql database in order to build a data pipeline into it.&lt;/p&gt;
&lt;p&gt;I use &lt;code&gt;sqlalchemy&lt;/code&gt; to work with existing tables in postgresql. In this project, I connected to a GraphQL API endpoint with &lt;code&gt;requests&lt;/code&gt; and the &lt;code&gt;json&lt;/code&gt; library is needed to work with JSON and &lt;code&gt;pandas&lt;/code&gt; for dataframes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;import sqlalchemy
from sqlalchemy import create_engine
from sqlalchemy import text

import requests
import json
import pandas as pd
from pprint import pprint
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;making-a-connection&#34;&gt;Making a connection&lt;/h2&gt;
&lt;p&gt;With &lt;code&gt;sqlalchemy&lt;/code&gt; we use the &lt;code&gt;create_engine()&lt;/code&gt; function. Here we&amp;rsquo;re reading a table and doing some data manipulation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;db_string = &#39;postgresql://user:password@localhost:port/mydatabase&#39;
db = create_engine(db_string)

# once a database connection is established, we can select pieces of data we want from a table:

# Query existing postgres table: stg_subgraph_bank
# read from stg_subgraph_bank to select MAX (tx_timestamp)
# then, set to variable max_tx_timestamp

with db.connect() as conn:
    result = conn.execute(
        text(&amp;quot;SELECT MAX(tx_timestamp) AS max_tx_timestamp, MAX(id) AS max_id FROM stg_subgraph_bank_1&amp;quot;))
    for row in result:
        max_tx_timestamp = row.max_tx_timestamp
        max_id = row.max_id
        print(&amp;quot;new max_tx_timestamp: &amp;quot;, max_tx_timestamp)
        print(&amp;quot;new max_id: &amp;quot;, max_id)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on Data and DAOs 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prep dataframe to insert to database</title>
      <link>/technical_notes/example_tech/pipeline_prep_index_before_insert_to_db/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/pipeline_prep_index_before_insert_to_db/</guid>
      <description>&lt;h2 id=&#34;prep-dataframe-to-insert-to-database&#34;&gt;Prep dataframe to insert to database&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: When inserting to postgresql with sqlalchemy, the &lt;code&gt;to_sql()&lt;/code&gt; function works, but we need to make sure we&amp;rsquo;re appending the &lt;code&gt;id&lt;/code&gt; (primary key) column the right way &amp;ndash; incrementally.&lt;/p&gt;
&lt;p&gt;This will involve manipulating the dataframe with by incremeting with the &lt;code&gt;max_id&lt;/code&gt; before using &lt;code&gt;reset_index()&lt;/code&gt; to create an additional column using the natural index, then setting the &lt;code&gt;index=False&lt;/code&gt; parameter.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# change column name
# id, graph_id, amount_display, from_address, to_address, tx_timestamp, timestamp_display

# use rename function to change Two column names, set inplace=False to preserve original dataframe column name
df2 = df.rename(columns={&#39;id&#39;: &#39;graph_id&#39;,
                         &#39;timestamp&#39;: &#39;tx_timestamp&#39;}, inplace=False)


# reorder dataframe column using list of names
# list of names (in same order as stg_subgraph_bank)
list_of_col_names = [&#39;graph_id&#39;, &#39;amount_display&#39;, &#39;from_address&#39;,
                     &#39;to_address&#39;, &#39;tx_timestamp&#39;, &#39;timestamp_display&#39;]
df2 = df2.filter(list_of_col_names)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This next part is KEY:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;df2.index += max_id  # increment with max_id
df2 = df2.reset_index()  # reset index to later increment with max_id

df3 = df2.rename(columns={&#39;index&#39;: &#39;id&#39;}, inplace=False)

# only do this step if you&#39;ve made sure to duplicate a test table in postgresql, then ensure that the dataframe is in the same shape as the postgresql table
df3.to_sql(&#39;stg_subgraph_bank_1&#39;, con=db, if_exists=&#39;append&#39;, index=False)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Select a range of rows</title>
      <link>/technical_notes/example_tech/postgresql_select_range_of_rows/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/postgresql_select_range_of_rows/</guid>
      <description>&lt;h2 id=&#34;select-a-range-of-rows&#34;&gt;Select a range of rows&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: This is most useful if your data table does not have a primary key. You can use the table&amp;rsquo;s natural index.&lt;/p&gt;
&lt;p&gt;Here is a way to select a range of rows. &lt;strong&gt;OFFSET&lt;/strong&gt; value is the number of rows to skip (here skipping &lt;code&gt;20500&lt;/code&gt; rows before returning any rows). &lt;strong&gt;ALL&lt;/strong&gt; indicates the max number of rows to return.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;SELECT * FROM table
LIMIT ALL OFFSET 20500
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you wanted to start on row 15 and only return 10 rows, the query would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;SELECT * FROM table
LIMIT 10 OFFSET 15
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use pgAdmin to upload CSV to Postgres</title>
      <link>/technical_notes/example_tech/sql_upload_csv_postgres_pgadmin/</link>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/sql_upload_csv_postgres_pgadmin/</guid>
      <description>&lt;h2 id=&#34;use-pgadmin-to-upload-csv-to-postgres-quick--dirty&#34;&gt;Use pgAdmin to upload CSV to Postgres (Quick &amp;amp; Dirty)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: There are many ways to upload CSV into Postgres. This is the relatively quick and dirty way. This represents an infrequent step where we happen to be loading a 20,000+ rows as a one-time event with subsequent smaller, more regular, events.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;: The example below is part of a larger process of querying GraphQL in JSON and converting it to Pandas dataframe before getting it into Postgres. Here we are using a mixture of Excel and pgAdmin (Postgres client) to get the job done.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: pgAdmin happens to be the Postgresql-client I&amp;rsquo;m using, but any client could work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pre-requisite Steps&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a database table in pgAdmin. Ideally, the columns are defined and consistent with the CSV data that&amp;rsquo;s about to be uploaded.
1a. Assuming a table has already been created, we will be using the &lt;code&gt;INSERT&lt;/code&gt; statement, otherwise, it would be a &lt;code&gt;CREATE TABLE&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To &lt;code&gt;INSERT&lt;/code&gt; table, you&amp;rsquo;ll right click on a table (here we&amp;rsquo;re using, &amp;lsquo;stg_subgraph_bank&amp;rsquo;), select Scripts&amp;hellip;,then &lt;code&gt;INSERT Scripts&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following or close variation should appear. Here we are &lt;em&gt;inserting into&lt;/em&gt; the &lt;code&gt;stg_subgraph_bank&lt;/code&gt; table. In this example, there are 6 columns: &lt;code&gt;to_address&lt;/code&gt;, &lt;code&gt;amount_display&lt;/code&gt;, &lt;code&gt;from_address&lt;/code&gt;, &lt;code&gt;graph_id&lt;/code&gt;, &lt;code&gt;tx_timestamp&lt;/code&gt; and &lt;code&gt;timestamp_display&lt;/code&gt;.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;The &lt;code&gt;TRUNCATE TABLE&lt;/code&gt; is to remove existing data before inserting new data (if needed).&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;TRUNCATE TABLE public.stg_subgraph_bank;

INSERT INTO public.stg_subgraph_bank(
	to_address, amount_display, from_address, graph_id, tx_timestamp, timestamp_display)
	VALUES (?, ?, ?, ?, ?, ?);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we&amp;rsquo;re turning to Excel to prepare the data that will ultimately replace &amp;ldquo;VALUE (?, ?, ?, ?, ?, ?)&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;There is a &lt;code&gt;CONCATENATE&lt;/code&gt; function in Excel that converts data from rows/columns (CSV format) into parentheses of string values.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;=CONCATENATE(&amp;quot;(&#39;&amp;quot;,C2,&amp;quot;&#39;,&#39;&amp;quot;,A2,&amp;quot;&#39;,&amp;quot;,B2,&amp;quot;&#39;,&#39;&amp;quot;,E2,&amp;quot;&#39;,&#39;&amp;quot;,D2,&amp;quot;&#39;),&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that&amp;rsquo;s been created in Excel, we&amp;rsquo;re copying and pasting all 20,000+ rows (or however many) back into pgAdmin.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a truncated version of the 20,000+ rows of data with the &lt;code&gt;TRUNCATE&lt;/code&gt; command to remove existing data before inserting new data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;TRUNCATE TABLE public.stg_subgraph_bank;

INSERT INTO public.stg_subgraph_bank(
	to_address, amount_display, from_address, graph_id, tx_timestamp, timestamp_display)
	VALUES 
	(&#39;0x7a250d5630b4cf539739df2c5dacb4c659f2488d&#39;,&#39;14897.1883870177&#39;,&#39;0x59c1349bc6f28a427e78ddb6130ec669c2f39b48&#39;,&#39;0x0f433138b2a8f2997ef387ffcebec7cd204ab2053c43f8d4a6efaa74eddc0e0c-23&#39;,&#39;1620159318&#39;,&#39;Tue, 04 May 2021 20:15:18 GMT&#39;),
(&#39;0x156d3129b2fd634d5b0817132401aa68b0126098&#39;,&#39;14897.1883870177&#39;,&#39;0x7a250d5630b4cf539739df2c5dacb4c659f2488d&#39;,&#39;0x0f433138b2a8f2997ef387ffcebec7cd204ab2053c43f8d4a6efaa74eddc0e0c-27&#39;,&#39;1620159318&#39;,&#39;Tue, 04 May 2021 20:15:18 GMT&#39;),
(&#39;0x11ebc944350df20940fb10dd8782d654d6aad8c6&#39;,&#39;37422.0374220399&#39;,&#39;0x9d1f1847582261be41f5a54e8b60cad21400c74f&#39;,&#39;0x355666cd33644fd05b36a54e4ddcd14190a71eea08a291731b6cd9ec8950a199-387&#39;,&#39;1620159318&#39;,&#39;Tue, 04 May 2021 20:15:18 GMT&#39;),
(&#39;0x5e7a1573620e0df38e41dd302f68d7d8e5b99bba&#39;,&#39;3231.14250158999&#39;,&#39;0x9d1f1847582261be41f5a54e8b60cad21400c74f&#39;,&#39;0x98f688d6adcdbb1a395b21c8f30b81ef0da8454d863e6d6f9a03305c082bae82-263&#39;,&#39;1620159320&#39;,&#39;Tue, 04 May 2021 20:15:20 GMT&#39;),
(&#39;0x2db3c0f42022fdc8dfe70036fee85e48a24b88af&#39;,&#39;3949.39809822999&#39;,&#39;0xfe8cac7dc7ac38da9ba540eb4d1797d0417dcc41&#39;,&#39;0xc9e209771502f73334340eeea2b943f98d9663a9b1eb4370d23f34a3c860c007-106&#39;,&#39;1620159320&#39;,&#39;Tue, 04 May 2021 20:15:20 GMT&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then run the query and the new data should populate the table.&lt;/p&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Check Equality of Two Columns</title>
      <link>/technical_notes/example_tech/sql_check_equality_two_columns/</link>
      <pubDate>Mon, 01 Nov 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/sql_check_equality_two_columns/</guid>
      <description>&lt;h2 id=&#34;check-equality-of-two-columns&#34;&gt;Check Equality of Two Columns&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: There are two tables with two columns with different names. You want a simple script to check if the rows of those columns are equal, so the two tables can be joined.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the SQL script, taken from 
&lt;a href=&#34;https://stackoverflow.com/questions/1632792/how-do-i-compare-two-columns-for-equality-in-sql-server/1632831&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this stackoverflow answer&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;
SELECT 
  CASE WHEN COLUMN1 = COLUMN2 
    THEN &#39;1&#39; 
    ELSE &#39;0&#39; 
  END 
  AS MyDesiredResult
FROM Table1
INNER JOIN Table2 ON Table1.PrimaryKey = Table2.ForeignKey

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s an application of this script used in &lt;strong&gt;DAO Dash&lt;/strong&gt;. We are comparing two tables - &lt;code&gt;discord_user&lt;/code&gt; and &lt;code&gt;discord_messages&lt;/code&gt; by these two columns respectively:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;discord_user_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;author_user_id&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;SELECT 
  CASE WHEN discord_user_id = author_user_id 
    THEN &#39;1&#39;
    ELSE &#39;0&#39;
  END
  AS AreColumnsEqual
FROM discord_user d
INNER JOIN discord_messages m ON d.discord_user_id = m.author_user_id 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Database Design Course by Caleb Curry</title>
      <link>/technical_notes/example_tech/database_design_tips/</link>
      <pubDate>Tue, 26 Oct 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/database_design_tips/</guid>
      <description>&lt;h2 id=&#34;introduction-to-database-design&#34;&gt;Introduction to Database Design&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: There are notes from an 
&lt;a href=&#34;https://www.youtube.com/watch?v=ztHopE5Wnpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;8 hour course on YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TLDR&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;What is the relationship between entities (tables)? Physically draw out the lines and relationships (cardinality)
&lt;ol&gt;
&lt;li&gt;one-to-one&lt;/li&gt;
&lt;li&gt;one-to-many (&amp;lsquo;many&amp;rsquo; side is the Foreign Key)&lt;/li&gt;
&lt;li&gt;many-to-many (break into two one-to-many relationships w/ intermediary table)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Do we need Lookup Tables?&lt;/li&gt;
&lt;li&gt;Design Data Tables for Integrity
&lt;ol&gt;
&lt;li&gt;Entity Integrity - ID for uniqueness
&lt;ol&gt;
&lt;li&gt;Ensure Atomic Values (Natural Keys, if cannot, then add surrogate keys)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Referential Integrity - connect tables between Foreign Keys to Primary Keys&lt;/li&gt;
&lt;li&gt;Domain Integrity - identify data types of each variable (i.e., numeric, string, date)&lt;/li&gt;
&lt;li&gt;No repeating data&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Identify which foreign key is NOT NULL (surrogate id will Auto-Increment) (modality)&lt;/li&gt;
&lt;li&gt;Normalize the data
&lt;ol&gt;
&lt;li&gt;1 NF (first normal form) - atomicity&lt;/li&gt;
&lt;li&gt;2 NF (second normal form) - partial depenency&lt;/li&gt;
&lt;li&gt;3 NF (third normal form) - transitive dependency (solution: take problematic columns and split into their own tables with foreign key)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Foreign Key Constraints; SQL statements:
&lt;ol&gt;
&lt;li&gt;ON DELETE
&lt;ol&gt;
&lt;li&gt;RESTRICT&lt;/li&gt;
&lt;li&gt;CASCADE&lt;/li&gt;
&lt;li&gt;SET NULL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;ON UPDATE
&lt;ol&gt;
&lt;li&gt;RESTRICT&lt;/li&gt;
&lt;li&gt;CASCADE&lt;/li&gt;
&lt;li&gt;SET NULL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Deteremine which JOIN is needed to get the best &amp;ldquo;view&amp;rdquo;; which table goes after the FROM statement (which table is on the left?)
&lt;ol&gt;
&lt;li&gt;INNER JOIN&lt;/li&gt;
&lt;li&gt;LEFT JOIN&lt;/li&gt;
&lt;li&gt;SELF JOIN&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;What is a Relational Database?&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Entity (Rows)
&lt;ol&gt;
&lt;li&gt;Entity = User (a person, an object)&lt;/li&gt;
&lt;li&gt;Row = all attribute values for an entity&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Attribute (Columns)
&lt;ol&gt;
&lt;li&gt;Attributes are &lt;em&gt;about&lt;/em&gt; an entity (user name, name, password, address etc)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Mathematical name for a Row is a Tuple&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;RDBMS&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;View Mechanism changes the how data is presented (i.e., we don&amp;rsquo;t want all rows x columns, just a subset)
&lt;ol&gt;
&lt;li&gt;Select only certain columns&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;View = Read Only (not everyone has access to Update for security purpose)&lt;/li&gt;
&lt;li&gt;RDBMS allows &amp;ldquo;transactions&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Example: MySQL, SQL Server, PostgreSQL (open source)&lt;/li&gt;
&lt;li&gt;Database &amp;amp; Relational Database are not separate things&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;SQL&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Define structure (DDL, data definition language)
&lt;ol&gt;
&lt;li&gt;CREATE,&lt;/li&gt;
&lt;li&gt;structure &amp;amp; connection between tables - JOIN&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Manipulates data (DML, data manipulation language) -
&lt;ol&gt;
&lt;li&gt;UPDATE&lt;/li&gt;
&lt;li&gt;data within tables&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;What is Database Design?&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Separate information into multiple tables, while preventing data integrity issues&lt;/li&gt;
&lt;li&gt;How do you measure whether a database is &amp;ldquo;good&amp;rdquo; or &amp;ldquo;bad&amp;rdquo;? &amp;ndash;&amp;gt; Data Integrity&lt;/li&gt;
&lt;li&gt;Good design prevents &amp;ldquo;data integrity issues&amp;rdquo;
&lt;ol&gt;
&lt;li&gt;All data up to date&lt;/li&gt;
&lt;li&gt;No repeating data&lt;/li&gt;
&lt;li&gt;No incorrect data&lt;/li&gt;
&lt;li&gt;No broken relationships&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Conceptual Schema: How data is related.&lt;/li&gt;
&lt;li&gt;Logical Schema: Table structures (i.e., X number of columns, data types), number of tables&lt;/li&gt;
&lt;li&gt;Physical Schema: Implementing into database, table types, what server? how will people access?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Data Integrity&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Entity integrity
&lt;ol&gt;
&lt;li&gt;ID is used to enforce uniqueness of an entity (user)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Referential integrity
&lt;ol&gt;
&lt;li&gt;Foreign key constrains&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Domain integrity
&lt;ol&gt;
&lt;li&gt;Range of what we&amp;rsquo;re storing (correct Data Types; integers, text or dates)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Note: Relational Database does not come from the word &amp;ldquo;relationship&amp;rdquo;, it comes from Relations which is a mathematical connection between Sets&lt;/li&gt;
&lt;li&gt;When we don&amp;rsquo;t have data integrity, we have errors&lt;/li&gt;
&lt;li&gt;When we have errors, data integrity allows us to correct those errors&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Database Terms (Review)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Data&lt;/li&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;Relational Database (stores things in tables)&lt;/li&gt;
&lt;li&gt;DBMS (how to control database)&lt;/li&gt;
&lt;li&gt;RDBMS&lt;/li&gt;
&lt;li&gt;Null (when someone doesn&amp;rsquo;t enter a value)&lt;/li&gt;
&lt;li&gt;Anomolies (errors)&lt;/li&gt;
&lt;li&gt;Integrity (protect against anomolies)
&lt;ol&gt;
&lt;li&gt;Entity&lt;/li&gt;
&lt;li&gt;Referential - keep connection through Foreign Keys and Primary Keys&lt;/li&gt;
&lt;li&gt;Domain - correct data types&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Entity - what we store&lt;/li&gt;
&lt;li&gt;Attributes*** - things about an entity&lt;/li&gt;
&lt;li&gt;Relations* - connection between two sets or Tables&lt;/li&gt;
&lt;li&gt;Tuple** or Row (all attributes about an entity)&lt;/li&gt;
&lt;li&gt;Table* - physical representation of
&lt;ol&gt;
&lt;li&gt;Rows**&lt;/li&gt;
&lt;li&gt;Columns***&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;File* (aka Table)&lt;/li&gt;
&lt;li&gt;Record** (aka Row)&lt;/li&gt;
&lt;li&gt;Field*** (aka Column)&lt;/li&gt;
&lt;li&gt;Value (something in a column)&lt;/li&gt;
&lt;li&gt;Entry (aka a Row)&lt;/li&gt;
&lt;li&gt;DB Design - process of designing table to have integrity&lt;/li&gt;
&lt;li&gt;Schema - structure of tables&lt;/li&gt;
&lt;li&gt;Normalization - steps to get the best data base design&lt;/li&gt;
&lt;li&gt;Naming Convention - consistency in naming&lt;/li&gt;
&lt;li&gt;Keys - something to make things in unique in a table and connect between tables&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;More Database Terms&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SQL
&lt;ol&gt;
&lt;li&gt;DDL data define language&lt;/li&gt;
&lt;li&gt;DML data manipulation language&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;SQL Keywords - reserved words (e.g., SELECT)&lt;/li&gt;
&lt;li&gt;Frontend - we program frontends so people can securely access the database (doesn&amp;rsquo;t allow us to type in SQL)&lt;/li&gt;
&lt;li&gt;Backend - serverside code to communicate with database&lt;/li&gt;
&lt;li&gt;Client side&lt;/li&gt;
&lt;li&gt;Server side - serves instances of the database to the client&lt;/li&gt;
&lt;li&gt;Server side scripting language&lt;/li&gt;
&lt;li&gt;Views - taking data from database and illustrating it in a different from how it&amp;rsquo;s stored&lt;/li&gt;
&lt;li&gt;Joins - connect data from multiple tables
&lt;ol&gt;
&lt;li&gt;ID foreign key connection&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Atomic Values&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Everything in a database should be about 1 thing&lt;/li&gt;
&lt;li&gt;Example: &amp;ldquo;Paul Apivat Hanvongse&amp;rdquo; &amp;ndash; to make it atomic, create 3 separate columns (i.e., nickname, first name, last name)&lt;/li&gt;
&lt;li&gt;Atom - smallest indivisible piece (1 thing) but still makes sense to treat as 1 thing
&lt;ol&gt;
&lt;li&gt;example: Address - street, city, state, zip code (3 columns)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Relationships&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Relationship - connects two or more entities&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example:
(Entities)
Database &amp;ndash;&amp;gt; Student - Attribute
&amp;ndash;&amp;gt; Professor - Attribute
&amp;ndash;&amp;gt; Class - Attribute
&amp;ndash;&amp;gt; Major - Attribute&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s multiple relationships here; Student have a Major, Students are in a Class, Professors are part of a Major, Professors teach a Class.&lt;/p&gt;
&lt;p&gt;One-to-One&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;One Entity has connection with another Entity (e.g., Husband - Wife)&lt;/li&gt;
&lt;li&gt;Social security number unique to one person&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One-to-Many&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Comments under a Youtube video;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;User &amp;ndash;&amp;gt; Comment 1
&amp;ndash;&amp;gt; Comment 2
&amp;ndash;&amp;gt; Comment 3&lt;/p&gt;
&lt;p&gt;Many-to-Many&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Polygamous marriage (i.e., Multiple husbands have multiple wives)&lt;/li&gt;
&lt;li&gt;College: Class &amp;amp; Students; class can have multiple students &amp;amp; students can take multiple classes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Designing One-to-One Relationships&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Example: Person and Username&lt;/li&gt;
&lt;li&gt;Generally One-to-one relations are stored in the same table&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;user_name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Apivat&lt;/td&gt;
&lt;td&gt;Paul&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Caleb&lt;/td&gt;
&lt;td&gt;Caleb_Curry&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;There are times when one-to-one relations are stored in &lt;em&gt;different&lt;/em&gt; tables (when you want to store &lt;em&gt;extra&lt;/em&gt; attributes &lt;em&gt;about&lt;/em&gt; the attribute)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cardholder Entity         &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;first_name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;last_name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;card_id&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(card_id &amp;lt;&amp;ndash;&amp;gt; ID )&lt;/p&gt;
&lt;p&gt;Card&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;card_number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;issue_date&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;late_fees&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Summary - One-to-One Relationship&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Store attribute of the entity in the table&lt;/li&gt;
&lt;li&gt;OR use another table and connect with a foreign_key&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Designing One-to-Many Relationships&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &amp;ldquo;many&amp;rdquo; side is a foreign key to the &amp;ldquo;one&amp;rdquo; side&lt;/li&gt;
&lt;li&gt;User id stays the same.&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;User&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;user_id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(multiple cards)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Card&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;card_id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user_id&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Card2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;card2_id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user_id&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Card3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;card3_id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user_id&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Parent Tables and Child Tables&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tables are either Parent or Child&lt;/li&gt;
&lt;li&gt;Keys keep tables Unique&lt;/li&gt;
&lt;li&gt;Primary key = Parent (User ID)&lt;/li&gt;
&lt;li&gt;Foreign key = Child (user_id as a reference to User ID)&lt;/li&gt;
&lt;li&gt;Child points back to Parents&lt;/li&gt;
&lt;li&gt;In one-to-one, we don&amp;rsquo;t have to worry about parent or child&lt;/li&gt;
&lt;li&gt;In one-to-many, many Children point to a Parent&lt;/li&gt;
&lt;li&gt;When we have a Child table, we always know the Parent (but not vice versa)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Notation&lt;/strong&gt;
One to One &amp;ndash;&amp;gt; 1 : 1
One to Many &amp;ndash;&amp;gt; 1 : N
Many to Many &amp;ndash;&amp;gt; M : N&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Designing Many-to-Many Relationships&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;M : N&lt;/li&gt;
&lt;li&gt;Classes : Students&lt;/li&gt;
&lt;li&gt;Parent &amp;lt;&amp;ndash;&amp;gt; Parent&lt;/li&gt;
&lt;li&gt;Solution: Break it up to TWO One-to-Many Relationships with an INTERMEDIARY or JUNCTION table to connect&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;63&lt;/td&gt;
&lt;td&gt;math&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;science&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;89&lt;/td&gt;
&lt;td&gt;english&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;Student&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;John&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;Jake&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;Sally&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Claire&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Intermediary Table
(Child Table for both Parents)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;class_id&lt;/th&gt;
&lt;th&gt;student_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;89&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;63&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;89&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;89&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;63&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;89&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Summary of Relationships&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Now we can design every &amp;ldquo;binary relationship&amp;rdquo; - any relationship between two Entities&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Introduction to Keys&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Keys should be Unique&lt;/li&gt;
&lt;li&gt;Never Changing&lt;/li&gt;
&lt;li&gt;Never NULL&lt;/li&gt;
&lt;li&gt;What should be unique? (e.g., a user e-mail)
&lt;ol&gt;
&lt;li&gt;Could be a &lt;em&gt;Natural Key&lt;/em&gt; (already in the table, no need to define a new column)&lt;/li&gt;
&lt;li&gt;Could be &lt;em&gt;user name&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Key should be Never Changing (otherwise database integrity is compromised)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Primary Key Index&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Index - think Index in a Book;&lt;/li&gt;
&lt;li&gt;Index points you to the data&lt;/li&gt;
&lt;li&gt;Keys are a type of Index&lt;/li&gt;
&lt;li&gt;Indexs are used for
&lt;ol&gt;
&lt;li&gt;SELECT * FROM&lt;/li&gt;
&lt;li&gt;WHERE first_name = &amp;lsquo;Caleb&amp;rsquo;     (need index for this)&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Look Up Table&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Example look-up table of member status:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;member_status id is the foreign key that can point to a members table&lt;/li&gt;
&lt;li&gt;all connections stay the same even if member_status changes&lt;/li&gt;
&lt;li&gt;can set Foreign Key constraints&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;member_status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;gold&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;silver&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;bronze&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;first_quest_complete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;guess_pass&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;level_1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;level_2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;level_3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(where member_status &amp;amp; student_id are One-to-Many)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;student&lt;/th&gt;
&lt;th&gt;member_status_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;John&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;Jake&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;Sally&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Claire&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(where member_status &amp;amp; student_id are Many-to-Many)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;student_id&lt;/th&gt;
&lt;th&gt;member_status_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Lookup Tables (w Keys) allow for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Integrity&lt;/li&gt;
&lt;li&gt;Uniqueness&lt;/li&gt;
&lt;li&gt;Improves functionality (no repeating data)&lt;/li&gt;
&lt;li&gt;Less work&lt;/li&gt;
&lt;li&gt;Allows for added complexity&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Superkey and Candidate Key&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Two main kinds of keys:
&lt;ol&gt;
&lt;li&gt;Primary Key&lt;/li&gt;
&lt;li&gt;Foreign Key&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Superkey&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Any number of columns that forces each row to be unique&lt;/li&gt;
&lt;li&gt;How do we know each row is unique and talks about one entity (user)?&lt;/li&gt;
&lt;li&gt;Superkey = any number column values  to force that each row is unique&lt;/li&gt;
&lt;li&gt;Candidate key = the least number of column to force every row to be unique (ie., username)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You&amp;rsquo;ll never program a superkey&lt;/p&gt;
&lt;p&gt;Candidate Key&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Superkey is asking: &amp;ldquo;Can every row be unique?&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Then, once we answer yes, Candidate key asks: &amp;ldquo;How many columns are needed (to force every row to be unique) ?&amp;rdquo; &amp;ndash; what&amp;rsquo;s the least number of columns&lt;/li&gt;
&lt;li&gt;Then, &amp;ldquo;How many Candidate Keys do we have?&amp;rdquo;&lt;/li&gt;
&lt;li&gt;THEN, decide which Candidate Key will be the PRIMARY KEY.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Primary Key &amp;amp; Alternate Keys&lt;/strong&gt;
Primary Key Possibilities&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;username*&lt;/li&gt;
&lt;li&gt;email&lt;/li&gt;
&lt;li&gt;full name, last name, middle name, address, birthday&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;*out of these three, username is the best primary key&lt;/p&gt;
&lt;p&gt;What are the criteria for choosing a Primary Key?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UNIQUE&lt;/li&gt;
&lt;li&gt;NEVER CHANGING&lt;/li&gt;
&lt;li&gt;NEVER NULL&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Primary keys can also be an Index (use Select statement and how you connect most of your data).&lt;/p&gt;
&lt;p&gt;Keys &lt;em&gt;not&lt;/em&gt; chosen to be the Primary Key become the Alternate Keys. Alternate Keys can be useful - you could use &amp;ldquo;email&amp;rdquo; (an alternate key) as an Index.&lt;/p&gt;
&lt;p&gt;SELECT * FROM table
WHERE email = &amp;ldquo;&lt;a href=&#34;mailto:value@gmail.com&#34;&gt;value@gmail.com&lt;/a&gt;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Surrogate Keys and Natural Keys&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;These are &amp;ldquo;categories&amp;rdquo; of Primary Keys&lt;/li&gt;
&lt;li&gt;You won&amp;rsquo;t search for these, but you&amp;rsquo;ll Design the Database with these in mind&lt;/li&gt;
&lt;li&gt;Natural Keys are NATURALLY in the table; they fit requirements for Primary Keys and already &lt;em&gt;in&lt;/em&gt; the table (email, username)&lt;/li&gt;
&lt;li&gt;Surrogate Keys are ADDED to your table (i.e., &lt;em&gt;id&lt;/em&gt;); they AUTO-INCREMENT
&lt;ol&gt;
&lt;li&gt;user &amp;ndash;&amp;gt; user_id&lt;/li&gt;
&lt;li&gt;sale &amp;ndash;&amp;gt; sale_id&lt;/li&gt;
&lt;li&gt;comment &amp;ndash;&amp;gt; comment_id&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Should I use Surrogate Keys or Natural Keys?&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Natural keys = already there, but not always obvious which should e natural key&lt;/li&gt;
&lt;li&gt;Surrogate keys = easy, but you have to add a new column&lt;/li&gt;
&lt;li&gt;Choose one or the other
&lt;ol&gt;
&lt;li&gt;minor performance differences&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Caleb personally uses Surrogate Key
&lt;ol&gt;
&lt;li&gt;Example:    user &amp;ndash;&amp;gt; user_id&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Foreign Key&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Foreign Key References a Primary Key (either same table or separate table)&lt;/li&gt;
&lt;li&gt;Every table has ONE Primary Key (could be composed of many columns)&lt;/li&gt;
&lt;li&gt;Every table can have MULTIPLE Foreign Keys referencing many other tables&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Not NULL Foreign Keys&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Foreign Key constraints&lt;/li&gt;
&lt;li&gt;Every row is required to have a value if the column has &amp;ldquo;not Null&amp;rdquo;&lt;/li&gt;
&lt;li&gt;related to Cardinality&lt;/li&gt;
&lt;li&gt;(NOTE: sometimes you don&amp;rsquo;t want to set &amp;ldquo;Not NULL&amp;rdquo; because  an id doesn&amp;rsquo;t currently exist; but sometimes you want to force that relationship to be there between Foreign Key and Primary Key)&lt;/li&gt;
&lt;li&gt;you either want Not NULL or Not Required (depending on the situation)&lt;/li&gt;
&lt;li&gt;Primary Key values should never change, Foreign Key values &lt;em&gt;can&lt;/em&gt; change&lt;/li&gt;
&lt;li&gt;We don&amp;rsquo;t want Primary Key values to change, but we could have Foreign Key references change (?)&lt;/li&gt;
&lt;li&gt;Primary Key and Foreign Key should be the same data type&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Foreign Key Constraints&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;FK = Referential Integrity&lt;/li&gt;
&lt;li&gt;Make sure if you update Parent, ZChildren will update&lt;/li&gt;
&lt;li&gt;Prevent creating Children if there&amp;rsquo;s no Parent&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SQL Statements that talk about FK constraints and refer to the Parent (Primary Key)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ON DELETE = when we delete the Parent, we want to delete the Child
&lt;ol&gt;
&lt;li&gt;RESTRICT = (no action) throw an error whenever the Parent is deleted&lt;/li&gt;
&lt;li&gt;CASCADE = whatever we do to Parent, we do to Child (delete parent, delete child)&lt;/li&gt;
&lt;li&gt;SET NULL = if delete Parent, sets Child to NULL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;ON UPDATE = when we update the Parent, we want to update the Child
&lt;ol&gt;
&lt;li&gt;RESTRICT = (no action) throw an error when try to Update Parent&lt;/li&gt;
&lt;li&gt;CASCADE = If we update Parent, Child updates as well&lt;/li&gt;
&lt;li&gt;SET NULL = if update Parents, thro&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Every Foreign Key column value needs to reference a Primary Key value&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Simple Key, Composite Key, Compound Key&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;categories of Keys&lt;/li&gt;
&lt;li&gt;Simple Primary Keys - single column (e.g., username)&lt;/li&gt;
&lt;li&gt;Composite Primary Key has multiple columns, as a group as Primary Key; at least one column doesn&amp;rsquo;t have to be a key&lt;/li&gt;
&lt;li&gt;Compound Primary Key - combination of columns in intermediary tables (in many-to-many relations); Primary Keys are compounded; all columns have to be a key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Intermediary Tables some people will&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add a surrogate_id to the Compound&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;REVIEW&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Superkey&lt;/li&gt;
&lt;li&gt;Candidate Key - least number of columns used to enforce uniqueness&lt;/li&gt;
&lt;li&gt;Primary Key** - the candidate key you select as the Main key&lt;/li&gt;
&lt;li&gt;Alternate Keys - the candidate keys you didn&amp;rsquo;t select as Primary Key&lt;/li&gt;
&lt;li&gt;Foreign Keys** - make connection between tables; references Primary Keys&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Primary + Foreign&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Surrogate &amp;amp; Natural Keys - surrogate (user_id) is random with no real value; Natural is already contained in your database&lt;/li&gt;
&lt;li&gt;(don&amp;rsquo;t switch between these two)&lt;/li&gt;
&lt;li&gt;Rule: You should be able to enforce uniqueness by the columns that are Naturally already there, &lt;em&gt;add&lt;/em&gt; a surrogate key if you want&lt;/li&gt;
&lt;li&gt;Rule 2: If you cannot define uniqueness naturally, you&amp;rsquo;ll need to rely on a Surrogate key (try to avoid)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(can switch between Simple + Composites - you won&amp;rsquo;t define these explicitly)
6. Simple Key - one column key
7. Composite Key - multiple column keys
8. Compound Key - multiple column keys&lt;/p&gt;
&lt;p&gt;Foreign Key Constraints&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ON DELETE
&lt;ol&gt;
&lt;li&gt;RESTRICT&lt;/li&gt;
&lt;li&gt;CASCADE&lt;/li&gt;
&lt;li&gt;SET NULL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;ON UPDATE
&lt;ol&gt;
&lt;li&gt;RESTRICT&lt;/li&gt;
&lt;li&gt;CASCADE&lt;/li&gt;
&lt;li&gt;SET NULL&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Introduction to Entity Relationship Modeling&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A standard for Drawing Databases&lt;/li&gt;
&lt;li&gt;EER Model (Enhanced Entity Relationship Model)&lt;/li&gt;
&lt;li&gt;ERD            (Enhanced Relationship Diagram)&lt;/li&gt;
&lt;li&gt;ER Model   (Enhanced Relationship)&lt;/li&gt;
&lt;li&gt;DDL: Define Database Structure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{do actual drawing}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cardinality&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one to one: |&amp;mdash;&amp;mdash;-|&lt;/li&gt;
&lt;li&gt;one to many:    |&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;E&lt;/li&gt;
&lt;li&gt;one row to many rows&lt;/li&gt;
&lt;li&gt;many to one:    E&amp;mdash;&amp;mdash;&amp;mdash;|&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Modality&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can assign &amp;ldquo;NOT NULL&amp;rdquo; to Foreign Key, to say each card &lt;em&gt;must&lt;/em&gt; have an owner&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;card_holder (Primary Key)&lt;/th&gt;
&lt;th&gt;card Foreign Key&lt;/th&gt;
&lt;th&gt;card_number&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;368&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;98&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;368&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;4 Modalities
card_owner &amp;mdash;&amp;mdash;&amp;ndash; card&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;-|&amp;mdash;&amp;mdash;&amp;mdash;0&amp;ndash;|-      one-to-one; one card_owner can have zero or 1 card&lt;/li&gt;
&lt;li&gt;-|&amp;mdash;&amp;mdash;&amp;mdash;|&amp;ndash;|-      one-to-one; one card_owner must have 1 and only 1 card&lt;/li&gt;
&lt;li&gt;-|&amp;mdash;&amp;mdash;&amp;mdash;0&amp;ndash;E-  one-to-many; one card_owner can have 0 or many cards&lt;/li&gt;
&lt;li&gt;-|&amp;mdash;&amp;mdash;&amp;mdash;|&amp;ndash;E-  one-to-many; one card_owner must hv 1 or many cards&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Introduction to Database Normalization&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Normalization is a process where we go through our database and correct things that may cause database problems like
&lt;ol&gt;
&lt;li&gt;data integrity problems&lt;/li&gt;
&lt;li&gt;repeating data&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Third Main Forms (three step-by-step data normalization process)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1 NF     (first normal form)&lt;/li&gt;
&lt;li&gt;2 NF    (second normal form)&lt;/li&gt;
&lt;li&gt;3 NF    (third normal form)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Systematic way to normalize a good structured database&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;everything must be atomic&lt;/li&gt;
&lt;li&gt;think about how data &lt;em&gt;depends&lt;/em&gt; on other data (dependencies)&lt;/li&gt;
&lt;li&gt;must go in sequential order 1 NF &amp;ndash;&amp;gt; 2 NF &amp;ndash;&amp;gt; 3 NF&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1 NF (First Normal Form of Database Normalization)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Atomicity  (data must be atomic or about one thing)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Problem: &amp;ldquo;Address column&amp;rdquo; is not atomic (street, apt, city, country, zip)
Solution: Break this column into multiple columns&lt;/p&gt;
&lt;p&gt;Problem: User enters two email(s) as a single value (two values in one cell)
Still Problem: Generate same two users for two emails (two of same primary keys)&lt;/p&gt;
&lt;p&gt;Solution: Break into &lt;em&gt;two&lt;/em&gt; tables - User table &amp;amp; Email table - turn this into a
one-to-many   (one user to many emails)&lt;/p&gt;
&lt;p&gt;User
user_id (primary key)
first_name
last_name&lt;/p&gt;
&lt;p&gt;Email
email_id
email
user_id (foreign key)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2 NF (Second Normal Form of Database Normalization)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Partial Dependency&lt;/em&gt;  (when a column depends on part of a Primary Key)&lt;/li&gt;
&lt;li&gt;You need ot have a &lt;em&gt;compound&lt;/em&gt; or &lt;em&gt;composite&lt;/em&gt; key (Primary Key has to be multiple columns)&lt;/li&gt;
&lt;li&gt;Found in Many-to-Many relationships w/ Intermediary Tables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{see notebook for illustration}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3 NF (Third Normal Form of Database Normalization)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;must do 1st and 2nd Normal Form before getting to 3 NF&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Transitive Dependency&lt;/em&gt; (when a column depends on a column, which depends on a Primary Key)&lt;/li&gt;
&lt;li&gt;Solution: Take a transitive dependency (problematic column), move them to a new table and reference them with a foreign key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Summary of Normal Forms&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1 NF = making everything atomic&lt;/li&gt;
&lt;li&gt;2 NF = removing partial dependencies&lt;/li&gt;
&lt;li&gt;3 NF = removing transitive dependencies&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Indexes (Clustered, Nonclustered, Composite Index)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See a book&amp;rsquo;s index (or Phone Book)&lt;/li&gt;
&lt;li&gt;A list of where certain data points are&lt;/li&gt;
&lt;li&gt;Data is sorted in a way that can easily be found&lt;/li&gt;
&lt;li&gt;Nonclustered Index = tells you how to get to the data (book&amp;rsquo;s index)
&lt;ul&gt;
&lt;li&gt;points to the data&lt;/li&gt;
&lt;li&gt;a list of references that point to the data (like back of the book)&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clustered Index = organizes the actual data in a way that&amp;rsquo;s easy to use
&lt;ul&gt;
&lt;li&gt;organizes the actual data&lt;/li&gt;
&lt;li&gt;faster and better than non-clustered&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Databases&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rather than having to go through &amp;ldquo;all&amp;rdquo; the data (i.e., Table Scan), you create an index (index seek, makes queries faster)&lt;/li&gt;
&lt;li&gt;Downside: When you update the data, you have to update the index as well otherwise index becomes outdated and useless&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;You only want to create an index for frequently used data
&lt;ul&gt;
&lt;li&gt;Primary Key that is indexed makes it faster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Apply WHERE (sql query) column to an Indexed column&lt;/li&gt;
&lt;li&gt;Index increase speed of JOINS&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Whenever you&amp;rsquo;re JOINing certain columns, the two columns you&amp;rsquo;re joining should be Indexed&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Data Types&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Date
&lt;ol&gt;
&lt;li&gt;date&lt;/li&gt;
&lt;li&gt;time&lt;/li&gt;
&lt;li&gt;datetime&lt;/li&gt;
&lt;li&gt;timestamp (can be millisecond or time, when something was &amp;ldquo;done&amp;rdquo; or when something was &amp;ldquo;created&amp;rdquo; or &amp;ldquo;updated&amp;rdquo; or when a new row is entered)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Numeric
&lt;ol&gt;
&lt;li&gt;integer (only whole numbers)&lt;/li&gt;
&lt;li&gt;decimal (more accurate)&lt;/li&gt;
&lt;li&gt;float / double (unsigned)&lt;/li&gt;
&lt;li&gt;binary&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;String
&lt;ol&gt;
&lt;li&gt;Char(8),&lt;/li&gt;
&lt;li&gt;varchar(8) 0 up to 8 characters&lt;/li&gt;
&lt;li&gt;text - longer strings (comments, paragraphs)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;everything-above-here-is-ddl---data-definition-language&#34;&gt;Everything above here is DDL - data definition language&lt;/h2&gt;
&lt;h2 id=&#34;below-here-are-dml---data-manipulation-language&#34;&gt;Below here are DML - data manipulation language**&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Introduction to JOINS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Joins bring multiple tables into a presentable format&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Inner Join&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Table A (customer table)&lt;/li&gt;
&lt;li&gt;Table B (card table)&lt;/li&gt;
&lt;li&gt;When there are rows that connect them, a new Table is presented&lt;/li&gt;
&lt;li&gt;Taking only the rows that intersect between two tables
&lt;ul&gt;
&lt;li&gt;Eliminate any customers that do not have a card&lt;/li&gt;
&lt;li&gt;Eliminate any cards that do not have a customer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exclude rows that are &lt;em&gt;not&lt;/em&gt; in both tables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;Customer Table&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;customer (Primary Key)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;customer_id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;first_name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;last_name&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Card Table&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;card (Foreign Key)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;card_id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;customer_id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max_amount&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;monthly_bill&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;amount_paid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;amount_owed&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Example Inner Join of Customer Table &amp;amp; Card Table&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;first_name&lt;/th&gt;
&lt;th&gt;last_name&lt;/th&gt;
&lt;th&gt;amount_paid&lt;/th&gt;
&lt;th&gt;amount_owed&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Paul&lt;/td&gt;
&lt;td&gt;Apivat&lt;/td&gt;
&lt;td&gt;2200&lt;/td&gt;
&lt;td&gt;3000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Paul&lt;/td&gt;
&lt;td&gt;Apivat&lt;/td&gt;
&lt;td&gt;720&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jimmy&lt;/td&gt;
&lt;td&gt;John&lt;/td&gt;
&lt;td&gt;3000&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;SELECT
first_name,
last_name,
amount_paid,
amount_owed
FROM customer cu
INNER JOIN card ca ON cu.customer_id = ca.customer_id&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;INNER JOIN on 3 Tables&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See illustration&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;INNER JOIN on 3 Tables (with Example)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See illustration&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Introduction to OUTER JOINS&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;INNER JOIN                      - least rows&lt;/li&gt;
&lt;li&gt;LEFT (Outer) JOIN&lt;/li&gt;
&lt;li&gt;RIGHT (Outer) JOIN&lt;/li&gt;
&lt;li&gt;FULL (Outer) JOIN          - most rows&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;RIGHT OUTER JOIN&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;same as Left Outer Join, except the Right Table keeps all the rows&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IN PRACTICE, most people don&amp;rsquo;t use Right Joins; instead they&amp;rsquo;ll use a LEFT JOIN and just flip the tables&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How do you know which table is LEFT or RIGHT?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SELECT column1, column2, column3
FROM this_table_is_Left
LEFT JOIN&amp;hellip;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JOIN with NOT NULL Columns&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not Null columns can cause some confusion when it comes to Joins&lt;/li&gt;
&lt;li&gt;If you want to return &lt;em&gt;all&lt;/em&gt; of a column, don&amp;rsquo;t worry about NOT NULL, just put that table in the SELECT statement (i.e., make the table on the left side) and use a LEFT JOIN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{see illustrations}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Outer JOIN Across 3 Tables&lt;/strong&gt;
Can combine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LEFT (outer) JOIN with&lt;/li&gt;
&lt;li&gt;RIGHT (outer) JOIN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Aliases&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use when writing SELECT statements&lt;/li&gt;
&lt;li&gt;use AS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SELF JOIN&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;take a Table and JOINING with itself&lt;/li&gt;
&lt;li&gt;How to think about it:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Duplicate your exact table&lt;/li&gt;
&lt;li&gt;Joining with itself&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Illustration&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;v1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;referred_by&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;v2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;user_id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;SELECT
v1.first_name,
v1.last_name,
v1.email,
v2.email
FROM user AS v1
JOIN user AS v2
ON v1.referred_by = v2.user_id&lt;/p&gt;
&lt;p&gt;(Self-Join is taking the same table, &amp;ldquo;user&amp;rdquo;, and making a duplicate)&lt;/p&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Continuous to Discrete Plotting</title>
      <link>/technical_notes/example_tech/rstats_tip_continuous_to_discrete_plot/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_tip_continuous_to_discrete_plot/</guid>
      <description>&lt;h2 id=&#34;continuous-to-discrete-plotting&#34;&gt;Continuous to Discrete Plotting&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: When plotting integers on the x-axis, it shows up in a ggplot like 2.5, 5, 7.5 and we want each bar to be plotted discretely (e.g. 1,2,3,4,5&amp;hellip;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;
gov_partcipation %&amp;gt;%
    ggplot(aes(x = n, y = nn)) +
    geom_col(aes(fill = as.factor(n))) +
    geom_text(aes(label = nn), vjust = -0.5, color = &amp;quot;white&amp;quot;) +
    # this sets the sequence from 1 to 10 with a break of 1
    # turns a continuous sequence (2.5) into a discrete one (1,2,3...)
    scale_x_continuous(breaks=seq(1,10, 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Two Y-Axes</title>
      <link>/technical_notes/example_tech/rstats_viz_2_y_axes/</link>
      <pubDate>Fri, 08 Oct 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_viz_2_y_axes/</guid>
      <description>&lt;h2 id=&#34;creating-2-y-axes-in-a-plot&#34;&gt;Creating 2 Y-Axes in a Plot&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: You want to create &lt;strong&gt;two y-axes&lt;/strong&gt;. The left y-axis measures an amount, while the &lt;em&gt;right&lt;/em&gt; y-axis converts the amount to a percentage.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;: This may be useful when you have a bar chart depicting relative amounts (e.g., membership numbers) and you require &lt;em&gt;another&lt;/em&gt; y-axis (right side) to map &lt;em&gt;another&lt;/em&gt; amount as a percentage of the former (e.g., % of members who successfully activated on their first day).&lt;/p&gt;
&lt;p&gt;This is exampe is taken from the 
&lt;a href=&#34;https://docs.google.com/presentation/d/18DGuSTsLgU2C2iNNcvoo2-27uL2Tcb1jfMaMGa9Zeyc/edit#slide=id.gf1c26dd130_1_11&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bankless DAO Community Growth metrics&lt;/a&gt; where we looked at:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How many new members successfully activate on their first day?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, unlike typical use cases, we are &lt;strong&gt;not&lt;/strong&gt; using &lt;code&gt;pivot_longer&lt;/code&gt; in this example, but instead keep the data in a &lt;em&gt;wide&lt;/em&gt; format (&lt;code&gt;pivot_wider&lt;/code&gt;). We are visualizing 3 separate variables (columns) here, including: &lt;code&gt;new_members&lt;/code&gt;, &lt;code&gt;pct_communicated&lt;/code&gt; and &lt;code&gt;pct_opened_channels&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In addition, we&amp;rsquo;ll have a hard-coded fourth line that represents the industry &amp;ldquo;benchmark&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Because&lt;/em&gt; we are not using a &lt;code&gt;pivot_longer&lt;/code&gt; function, we will have to &lt;em&gt;manually&lt;/em&gt; create our own legend. This will be explained in the commented code below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;first_activation %&amp;gt;%
    rename(
        time = &amp;quot;interval_start_timestamp&amp;quot;,
        new = &amp;quot;new_members&amp;quot;,
        talked = &amp;quot;pct_communicated&amp;quot;,
        visited = &amp;quot;pct_opened_channels&amp;quot;
    ) %&amp;gt;%
    ggplot(aes(x = time)) +
    # note: 3 separate charts: one bar and two lines
    geom_bar(aes(y = new, color = &amp;quot;New members&amp;quot;), stat = &amp;quot;identity&amp;quot;, fill = &amp;quot;black&amp;quot;) +
    # The left y-axis goes from 0-1500, &#39;talked&#39; and &#39;visited&#39; is multiplied by 1500/100 = 15
    # color is set to a string so it can be repurposed in the manually created legend
    geom_line(aes(y = talked*15, color = &amp;quot;% talked (voice or text)&amp;quot;), size = 1.5) +
    geom_line(aes(y = visited*15, color = &amp;quot;% visited more than 3 channels&amp;quot;), size = 1.5) +
    geom_line(y = 480, color = &amp;quot;orange&amp;quot;, size = 0.2) +
    # scale_y_continuous(sec.axis) is the key to having two y-axes
    # The left y-axis goes from 0-1500, so sec.axis has ~./1500*100
    # name indicates both left and right y-axis label
    scale_y_continuous(
        name = &amp;quot;New Members&amp;quot;,
        sec.axis = sec_axis(trans = ~./1500*100, name = &amp;quot;% Activated&amp;quot;)
    ) +
    # We have to manually set color because we didn&#39;t actually set color in geom_line above
    scale_color_manual(values = c(&amp;quot;white&amp;quot;, &amp;quot;red&amp;quot;, &amp;quot;black&amp;quot;)) +
    # setting the color = &amp;quot;Legend&amp;quot; allows us to indicate on the chart where legend is
    labs(
        title = &amp;quot;How many new members successfully activate on their first day?&amp;quot;,
        x = &amp;quot;&amp;quot;,
        color = &amp;quot;Legend&amp;quot;
    )

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;converting-second-y-axis-to-another-number-aside-from-percentage-&#34;&gt;Converting Second Y-axis to another number aside from Percentage (%)&lt;/h3&gt;
&lt;p&gt;This is similar to the example above, except the math is adjusted so that if you wanted to convert &lt;strong&gt;two scales&lt;/strong&gt; (and neither is a %). This is appropriate for when visualizing both a &lt;em&gt;total amount&lt;/em&gt; (Messages sent) and &lt;em&gt;average amount&lt;/em&gt; (Messages per communicator).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;
msg_avg %&amp;gt;%
    rename(
        time = &amp;quot;interval_start_timestamp&amp;quot;,
        per = &amp;quot;messages_per_communicator&amp;quot;
    ) %&amp;gt;%
    ggplot(aes(x = time)) +
    geom_bar(aes(y = messages, color = &amp;quot;Messages sent&amp;quot;), stat = &amp;quot;identity&amp;quot;, fill = &amp;quot;black&amp;quot;) +
    # conversion between two y-axis (similar to % conversion)
    # Here we convert 6000 to 12
    geom_line(aes(y = per*6000/12, color = &amp;quot;Messages per communicator&amp;quot;), size = 1.5) +
    geom_line(y = 5000, color = &amp;quot;orange&amp;quot;, size = 0.2) +
    scale_y_continuous(
        name = &amp;quot;Messages sent&amp;quot;,
        sec.axis = sec_axis(trans = ~./6000*12, name = &amp;quot;Message per ommunicator&amp;quot;)
    ) +
    scale_color_manual(values = c(&amp;quot;red&amp;quot;, &amp;quot;black&amp;quot;))


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manually Ordering Factors</title>
      <link>/technical_notes/example_tech/rstats_tip_manually_order_factors/</link>
      <pubDate>Fri, 08 Oct 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_tip_manually_order_factors/</guid>
      <description>&lt;h2 id=&#34;manually-ordering-factors&#34;&gt;Manually Ordering Factors&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Situation&lt;/strong&gt;: Sometimes you have want to display bar charts in a specific order, but the numbers get re-arranged or &lt;code&gt;group_by&lt;/code&gt; and &lt;code&gt;sort&lt;/code&gt; orders by value, but you have a specific order in mind.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;: In this example, I have &amp;ldquo;Proposals&amp;rdquo; numbered &amp;ldquo;1-10&amp;rdquo;. I want to display them in order, but number 10 doesn&amp;rsquo;t go after 9, but instead goes 1, 10, 2, 3, and so on&amp;hellip;I need to &lt;strong&gt;manually set the factor order&lt;/strong&gt; so the bar chart displays exactly how I&amp;rsquo;d like.&lt;/p&gt;
&lt;p&gt;I used &lt;code&gt;fct_relevel&lt;/code&gt; (factor re-level), choose a specific column, and the second parameter is a vector of values with the factors manually arranged according to how I&amp;rsquo;d like. Then I set it to that specific column so R knows the desired factor level.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# manually arranging factors - num
# note: move &amp;quot;proposal 10&amp;quot; to the end
# them apply newly arranged factor levels to column of interest
new$num &amp;lt;- fct_relevel(new$num, c(&amp;quot;proposal 1&amp;quot;, &amp;quot;proposal 2&amp;quot;, &amp;quot;proposal 3&amp;quot;, &amp;quot;proposal 4&amp;quot;, &amp;quot;proposal 5&amp;quot;, 
                       &amp;quot;proposal 6&amp;quot;, &amp;quot;proposal 7&amp;quot;, &amp;quot;proposal 8&amp;quot;, &amp;quot;proposal 9&amp;quot;, &amp;quot;proposal 10&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can also achieve this for string values that don&amp;rsquo;t have an obvious order. Here i&amp;rsquo;m ordering the proposals by a known sequence (but not obvious to the audience).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;# manually arrange factors - name
# then apply newly arranged factor levels to column of interest
new$name &amp;lt;- fct_relevel(new$name, c(&amp;quot;Approve the Bankless DAO Genesis Proposal&amp;quot;,
                        &amp;quot;What charity should CMS Holdings donate 100k towards&amp;quot;,
                        &amp;quot;Badge Distribution for Second Airdrop&amp;quot;,
                        &amp;quot;Reward Season 0 Active Members&amp;quot;,
                        &amp;quot;Bankless DAO Season 1&amp;quot;,
                        &amp;quot;BanklessDAO Season 1 Grants Committee Ratification&amp;quot;,
                        &amp;quot;BED Index Logo Contest&amp;quot;,
                        &amp;quot;Request for funds for Notion&#39;s ongoing subscription&amp;quot;,
                        &amp;quot;Transfer ownership of the treasury multisig wallet from the genesis team to the DAO&amp;quot;,
                        &amp;quot;Bankless DAO Season 2&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Survey Data Cleaning</title>
      <link>/technical_notes/example_tech/data_cleaning_tip1/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/data_cleaning_tip1/</guid>
      <description>&lt;h2 id=&#34;survey-data-cleaning&#34;&gt;Survey Data Cleaning&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: These tips are a distillation of data cleaning techniques I picked up in the course of cleaning data for the first DAO Creators Survey (Gitcoin x BanklessDAO).&lt;/p&gt;
&lt;p&gt;The DAO Creators Survey was a two part survey sampling 442 and 256 respondents to approximately 50 survey questions ranging from demographics to web3 tooling, DAO compensation/healthcare and income stability, to name a few.&lt;/p&gt;
&lt;p&gt;The questions ranged from highly structured (i.e., multiple choice, multiple response options and dropdown boxes) to highly unstructured (i.e., qualitative responses).&lt;/p&gt;
&lt;p&gt;I created approximately 50 charts for this report and each chart presented unique data cleaning challenges. However, I will describe a base foundation and areas of overlap so the next project is easier.&lt;/p&gt;
&lt;p&gt;Two articles were used for reference, but because this project optimized for speed, I did &lt;em&gt;not&lt;/em&gt; do a full text analysis.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;https://towardsdatascience.com/create-a-word-cloud-with-r-bde3e7422e8a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to Generate Word Clouds in R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.tidytextmining.com/tidytext.html#summary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Text Mining with R: A Tidy Approach&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;pre-cleaning-steps&#34;&gt;Pre-Cleaning Steps&lt;/h3&gt;
&lt;p&gt;The first move for any survey is to &lt;strong&gt;change column names&lt;/strong&gt; into more manageable short codes and then &lt;strong&gt;delete identifying information&lt;/strong&gt; to preserve privacy, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df1 &amp;lt;- df %&amp;gt;%
    # Rename: shorten column names to be manageable
    rename(
       timestamp = &amp;quot;Timestamp&amp;quot;,
       daos_work_for = &amp;quot;what DAO(s) do you work for? for each DAO, how many hours/month do you work? (feel free to include multiple)&amp;quot;,
       city = &amp;quot;what city are you based in?&amp;quot;,
       twitter = &amp;quot;whats your twitter username?&amp;quot;,
       eth_addr = &amp;quot;whats your ETH address?&amp;quot;,
       ) %&amp;gt;%
    # delete identifying information
    select(-twitter, -eth_addr, -email)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;baseline-step-convert-text-to-tidy-format&#34;&gt;Baseline Step: Convert Text to Tidy Format&lt;/h3&gt;
&lt;p&gt;This requires the &lt;code&gt;tidytext&lt;/code&gt; package and a couple functions. The flow is to use &lt;code&gt;unnest_tokens()&lt;/code&gt; to separate a string of words into a vector of individual words. Then follow-up with &lt;code&gt;anti_join()&lt;/code&gt; to get rid of &lt;strong&gt;stop words&lt;/strong&gt; (a corpus of words is provided with tidytext).&lt;/p&gt;
&lt;p&gt;Then, group and tally, which can be achieved with &lt;code&gt;group_by()&lt;/code&gt; and &lt;code&gt;tally(sort = TRUE)&lt;/code&gt; or one function &lt;code&gt;count(, sort = TRUE)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;daos_work_tbl %&amp;gt;%
    unnest_tokens(word, text) %&amp;gt;%
    anti_join(stop_words) %&amp;gt;% 
    view()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there are too many words, we can &lt;code&gt;filter()&lt;/code&gt; and drop NA responses. With &lt;code&gt;dplyr&lt;/code&gt; these operations can be chained to &lt;code&gt;ggplot2&lt;/code&gt; to visualize the output.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;daos_work_tbl %&amp;gt;%
    unnest_tokens(word, text) %&amp;gt;%
    anti_join(stop_words) %&amp;gt;% 
    count(word, sort = TRUE) %&amp;gt;%
    filter(n &amp;gt; 3) %&amp;gt;%
    drop_na() %&amp;gt;%
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;string-detect&#34;&gt;String Detect&lt;/h3&gt;
&lt;p&gt;Sometimes you need to use &lt;code&gt;str_detect()&lt;/code&gt; to see how many instances of a string are present in a column. If there is a &lt;em&gt;match&lt;/em&gt; of string detected, you want to categorize survey responses. This is structured combining &lt;code&gt;if_else()&lt;/code&gt; conditionals with &lt;code&gt;str_detect()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This first requires creating an empty column:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# create empty column
daos_work_long$bin &amp;lt;- NA

# use if_else and str_detect
daos_work_long$bin &amp;lt;- if_else((str_detect(daos_work_long$word, &amp;quot;cre8&amp;quot;)==TRUE), &amp;quot;cre8rdao&amp;quot;, &amp;quot;NA&amp;quot;)
daos_work_long$bin &amp;lt;- if_else((str_detect(daos_work_long$word, &amp;quot;mstable&amp;quot;)==TRUE), &amp;quot;mstable&amp;quot;, daos_work_long$bin)
daos_work_long$bin &amp;lt;- if_else((str_detect(daos_work_long$word, &amp;quot;marrow&amp;quot;)==TRUE), &amp;quot;marrow dao&amp;quot;, daos_work_long$bin)
daos_work_long$bin &amp;lt;- if_else((str_detect(daos_work_long$word, &amp;quot;badger&amp;quot;)==TRUE), &amp;quot;badger dao&amp;quot;, daos_work_long$bin)
daos_work_long$bin &amp;lt;- if_else((str_detect(daos_work_long$word, &amp;quot;raid&amp;quot;)==TRUE), &amp;quot;raid guild&amp;quot;, daos_work_long$bin)
daos_work_long$bin &amp;lt;- if_else((str_detect(daos_work_long$word, &amp;quot;metagame&amp;quot;)==TRUE), &amp;quot;metagame&amp;quot;, daos_work_long$bin)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;string-match&#34;&gt;String Match&lt;/h3&gt;
&lt;p&gt;In some situations, you may want to see if a string &lt;em&gt;contains&lt;/em&gt; a specific word. The function to use here is &lt;code&gt;str_match()&lt;/code&gt;. Here, we&amp;rsquo;re seeing if a string contains either &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;yeah&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt; or &lt;code&gt;not&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;income_stability_tbl2 &amp;lt;- income_stability_tbl %&amp;gt;%
    mutate(phrase = strsplit(as.character(text), &amp;quot;,&amp;quot;)) %&amp;gt;%
    unnest(phrase) %&amp;gt;%
    count(phrase, sort = TRUE) %&amp;gt;%
    mutate(
        phrase_no = str_match(phrase, &amp;quot;[Nn]o|[Nn]ot&amp;quot;)[,1],
        phrase_no = str_to_lower(phrase_no)
    ) %&amp;gt;%
    mutate(
        phrase_yes = str_match(phrase, &amp;quot;[Yy]es|[Yy]eah&amp;quot;)[,1],
        phrase_yes = str_to_lower(phrase_yes)
    )

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;handling-each-survey-question-column-separately&#34;&gt;Handling each survey question (column) separately&lt;/h3&gt;
&lt;p&gt;This requires splitting each column off. You could turn it into a &lt;code&gt;vector&lt;/code&gt; first, then &lt;code&gt;tibble&lt;/code&gt; or just subset a dataframe:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;comp_denom_v &amp;lt;- as.vector(df1$comp_denom)
comp_denom_tbl &amp;lt;- tibble(line = 1:445, text = comp_denom_v)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;manually-add-numbers&#34;&gt;Manually add numbers&lt;/h3&gt;
&lt;p&gt;Surprisingly, it was not easy to add items from the &lt;strong&gt;same&lt;/strong&gt; category:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Number&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Zebra&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zebra&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;It should be more straight forward to add Zebra. But instead we have to really manually add. For example, here i&amp;rsquo;m manually changing the &lt;code&gt;n&lt;/code&gt; for bankless dao to &lt;code&gt;35&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# bankless dao = 35
daos_work_long2$n[12] &amp;lt;- 35

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;delete-specific-rows&#34;&gt;Delete specific rows&lt;/h3&gt;
&lt;p&gt;There are two ways to delete rows. First is to subset (a base R operation):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;daos_work_long3 &amp;lt;- daos_work_long2[-c(4, 6, 13, 14, 15, 19, 24, 28, 31, 42, 46, 51, 52, 53,
                  61, 63, 67, 68, 69, 70, 78, 81, 87, 95, 100, 103),] %&amp;gt;% 
                  arrange(desc(n))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second way is to use &lt;code&gt;slice&lt;/code&gt; in &lt;code&gt;dplyr&lt;/code&gt;. &lt;code&gt;Slice&lt;/code&gt; can be used to select or re-order rows as well:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;usd_earning_tbl3 &amp;lt;- usd_earning_tbl2 %&amp;gt;%
                    slice(4, 6, 7, 1:3, 5, 8:9)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;assigning-factors-to-preserve-order-for-visualization&#34;&gt;Assigning Factors to Preserve Order for Visualization&lt;/h3&gt;
&lt;p&gt;After using &lt;code&gt;slice&lt;/code&gt; to re-order rows, we can use &lt;code&gt;mutate()&lt;/code&gt; and &lt;code&gt;as_factor()&lt;/code&gt; to create factors for visualization. This preserves the order we want (e.g., age range on the x-axis):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# reorder rows, save as new df
usd_earning_tbl3 &amp;lt;- usd_earning_tbl2 %&amp;gt;%
    slice(4, 6, 7, 1:3, 5, 8:9)

# need to sort by factors before visualize
usd_earning_tbl3 %&amp;gt;% 
    mutate(text_factor = as_factor(text))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;separate-string-at-comma&#34;&gt;Separate String at Comma&lt;/h3&gt;
&lt;p&gt;Sometimes, simply turning a string into &lt;code&gt;tidytext&lt;/code&gt; doesn&amp;rsquo;t work because meaning phrases of two or three words &lt;em&gt;inadvertently&lt;/em&gt; get split, so we may need to split by comma with &lt;code&gt;mutate()&lt;/code&gt; and &lt;code&gt;strsplit()&lt;/code&gt;, in lieu of using &lt;code&gt;unnest_tokens()&lt;/code&gt;, then group and tally:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;task_tabl2 &amp;lt;- task_tbl %&amp;gt;%
    mutate(phrase = strsplit(as.character(text), &amp;quot;,&amp;quot;)) %&amp;gt;%
    unnest(phrase) %&amp;gt;%
    count(phrase, sort = TRUE) %&amp;gt;%
    view()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;github-repo&#34;&gt;Github Repo&lt;/h3&gt;
&lt;p&gt;See data cleaning scripts 
&lt;a href=&#34;https://github.com/PaulApivat/banklessDAO/tree/main/dao_survey_gitcoin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Consume Open API with R</title>
      <link>/technical_notes/example_tech/rstats_open_api/</link>
      <pubDate>Fri, 16 Apr 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_open_api/</guid>
      <description>&lt;h2 id=&#34;reading-in-json-data-from-an-open-api&#34;&gt;Reading in JSON data from an Open API&lt;/h2&gt;
&lt;p&gt;The following example is an 
&lt;a href=&#34;https://covid19.th-stat.com/api/open/timeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open API&lt;/a&gt; from the Ministry of Public Health in Thailand.&lt;/p&gt;
&lt;p&gt;The following script consumes the API using the &lt;code&gt;httr&lt;/code&gt; package, then transforms JSON to dataframe via the &lt;code&gt;jsonlite&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;httr&amp;quot;)
install.packages(&amp;quot;jsonlite&amp;quot;)
library(httr)
library(jsonlite)

# send a GET request to the Ministry of Public Health Open API
# consume API to receive JSON file
url &amp;lt;- &amp;quot;https://covid19.th-stat.com/api/open/timeline&amp;quot;
resp &amp;lt;- GET(url = url)

# convert JSON file into text
text_json &amp;lt;- content(resp, as = &amp;quot;text&amp;quot;, encoding = &amp;quot;UTF-8&amp;quot;)

# read text from JSON
jfile &amp;lt;- fromJSON(text_json)

# save as data frame
df &amp;lt;- as.data.frame(jfile)

# view data frame
View(df)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Circular Dendrogram</title>
      <link>/technical_notes/example_tech/rstats_viz_circular_dendrogram/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_viz_circular_dendrogram/</guid>
      <description>&lt;h2 id=&#34;creating-a-circular-dendrogram-with-ggraph&#34;&gt;Creating a Circular Dendrogram with ggraph&lt;/h2&gt;
&lt;p&gt;I tried creating a 
&lt;a href=&#34;https://www.r-graph-gallery.com/339-circular-dendrogram-with-ggraph.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Circular Dendrogram&lt;/a&gt; using reproducible code from R Graph Gallery.&lt;/p&gt;
&lt;p&gt;However, the code on the website has some issues so I submitted a 
&lt;a href=&#34;https://github.com/holtzy/R-graph-gallery/pull/34&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pull request to fix it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code below, for the most part, match the original on R Graph Gallery, except 4 lines of code that were updated to fix the &lt;code&gt;geom_node_text&lt;/code&gt; issue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# libraries
library(ggraph)
library(igraph)
library(tidyverse)
library(RColorBrewer) 

# create data.frame
d1=data.frame(from=&amp;quot;origin&amp;quot;, to=paste(&amp;quot;group&amp;quot;, seq(1,10), sep=&amp;quot;&amp;quot;))
d2=data.frame(from=rep(d1$to, each=10), to=paste(&amp;quot;subgroup&amp;quot;, seq(1,100), sep=&amp;quot;_&amp;quot;))
edges=rbind(d1, d2)

# create vertices
vertices = data.frame(
    name = unique(c(as.character(edges$from), as.character(edges$to))) , 
    value = runif(111)
) 

vertices$group = edges$from[ match( vertices$name, edges$to ) ]


vertices$id=NA
myleaves=which(is.na( match(vertices$name, edges$from) ))
nleaves=length(myleaves)
vertices$id[ myleaves ] = seq(1:nleaves)

# change the angle of the geom_node_text
# angle and hjust must be consistent

vertices$angle = 360 / nleaves * vertices$id + 110  # adjust angle calculation

vertices$hjust&amp;lt;-ifelse( vertices$angle &amp;lt; 291, 1, 0) # adjust hjust

vertices$angle&amp;lt;-ifelse(vertices$angle &amp;lt; 291, vertices$angle+180, vertices$angle) # adjust where 180 is added

# crate mygraph object (dendrogram)
mygraph &amp;lt;- graph_from_data_frame( edges, vertices=vertices )

# plot the dendrogram
ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = TRUE) + 
    geom_edge_diagonal(colour=&amp;quot;grey&amp;quot;) +
    scale_edge_colour_distiller(palette = &amp;quot;RdPu&amp;quot;) +
    geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2.7, alpha=1) +
    geom_node_point(aes(filter = leaf, x = x*1.07, y=y*1.07, colour=group, size=value, alpha=0.2)) +
    scale_colour_manual(values= rep( brewer.pal(9,&amp;quot;Paired&amp;quot;) , 30)) +
    scale_size_continuous( range = c(0.1,10) ) +
    theme_void() +
    theme(
        legend.position=&amp;quot;none&amp;quot;,
        plot.margin=unit(c(0,0,0,0),&amp;quot;cm&amp;quot;),
    ) +
    expand_limits(x = c(-1.3, 1.3), y = c(-1.3, 1.3)) +
    coord_flip()  # add coord_flip

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more content on data science, R, and Python 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extend Color Palettes</title>
      <link>/technical_notes/example_tech/rstats_viz_extend_color/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_viz_extend_color/</guid>
      <description>&lt;h2 id=&#34;extending-the-number-of-colors-available-in-a-palette&#34;&gt;Extending the number of colors available in a palette&lt;/h2&gt;
&lt;p&gt;You might be using the &lt;code&gt;RColorBrewer&lt;/code&gt; library and one of the palettes: Sequential, Qualitative or Diverging:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sequential&lt;/strong&gt; includes: Blues, BuGn, BuPu, GnBu, Greens, Greys, Oranges, OrRd, PuBu, PuBuGn, PuRd, Purples, RdPu, Reds, YlGn, YlGnBu YlOrBr, YlOrRd.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Qualitative&lt;/strong&gt; includes: Accent, Dark2, Paired, Pastel1, Pastel2, Set1, Set2, Set3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Diverging&lt;/strong&gt; includes: BrBG, PiYG, PRGn, PuOr, RdBu, RdGy, RdYlBu, RdYlGn, Spectral&lt;/p&gt;
&lt;p&gt;These palettes 8-9 colors, at most 12. But what if you need more? Here&amp;rsquo;show to &lt;em&gt;extend&lt;/em&gt; the palettes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(RColorBrewer)

number.colors &amp;lt;- 46
mycolors &amp;lt;- colorRampPalette(brewer.pal(8, &amp;quot;Set1&amp;quot;))(number.colors)

df %&amp;gt;%
   ggplot(aes(x=x, y=y)) +
   geom_boxplot() +
   geom_point() +
   scale_color_manual(values = mycolors)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Formating Dates with Lubridate</title>
      <link>/technical_notes/example_tech/rstats_dates/</link>
      <pubDate>Tue, 08 Dec 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_dates/</guid>
      <description>&lt;h2 id=&#34;changing-date-formats-with-lubridate&#34;&gt;Changing Date formats with Lubridate&lt;/h2&gt;
&lt;p&gt;For every data visualization project that involves using &lt;code&gt;dates&lt;/code&gt; on one of the axes, I always find myself having to re-format the date so that visualization &amp;ldquo;works&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a workflow that is recommended at the &lt;strong&gt;start&lt;/strong&gt; of any data visualization project.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(tidyverse)
library(lubridate) # handling dates

df %&amp;gt;%
    # handling date first
    mutate(
        date = original_date_variable %&amp;gt;% ymd(),
        year = date %&amp;gt;% year(),
        month = date %&amp;gt;% month(),
        day = date %&amp;gt;% day(),
        year_month = make_datetime(year, month) # combine year &amp;amp; month
    ) 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reading and manipulating nested data</title>
      <link>/technical_notes/example_tech/rstats_unnest/</link>
      <pubDate>Sun, 11 Oct 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_unnest/</guid>
      <description>&lt;h2 id=&#34;ways-of-handling-nested-data&#34;&gt;Ways of handling nested data&lt;/h2&gt;
&lt;p&gt;Recently, I downloaded JSON data from BigQuery and had to make sense of the data. This starts with getting the data into tabular form.&lt;/p&gt;
&lt;p&gt;Here are the libraries I used:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(jsonlite)
library(tidyverse)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, read in JSON data. Once read in, we check its class type to see that its a list. We&amp;rsquo;ll want to get it into a data frame.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# read data out into Large list (321 elements, 2.4 Mb)
# each row is *another* list

funnel &amp;lt;- lapply(readLines(&amp;quot;bq-mixpanel-funnel.json&amp;quot;), fromJSON)

# &amp;quot;list&amp;quot; class
class(funnel)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After searching online, three approaches continually resurfaced.&lt;/p&gt;
&lt;p&gt;First, using &lt;code&gt;unlist()&lt;/code&gt; and converting into &lt;code&gt;matrix()&lt;/code&gt; before wrapping &lt;em&gt;that&lt;/em&gt; in a &lt;code&gt;data.frame()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Approach 1: convert to matrix, array

unlist_funnel &amp;lt;- matrix(unlist(funnel), byrow = TRUE, ncol = length(funnel[[1]]))
rownames(unlist_funnel) &amp;lt;- names(funnel)
as.data.frame(unlist_funnel) %&amp;gt;% view()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These next approaches get us closer (&lt;strong&gt;note&lt;/strong&gt;: I know from interacting with the data in BigQuery that there &lt;em&gt;should&lt;/em&gt; be 321 rows):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Approach 2: Convert list to data frame

df &amp;lt;- data.frame(matrix(unlist(funnel), nrow = length(funnel), byrow = TRUE))
df2 &amp;lt;- data.frame(matrix(unlist(funnel), nrow = length(funnel), byrow = FALSE))
df3 &amp;lt;- data.frame(matrix(unlist(funnel), nrow = 321, byrow = TRUE), stringsAsFactors = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next approach is to use &lt;code&gt;lapply()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#works but everything is on one column

unlist(lapply(funnel, c)) %&amp;gt;% view() 

# this makes everything a list, but we want everything into a vector
t(lapply(funnel, c)) %&amp;gt;% view() 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, the approach that worked best, in this particular case was &lt;code&gt;sapply()&lt;/code&gt;. This functions turns things into vector, which can then be converted into a dataframe:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#still the ideal, this works because &#39;c&#39; is used ot combine lists

t(sapply(funnel, c)) %&amp;gt;% view()  
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Styling tables with reactable</title>
      <link>/technical_notes/example_tech/rstats_viz_reactable/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_viz_reactable/</guid>
      <description>&lt;h2 id=&#34;setting-up-a-barebones-table-with-reactable&#34;&gt;Setting up a barebones table with {reactable}&lt;/h2&gt;
&lt;p&gt;There are several &lt;code&gt;packages&lt;/code&gt; to style your tables. This note will help you get setup with a basic table using the &lt;code&gt;reactable&lt;/code&gt; package. With just a few lines of code, you can have a table with pagination and column sorting.&lt;/p&gt;
&lt;p&gt;The data for this note comes from 
&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-09-22/readme.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TidyTuesday 2020-09-22, &amp;ldquo;Himalayan Climbers&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This note assumes that data has been wrangled and in &lt;code&gt;tibble&lt;/code&gt; form, ready to be styled into a table.&lt;/p&gt;
&lt;h2 id=&#34;sample-tibble&#34;&gt;Sample Tibble&lt;/h2&gt;
&lt;p&gt;Here, I&amp;rsquo;ve saved my tibble of 20 rows and 3 columns in &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; df

# A tibble: 20 x 3
   peak            attempts fail_rate
   &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
 1 Everest            21813     0.54 
 2 Cho Oyu             8890     0.570
 3 Ama Dablam          8406     0.479
 4 Manaslu             4593     0.621
 5 Dhaulagiri I        2592     0.789
 6 Makalu              2405     0.764
 7 Lhotse              2379     0.638
 8 Baruntse            2190     0.708
 9 Pumori              1780     0.706
10 Annapurna I         1669     0.821
11 Kangchenjunga       1385     0.682
12 Himlung Himal       1308     0.573
13 Annapurna IV         812     0.845
14 Putha Hiunchuli      738     0.599
15 Tilicho              670     0.781
16 Tukuche              462     0.753
17 Jannu                339     0.782
18 Langtang Lirung      338     0.84 
19 Makalu II            322     0.758
20 Nuptse               303     0.934

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;load-libraries&#34;&gt;Load Libraries&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;library(tidyverse)
library(reactable)
library(htmltools)

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;basic-table&#34;&gt;Basic Table&lt;/h2&gt;
&lt;p&gt;The amazing thing is, with just this one line, you have a barebones table with &lt;strong&gt;pagination&lt;/strong&gt; (with 20 rows, it shows 10 at a time; this can be adjusted) and  &lt;strong&gt;sorting&lt;/strong&gt; for both columns.&lt;/p&gt;
&lt;p&gt;You can check out the rest of the repo 
&lt;a href=&#34;https://github.com/PaulApivat/tidytuesday/blob/master/2020/himalaya/exploratory.R&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;reactable(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;adding-bar-charts-for-each-row&#34;&gt;Adding Bar Charts for Each Row&lt;/h2&gt;
&lt;p&gt;Of course, bare bones is not much to look at, so adding bar charts is essential for visually communicating quantities and percentages. However, you&amp;rsquo;ll need to use the &lt;code&gt;htmltools&lt;/code&gt; package to begin adding &lt;code&gt;div&lt;/code&gt; to your chart.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Bar Charts can be added with a function 

bar_chart &amp;lt;- function(label, width = &amp;quot;100%&amp;quot;, height = &amp;quot;14px&amp;quot;, fill = &amp;quot;#00bfc4&amp;quot;, background = NULL){
    bar &amp;lt;- div(style = list(background = fill, width = width, height = height))
    chart &amp;lt;- div(style = list(flexGrow = 1, marginLeft = &amp;quot;6px&amp;quot;, background = background), bar)
    div(style = list(display = &amp;quot;flex&amp;quot;, alignItems = &amp;quot;center&amp;quot;), label, chart)
}


# The bar_chart function is then inserted into the numeric columns

reactable(
    df,
    defaultSorted = &amp;quot;attempts&amp;quot;,
    columns = list(
        peak = colDef(
            name = &amp;quot;Peaks&amp;quot;
        ),
        attempts = colDef(
            name = &amp;quot;Attempts (#)&amp;quot;,
            defaultSortOrder = &amp;quot;desc&amp;quot;,
            #format = colFormat(separators = TRUE),
            
            # Render Bar charts using a custom cell render function
            cell = function(value){
                width &amp;lt;- paste0(value * 100 / max(df$attempts), &amp;quot;%&amp;quot;)
                # Add thousands separators
                value &amp;lt;- format(value, big.mark = &amp;quot;,&amp;quot;)
                # Fix each label using the width of the widest number (incl. thousands separators)
                value &amp;lt;- format(value, width = 9, justify = &#39;right&#39;)
                bar_chart(value, width = width, fill = &amp;quot;#3fc1c9&amp;quot;)
            },
            # And left-align the columns
            align = &amp;quot;left&amp;quot;,
            # Use the operating system&#39;s default monospace font, and
            # preserve the white space to prevent it from being collapsed by default
            style = list(fontFamily = &amp;quot;monospace&amp;quot;, whiteSpace = &amp;quot;pre&amp;quot;)
        ),
        fail_rate = colDef(
            name = &amp;quot;Fail (%)&amp;quot;,
            defaultSortOrder = &amp;quot;desc&amp;quot;,
            #format = colFormat(percent = TRUE, digits = 1)
            
            # Render Bar charts using a custom cell render function
            cell = function(value){
                # Format as percentage with 1 decimal place
                value &amp;lt;- paste0(format(value * 100, nsmall = 1), &amp;quot;%&amp;quot;)
                # Fix width here to align single and double-digit percentages
                value &amp;lt;- format(value, width = 5, justify = &amp;quot;right&amp;quot;)
                bar_chart(value, width = value, fill = &amp;quot;#fc5185&amp;quot;, background = &amp;quot;#e1e1e1&amp;quot;)
            },
            # And left-align the columns
            align = &amp;quot;left&amp;quot;,
            style = list(fontFamily = &amp;quot;monospace&amp;quot;, whiteSpace = &amp;quot;pre&amp;quot;)
        )
    )
)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Decimals to Integers</title>
      <link>/technical_notes/example_tech/rstats_viz_scale_x/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_viz_scale_x/</guid>
      <description>&lt;h2 id=&#34;changing-the-x-axis-from-decimals-to-integers&#34;&gt;Changing the x-axis from decimals to integers&lt;/h2&gt;
&lt;p&gt;When creating plots in &lt;code&gt;ggplot2&lt;/code&gt; you&amp;rsquo;ll often want to customize the x-axis so that values appear on a certain interval. In the example below, I wanted to change the intervals from 0.25, 0.50, 0.75 to 1,2,3,4 and so on. In this specific instance, I wanted &lt;em&gt;each&lt;/em&gt; season of the show Friends to have its down tick on the x-axis (note: the show had ten seasons).&lt;/p&gt;
&lt;p&gt;This operation changes the x-axis ticks from having decimals to being integers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggplot)

ggplot(total_data, aes(x = season, y = episode, fill=imdb_rating)) +
    geom_tile() +
    scale_fill_gradient(low = &#39;#FFF580&#39;, high = &#39;#FF4238&#39;) +
    
    ## the seq() function defines the start and end numbers
    ## &#39;by =&#39; indicates the desired interval
    scale_x_continuous(breaks = seq(1,10, by = 1)) + 
    
    theme_classic()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GGPlot Flavored Treemaps</title>
      <link>/technical_notes/example_tech/rstats_viz_treemapify/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_viz_treemapify/</guid>
      <description>&lt;h2 id=&#34;treemapify&#34;&gt;Treemapify&lt;/h2&gt;
&lt;p&gt;There are several options for visualizing treemaps in R. This note focuses on  
&lt;a href=&#34;https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Treemapify&lt;/a&gt;, a package maintained by 
&lt;a href=&#34;https://github.com/wilkox&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;David Wilkins&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I favor this approach over the &lt;code&gt;treemap&lt;/code&gt; package because it is compatible with &lt;code&gt;ggplot2&lt;/code&gt; and allows users to access its&#39; functionality.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example Treemap I created to visualize the dominant emotions displayed for the iconic 90&amp;rsquo;s sitcom, Friends. You can find out more about the 
&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-09-08/readme.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Friends dataset here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other visualizations I created for the Friends project can also be found 
&lt;a href=&#34;https://github.com/PaulApivat/tidytuesday/tree/master/2020/friends&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Below, we can see that &lt;code&gt;geom_treemap&lt;/code&gt;, &lt;code&gt;geom_treemap_subgroup_border&lt;/code&gt; and &lt;code&gt;geom_treemap_subgroup_text&lt;/code&gt; are layers that works seamlessly with other layers like &lt;code&gt;scale_fill_manual&lt;/code&gt;, &lt;code&gt;theme&lt;/code&gt;, and &lt;code&gt;labs&lt;/code&gt; that are staples of the ggplot2 package.&lt;/p&gt;
&lt;p&gt;Bottom line, it&amp;rsquo;s easier to customize treemaps from the &lt;code&gt;treemapify&lt;/code&gt; package than the &lt;code&gt;treemap&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(treemapify)

ggplot(friends_emo_tree, aes(area = n, label = speaker, subgroup = emotion)) +
    geom_treemap(aes(fill = emotion, alpha = n)) +
    geom_treemap_subgroup_border(color = &#39;white&#39;) +
    geom_treemap_subgroup_text(place = &#39;bottom&#39;, grow = T, alpha = 0.3, color = &#39;black&#39;,
                               min.size = 0) +
    geom_treemap_text(color = &#39;white&#39;, fontface = &#39;italic&#39;, place = &#39;centre&#39;, reflow = T) +
    scale_fill_manual(values = c(&#39;#FF4238&#39;, &#39;#FFDC00&#39;, &#39;#42A2D6&#39;, &#39;#9A0006&#39;, &#39;#FFF580&#39;, &#39;#00009E&#39;)) +
    theme(
        plot.background = element_rect(fill = &#39;#36454F&#39;),
        legend.position = &#39;none&#39;,
        title = element_text(colour = &#39;white&#39;, family = &#39;Friends&#39;)
    ) +
    labs(
        title = &#39;The One with the Dominant Emotions&#39;,
        caption = &#39;Viz: @paulapivat | Data: #TidyTuesday&#39;
    )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Visualize Scatterplots with Marginal Distribution using ggExtra</title>
      <link>/technical_notes/example_tech/data_viz_tip2/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/data_viz_tip2/</guid>
      <description>&lt;h2 id=&#34;marginal-distribution-with-ggplot2-and-ggextra&#34;&gt;Marginal Distribution with ggplot2 and ggExtra&lt;/h2&gt;
&lt;p&gt;The data in this example is from the UN 
&lt;a href=&#34;https://unstats.un.org/sdgs/indicators/database/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Statistics Division&lt;/a&gt; Sustainable Development Goal, Indicator 4.4.1.&lt;/p&gt;
&lt;p&gt;Also check out the 
&lt;a href=&#34;https://www.r-graph-gallery.com/277-marginal-histogram-for-ggplot2.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;r-graph-gallery.com&lt;/a&gt; for inspiration.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the breakdown:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Load Packages and Libraries&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The key here is the &lt;code&gt;ggExtra&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&#39;ggExtra&#39;)
library(ggExtra)
library(tidyverse)

&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Create a basic scatter plot&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The key here is using &lt;code&gt;pivot_wider&lt;/code&gt; to give all &lt;code&gt;Type of skill&lt;/code&gt; their own columns. We&amp;rsquo;ll then pick out specific columns (i.e., COPA, EMAIL, PCPR) to summarize, then plot on the x- and y- axes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Basic Scatter Plot (color cluster by Gender)
p &amp;lt;- data %&amp;gt;%
    select(GeoAreaName, TimePeriod, Sex, `Type of skill`, Value) %&amp;gt;%
    group_by(GeoAreaName, TimePeriod, Sex, `Type of skill`, Value) %&amp;gt;%
    pivot_wider(names_from = `Type of skill`, values_from = Value) %&amp;gt;%
    mutate(
        COPA = as.numeric(COPA),
        EMAIL = as.numeric(EMAIL),
        PCPR = as.numeric(PCPR)
    ) %&amp;gt;%
    # Group by GeoAreaName, across TimePeriod, Sex
    group_by(GeoAreaName, Sex) %&amp;gt;%
    summarize(
        avg_COPA = mean(COPA, na.rm = TRUE),
        avg_EMAIL = mean(EMAIL, na.rm = TRUE),
        avg_PCPR = mean(PCPR, na.rm = TRUE)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    ggplot(aes(x = avg_PCPR, y = avg_EMAIL, color = Sex)) + 
    geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Use &lt;code&gt;ggMarginal()&lt;/code&gt; to create the marginal distribution along the side of the scatter plots. This is a function from the &lt;code&gt;ggExtra&lt;/code&gt; package.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# Scatter Plot with Marginal Distribution
ggMarginal(p, type = &#39;histogram&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This particular chart is especially useful to highlight different distributions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Calculating 25th, 50th and 75th Percentile of Column Values</title>
      <link>/technical_notes/example_tech/rstats_tip4/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_tip4/</guid>
      <description>&lt;h2 id=&#34;calculating-percentiles&#34;&gt;Calculating Percentiles&lt;/h2&gt;
&lt;p&gt;When we have a list of values in a column, how can we determine which values are under/over the 25th percentile, 50th percentile or 75th percentile?&lt;/p&gt;
&lt;p&gt;Here the example are countries&#39; &lt;em&gt;average percentages&lt;/em&gt; of the population with, broadly speaking, ICT Skills as determine by the Sustainable Development Goals, 
&lt;a href=&#34;https://unstats.un.org/wiki/display/SDGeHandbook/Indicator&amp;#43;4.4.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Indicator 4.4.1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are three methods. First, manually calculating values for the 25th, 50th and 75th percentile with the &lt;code&gt;quantile()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Country mean_values at 25th, 50th and 75th percentile 

data %&amp;gt;%
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod, Units) %&amp;gt;%
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(Value = as.numeric(Value)) %&amp;gt;%
    group_by(GeoAreaName) %&amp;gt;%
    summarize(
        mean_value = mean(Value)
    ) %&amp;gt;%
    mutate(
        min_mean = min(mean_value),
        iqr_25_percentile = quantile(mean_value, probs = c(0.25)),
        iqr_50_percentile = quantile(mean_value, probs = c(0.50)),
        iqr_75_percentile = quantile(mean_value, probs = c(0.75)),
        max_mean = max(mean_value)
    ) %&amp;gt;%
    arrange(desc(mean_value)) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second approach is to use the &lt;code&gt;ntile()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Creating bins using ntile()

data %&amp;gt;%
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod, Units) %&amp;gt;%
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(Value = as.numeric(Value)) %&amp;gt;%
    group_by(GeoAreaName) %&amp;gt;%
    summarize(
        mean_value = mean(Value)
    ) %&amp;gt;%
    mutate(
        mean_value_binned = ntile(mean_value, 4)
    ) %&amp;gt;%
    arrange(desc(mean_value))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The third approach uses the &lt;code&gt;purrr&lt;/code&gt; package and the &lt;code&gt;partial&lt;/code&gt; function that can be used with &lt;code&gt;dplyr&#39;s&lt;/code&gt; &lt;code&gt;summarize_at()&lt;/code&gt; function. Check out the 
&lt;a href=&#34;https://tbradley1013.github.io/2018/10/01/calculating-quantiles-for-groups-with-dplyr-summarize-and-purrr-partial/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
## Using purrr
library(purrr)
    
p &amp;lt;- c(0.25, 0.50, 0.75)

p_names &amp;lt;- map_chr(p, ~paste0(.x*100, &amp;quot;%&amp;quot;))

p_funs &amp;lt;- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %&amp;gt;%
    set_names(nm = p_names)

p_funs

data %&amp;gt;%
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod, Units) %&amp;gt;%
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(Value = as.numeric(Value)) %&amp;gt;%
    group_by(GeoAreaName) %&amp;gt;%
    summarize(
        mean_value = mean(Value)
    ) %&amp;gt;%
    summarize_at(vars(mean_value), funs(!!!p_funs))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Does order of operation matter among dplyr functions?</title>
      <link>/technical_notes/example_tech/rstats_tip5/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_tip5/</guid>
      <description>&lt;h2 id=&#34;data-wrangling-does-order-matter&#34;&gt;Data Wrangling: Does Order matter?&lt;/h2&gt;
&lt;p&gt;In short, yes, it matters. But when and where?&lt;/p&gt;
&lt;p&gt;Below are examples to highlight when function order matters and when it doesn&amp;rsquo;t. The source for the raw data used in this illustration are from the United Nations&#39; Statistics Division for 
&lt;a href=&#34;https://unstats.un.org/sdgs/indicators/database/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sustainable Development Goals&lt;/a&gt; (SDG) Indicators (Goal 4, Target 4.4).&lt;/p&gt;
&lt;p&gt;See also UN Statistics Wiki on 
&lt;a href=&#34;https://unstats.un.org/wiki/display/SDGeHandbook/Indicator&amp;#43;4.4.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Indicator 4.4.1&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Example chain of functions to determine proportion of Thailand&#39;s population to have certain ICT skills in 2018

data %&amp;gt;%
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod) %&amp;gt;%
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(
        Value = as.double(Value)
    ) %&amp;gt;%
    filter(GeoAreaName == &#39;Thailand&#39;) %&amp;gt;% 
    filter(TimePeriod == 2018) %&amp;gt;% 
    group_by(type_of_skill) %&amp;gt;%
    summarize(
        mean_value = mean(Value),
        median_value = median(Value)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    arrange(desc(mean_value))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the &lt;code&gt;filter&lt;/code&gt; functions are moved up to be before &lt;code&gt;rename&lt;/code&gt; and &lt;code&gt;mutate&lt;/code&gt;. The ordering here does &lt;strong&gt;not&lt;/strong&gt; matter.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data %&amp;gt;%
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod) %&amp;gt;%
    
    # putting filter before rename, mutate is fine
    filter(GeoAreaName == &#39;Thailand&#39;) %&amp;gt;% 
    filter(TimePeriod == 2018) %&amp;gt;% 
    
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(
        Value = as.double(Value)
    ) %&amp;gt;%
    group_by(type_of_skill) %&amp;gt;%
    summarize(
        mean_value = mean(Value),
        median_value = median(Value)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    arrange(desc(mean_value))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Furthermore, we could even experiment with the &lt;code&gt;filter&lt;/code&gt; function being before or after &lt;code&gt;select&lt;/code&gt;. Here, ordering also does &lt;strong&gt;not&lt;/strong&gt; matter.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data %&amp;gt;%
    filter(GeoAreaName == &#39;Thailand&#39;) %&amp;gt;% 
    filter(TimePeriod == 2018) %&amp;gt;% 
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod) %&amp;gt;%
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(
        Value = as.double(Value)
    ) %&amp;gt;%
    group_by(type_of_skill) %&amp;gt;%
    summarize(
        mean_value = mean(Value),
        median_value = median(Value)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    arrange(desc(mean_value))

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is there order &lt;strong&gt;does&lt;/strong&gt; matter. When we try to move the two &lt;code&gt;filter&lt;/code&gt; functions below &lt;code&gt;group_by&lt;/code&gt;, &lt;code&gt;summarize&lt;/code&gt; and &lt;code&gt;ungroup&lt;/code&gt;, the filtering does &lt;em&gt;not&lt;/em&gt; work. By the time we get to &lt;code&gt;filter(GeoAreaName == &#39;Thailand&#39;)&lt;/code&gt; in this example, GeoAreaName has been removed because we did &lt;em&gt;not&lt;/em&gt; &lt;code&gt;group_by&lt;/code&gt; &lt;code&gt;GeoAreaName&lt;/code&gt;, so we get an error.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Running this code, we&#39;ll get the ERROR: Problem with `filter()` input `..1`. x object &#39;GeoAreaName&#39; not found â¹ Input `..1` is 
# `GeoAreaName == &amp;quot;Thailand&amp;quot;`.

data %&amp;gt;%
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod) %&amp;gt;%
    relocate(Sex, Value, GeoAreaName) %&amp;gt;%
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(
        Value = as.double(Value)
    ) %&amp;gt;%
    # filter was previously here
    group_by(type_of_skill) %&amp;gt;%
    summarize(
        mean_value = mean(Value),
        median_value = median(Value)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    # moving filter down below group_by &amp;amp; summarize() does not work
    filter(GeoAreaName == &#39;Thailand&#39;) %&amp;gt;% 
    filter(TimePeriod == 2018) %&amp;gt;% 
    arrange(desc(mean_value))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, if we want to use &lt;code&gt;filter&lt;/code&gt; on the &lt;em&gt;results&lt;/em&gt; of the &lt;code&gt;mutate&lt;/code&gt; function, we see that order &lt;strong&gt;does&lt;/strong&gt; matter. By the time we get to the final &lt;code&gt;filter(Value &amp;lt; 10)&lt;/code&gt;, the &lt;code&gt;Value&lt;/code&gt; variable is no longer available to us because we did not &lt;code&gt;group_by&lt;/code&gt; and &lt;code&gt;summarize&lt;/code&gt; by Value (instead we created &lt;code&gt;mean_value&lt;/code&gt; and &lt;code&gt;median_value&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
data %&amp;gt;%
    filter(GeoAreaName == &#39;Thailand&#39;) %&amp;gt;% 
    filter(TimePeriod == 2018) %&amp;gt;% 
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod) %&amp;gt;%
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(
        Value = as.double(Value)
    ) %&amp;gt;%
    # filtering for Values less than 10 does work here
    filter(Value &amp;lt; 10) %&amp;gt;%
    group_by(type_of_skill) %&amp;gt;%
    summarize(
        mean_value = mean(Value),
        median_value = median(Value)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    arrange(desc(mean_value)) %&amp;gt;%
    # filter for Values less than 10 does not work down here
    filter(Value &amp;lt; 10)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating a dendrogram with R and ggraph</title>
      <link>/technical_notes/example_tech/data_viz_tip1/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/data_viz_tip1/</guid>
      <description>&lt;h2 id=&#34;nested-and-hierarchical-data&#34;&gt;Nested and Hierarchical Data&lt;/h2&gt;
&lt;p&gt;When you have data with multiple subgroups, one option is to treat them as nested and/or hierarchical data.&lt;/p&gt;
&lt;p&gt;In this technical note, I&amp;rsquo;ll outline how to create a dendrogram.&lt;/p&gt;
&lt;p&gt;The data used is from the 
&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-08-18/readme.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Extinct Plants&lt;/a&gt; data set from 
&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TidyTuesday&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the breakdown:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Load Packages and Libraries&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;ggraph&amp;quot;)
install.packages(&amp;quot;igraph&amp;quot;)
library(ggraph)
library(igraph)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Create a data frame with three levels&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Taking the &lt;code&gt;plants&lt;/code&gt; data frame, I do some wrangling to get the desired columns.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plants_data &amp;lt;- plants %&amp;gt;%
    select(group, binomial_name) %&amp;gt;%
    group_by(group) %&amp;gt;%
    arrange(group) %&amp;gt;% 
    mutate(
        level1 = &#39;center&#39;,
        level2 = group,
        level3 = binomial_name
    ) %&amp;gt;%
    # important to ungroup here
    ungroup() %&amp;gt;%
    select(level1:level3) 

&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Create an edge list&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# transform it to an edge list
plants_edges_level1_2 &amp;lt;- plants_data %&amp;gt;% 
    select(level1, level2) %&amp;gt;% 
    unique %&amp;gt;% 
    rename(from=level1, to=level2)

plants_edges_level2_3 &amp;lt;- plants_data %&amp;gt;% 
    select(level2, level3) %&amp;gt;% 
    unique %&amp;gt;% 
    rename(from=level2, to=level3)

plants_edge_list=rbind(plants_edges_level1_2, plants_edges_level2_3)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Plot a basic chart&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Because I have many observations, I&amp;rsquo;m optiing to use a &amp;ldquo;circular&amp;rdquo; dendrogram.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# plot plant dendogram
plantgraph &amp;lt;- graph_from_data_frame(plants_edge_list)

ggraph(plantgraph, layout = &amp;quot;dendrogram&amp;quot;, circular = TRUE) +
    geom_edge_diagonal() +
    geom_node_point() +
    theme_void()
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Add text to the end of the edges&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# add text &amp;amp; color(leaf)
ggraph(plantgraph, layout = &amp;quot;dendrogram&amp;quot;, circular = TRUE) +
    geom_edge_diagonal() +
    geom_node_text(aes(label = name, filter=leaf), hjust = 1, size = 1) +
    geom_node_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: The breakdown of plant groupings are listed below. We can see the Flowering Plants &lt;em&gt;disproportionately&lt;/em&gt; out number other groups like Ferns &amp;amp; Allies, Cycad, Mosses, Algae and Conifer.&lt;/p&gt;
&lt;p&gt;When visualizing, we&amp;rsquo;re better off separating Flowering Plants from the other groups.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plants %&amp;gt;%
    group_by(group) %&amp;gt;%
    tally(sort = TRUE)

# A tibble: 6 x 2
  group                n
  &amp;lt;chr&amp;gt;            &amp;lt;int&amp;gt;
1 Flowering Plant    471
2 Ferns and Allies    13
3 Cycad                8
4 Mosses               4
5 Algae                3
6 Conifer              1

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s a sample picture of the plants&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./png/data_viz_tip1_pic1.png&#34; alt=&#34;dendrogram&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./data_viz_tip1_pic1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;















&lt;figure id=&#34;figure-dendrogram&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./data_viz_tip1_pic1.png&#34; data-caption=&#34;Dendrogram.&#34;&gt;


  &lt;img src=&#34;./data_viz_tip1_pic1.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Dendrogram.
  &lt;/figcaption&gt;


&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Using the pivot_wider() function</title>
      <link>/technical_notes/example_tech/rstats_tip3/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_tip3/</guid>
      <description>&lt;p&gt;With 
&lt;a href=&#34;https://www.tidyverse.org/blog/2019/09/tidyr-1-0-0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tidyr 1.0.0&lt;/a&gt;, there are several enhancements, one of which are &lt;code&gt;pivot_wider()&lt;/code&gt; and &lt;code&gt;pivot_longer()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-pivot_wider&#34;&gt;Using pivot_wider()&lt;/h2&gt;
&lt;p&gt;In another 
&lt;a href=&#34;https://paulapivat.com/technical_notes/example_tech/rstats_tip2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;post&lt;/a&gt;, the &lt;code&gt;spread()&lt;/code&gt; function was introduced as a way to observe the &amp;ldquo;tidy&amp;rdquo; principle of data formatting for analysis.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;pivot_wider()&lt;/code&gt; function is an updated of &lt;code&gt;spread()&lt;/code&gt; and is much more intuitive. Here&amp;rsquo;s how it works:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# PIVOT_WIDER - even better than Spread

data %&amp;gt;%
    filter(GeoAreaName==&amp;quot;Morocco&amp;quot; | GeoAreaName==&amp;quot;Qatar&amp;quot;) %&amp;gt;% 
    select(GeoAreaName, TimePeriod, Sex, `Type of skill`, Value) %&amp;gt;%
    group_by(GeoAreaName, TimePeriod, Sex, `Type of skill`, Value) %&amp;gt;%
    pivot_wider(names_from = `Type of skill`, values_from = Value) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this data set, &lt;code&gt;Type of skill&lt;/code&gt; represents, broadly speaking, ICT Skills broken down into eight categories in this column. By using &lt;code&gt;pivot_wider()&lt;/code&gt; each sub-category of ICT Skills gets it&amp;rsquo;s &lt;strong&gt;own&lt;/strong&gt; column, thus making the overall data frame &lt;em&gt;wider&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-pivot_longer&#34;&gt;Using pivot_longer()&lt;/h2&gt;
&lt;p&gt;Conversely, there&amp;rsquo;s also &lt;code&gt;pivot_longer&lt;/code&gt; for the opposite effect. This next code chunk is part of my attempt for 
&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TidyTuesday&lt;/a&gt; (&amp;lsquo;Extinct Plants&amp;rsquo; for the week of 2020-08-18)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;cols&lt;/code&gt; parameter determines the range of columns to be changed from wide to long. The &lt;code&gt;names_to&lt;/code&gt; parameter sets the new column name and &lt;code&gt;values_to&lt;/code&gt; indicates the value of the new columns.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# PIVOT_LONGER - better than Gather

plants %&amp;gt;%
    select(binomial_name, threat_AA:action_NA) %&amp;gt;%
    pivot_longer(cols = threat_AA:action_NA, names_to = &amp;quot;action&amp;quot;, values_to = &amp;quot;count&amp;quot;) %&amp;gt;%
    ggplot(aes(x = binomial_name, y = action, fill = count)) +
    geom_tile() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Use the spread() function</title>
      <link>/technical_notes/example_tech/rstats_tip2/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_tip2/</guid>
      <description>&lt;p&gt;One principle of &lt;code&gt;tidy&lt;/code&gt; data is to change from wide to long; and conversely, long to wide.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a concrete example:&lt;/p&gt;
&lt;h2 id=&#34;using-spread&#34;&gt;Using spread()&lt;/h2&gt;
&lt;p&gt;The first part of the below pre-processing steps include subsetting the original data frame (data) by selecting two countries for comparison (Morocco and Qatar) on specific variables such as: &lt;code&gt;GeoAreaName&lt;/code&gt;, &lt;code&gt;TimePeriod&lt;/code&gt;, &lt;code&gt;Sex&lt;/code&gt;, &lt;code&gt;Type of skill&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then employing &lt;code&gt;group_by&lt;/code&gt; to ensure all rows are unique. The next line is key as it addresses an error that each row must be marked by a unique id key.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;spread()&lt;/code&gt; function allows us to see each countries&#39; relative performance on various 
&lt;a href=&#34;http://tcg.uis.unesco.org/4-4-1-proportion-of-youth-and-adults-with-information-and-communications-technology-ict-skills-by-type-of-skill/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ICT skills&lt;/a&gt;. Please consult meta-data for more details.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data %&amp;gt;%
    filter(GeoAreaName==&amp;quot;Morocco&amp;quot; | GeoAreaName==&amp;quot;Qatar&amp;quot;) %&amp;gt;% 
    select(GeoAreaName, TimePeriod, Sex, `Type of skill`, Value) %&amp;gt;%
    group_by(GeoAreaName, TimePeriod, Sex, `Type of skill`, Value) %&amp;gt;%
	
    # Error: Each row of output must be identified by a unique combination of keys.
    # rowid_to_column() address this error
	
    tibble::rowid_to_column() %&amp;gt;%
    spread(key = `Type of skill`, value = Value)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Make your work reproducible</title>
      <link>/technical_notes/example_tech/rstats_tip1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_tip1/</guid>
      <description>&lt;p&gt;Understanding reproducibility and the &lt;code&gt;set.seed()&lt;/code&gt; function in &lt;code&gt;R&lt;/code&gt; is best achieved through generating various random numbers. Here are some more tips for making your work reproducible:&lt;/p&gt;
&lt;h2 id=&#34;using-setseed&#34;&gt;Using set.seed()&lt;/h2&gt;
&lt;p&gt;Example of reproducibility in fitting ML models using set.seed()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#First Line
set.seed(1234)   

#Second Line
model_05_rand_forest_ranger &amp;lt;- rand_forest(
    mode = &amp;quot;regression&amp;quot;, mtry = 4, trees = 1000, min_n = 10
    ) %&amp;gt;%
    set_engine(&amp;quot;ranger&amp;quot;, splitrule = &amp;quot;extratrees&amp;quot;, importance = &amp;quot;impurity&amp;quot;) %&amp;gt;%
    fit(price ~ ., data = train_tbl %&amp;gt;% select(-id, -model, -model_tier))

#Third Line
model_05_rand_forest_ranger %&amp;gt;% calc_metrics(test_tbl)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;random-numbers&#34;&gt;Random Numbers&lt;/h2&gt;
&lt;p&gt;Here are several ways to get random numbers. These examples are informed by the &lt;code&gt;R Cookbook&lt;/code&gt;, see 
&lt;a href=&#34;http://www.cookbook-r.com/Numbers/Generating_random_numbers/#:~:text=For%20uniformly%20distributed%20%28flat%29%20random,is%20from%200%20to%201.&amp;amp;text=To%20generate%20numbers%20from%20a,the%20standard%20deviation%20is%201.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# get one random number using runif() from base-R, stats package
# default 0 to 1
runif(1)

# get two random numbers
runif(2)

# get a vector of three random numbers
# increase range beyond the default, -10 to 110
runif(3, min = -10, max = 110)

# ensure three random numbers do *not* have decimals
# use floor() function to round down
floor(runif(3, min = -10, max = 110))

# sample() function does the same thing - using just one function
# replace parameter: should sampling be with or without replacement?
sample(-10:110, 3, replace = TRUE)

# Reproducibility
# use set.seed() before any of the aforementioned random number generators

set.seed(123)
sample(-10:110, 3, replace = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;random-numbers-from-a-normal-distribution&#34;&gt;Random Numbers from a Normal Distribution&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# Get five random numbers from a normal distribution
# Here the default is mean = 0, standard deviation = 1.
rnorm(5)

# Change mean and standard deviation away from default
rnorm(5, mean = 66, sd = 12)

# Ensure reproducibility with set.seed()
set.seed(123)
rnorm(5, mean = 66, sd = 12)

# Ensure normal distribution by setting sufficiently large number with rnorm()
# Ensure reproducibility
# Plot a histogram

set.seed(123)
x &amp;lt;- rnorm(500, mean = 66, sd = 12)
hist(x)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Example Page 2</title>
      <link>/courses/example/example2/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/example/example2/</guid>
      <description>&lt;p&gt;Here are some more tips for getting started with Academic:&lt;/p&gt;
&lt;h2 id=&#34;tip-3&#34;&gt;Tip 3&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
&lt;h2 id=&#34;tip-4&#34;&gt;Tip 4&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Technical Notes Page 2</title>
      <link>/technical_notes/example_tech/technical_notes2/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/technical_notes2/</guid>
      <description>&lt;p&gt;Here are some more tips for getting started with Academic:&lt;/p&gt;
&lt;h2 id=&#34;technical-tip-3&#34;&gt;Technical Tip 3&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
&lt;h2 id=&#34;technical-tip-4&#34;&gt;Technical Tip 4&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>/talk/example/</link>
      <pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate>
      <guid>/talk/example/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Academic&amp;rsquo;s 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Slides&lt;/em&gt;&lt;/a&gt; feature and link using &lt;code&gt;slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further talk details can easily be added to this page using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My journey to web3 data</title>
      <link>/post/before_crypto/</link>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/post/before_crypto/</guid>
      <description>&lt;h3 id=&#34;before-crypto&#34;&gt;Before Crypto&lt;/h3&gt;
&lt;p&gt;I entered crypto in the fall of 2017, upon buying my first BTC &amp;amp; ETH as incentive to keep up with the industry, but my journey &lt;em&gt;actually&lt;/em&gt; started in 2012 when I took a Ruby on Rails Backend programming course. Up till that point, my training had been in organizational psychology, but the seeds for data work were planted then as I took the 1 train from 116th and Broadway to the Flat Iron district for evening classes at General Assembly.&lt;/p&gt;
&lt;p&gt;After completing my 
&lt;a href=&#34;https://www.proquest.com/openview/c6b31a2a839ca8d292087c35e86ec137/1?pq-origsite=gscholar&amp;amp;cbl=18750&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dissertation&lt;/a&gt; in 2014, I worked in higher education, exploring how organizations balance social and financial goals. At the time, I was interested in how leaders helped their organizations manage the social-financial tension. When presented with an opportunity to see an 
&lt;a href=&#34;https://www.learneducation.co.th/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;education company&lt;/a&gt; pursue both social and financial missions, I jumped in to the operational side. My partner and I led an in-house edtech startup, while supporting the parent company&amp;rsquo;s mission to subsidize education for low income schools.&lt;/p&gt;
&lt;p&gt;I came away with two key thoughts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Social enterprises are harder to operate than traditional for-profit enterprises. Good in theory, I have yet to find one that sustainably works in practice.&lt;/li&gt;
&lt;li&gt;Social enterprises might be more of a bandaid to a systemic problem of underfunding public goods.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By the 2017, I was looking for a change and bought BTC &amp;amp; ETH at the market top. I spent the next year absorbing white papers and attending conferences (Deconomy in Korea, Ethereum Community Conference in Toronto). Despite the market crash, I knew permissionless, censorship resistant, public networks were here to stay.&lt;/p&gt;
&lt;p&gt;Having skin in the game got me down the rabbit hole. The interdisciplinary nature of the industry kept me staying. Crypto appeared to have implications for multiple strands in my life from economics, to software and data, to organizing and coordination, the intellectual stimulation of was endless.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Quick tangent.&lt;/p&gt;
&lt;p&gt;My country has vacillated between democratically elected governments and autocratic military regimes since 1932. In the 70&amp;rsquo;s, politically active college students (my parents&#39; generation) protested military regime, resulting in a bloody clash. Fast foward 50 years and we &lt;em&gt;still&lt;/em&gt; have people protesting. Several decades worth of empirical data suggest protesting to be headline grabbing, but ultimately unsustainable.&lt;/p&gt;
&lt;p&gt;The fact that crypto represents the chance at a new system is compelling for me. The alternative is to reform old decaying institutions from within or wait for old dinosaurs to die out. I&amp;rsquo;ve seen that story and don&amp;rsquo;t have another 50 years to wait around for evolution. Crypto represents a &lt;em&gt;chance&lt;/em&gt; at punctuated equilibrium and i&amp;rsquo;m here for it.&lt;/p&gt;
&lt;p&gt;Insert &amp;ldquo;remind me in 20 years&amp;rdquo; tweet.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I spent 2019 leveling up my technical skills, taking a web development bootcamp (Lambda School, now BloomTech), doing consulting (AWRL) and briefly working for a startup in the Cosmos ecosystem (TruStory).&lt;/p&gt;
&lt;p&gt;Things started coalescing in 2020 as I placed 2nd in a data visualization competition to be presented at the Wharton People Analytics conference before Covid19 shut the world down. I continued to hone my data skills.&lt;/p&gt;
&lt;p&gt;Another inflection point came with the Bankless membership airdrop in May 2021; I got in at the ground level and started contributing.&lt;/p&gt;
&lt;p&gt;I spent 2021 enabling capital and coordination through on- and off-chain data at 
&lt;a href=&#34;https://www.bankless.community/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bankless DAO&lt;/a&gt; as a core contributor ( 
&lt;a href=&#34;https://app.poap.xyz/scan/0xdfdf2d882d9ebce6c7eac3da9ab66cbfda263781&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;POAPs&lt;/a&gt;), from genesis to season 3.&lt;/p&gt;
&lt;p&gt;I was a founding member at the 
&lt;a href=&#34;https://www.notion.so/bankless/BanklessDAO-Wiki-82ba81e7da1c42adb7c4ab67a4f22e8f&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Analytics Guild&lt;/a&gt; where I shared insights with the community through 
&lt;a href=&#34;https://forum.bankless.community/u/paulapivat/activity/topics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;forum posts&lt;/a&gt;. My colleagues and I built 
&lt;a href=&#34;https://www.notion.so/bankless/DAO-Dash-41a151ce8ef74fcd893cba3b47223828&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DAO Dash&lt;/a&gt;, an in-house analytics platform to provide insights to guilds and projects at BanklessDAO. I also provided growth and usage metrics for the BanklessDAO 
&lt;a href=&#34;https://www.notion.so/bankless/Bounty-Board-318dc164cc5640cca17e0fb5f484fd90&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bounty Board&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m currently focused on leveling up my &lt;strong&gt;smart contract sleuthing&lt;/strong&gt; skills to analyze DeFi protocols.&lt;/p&gt;
&lt;p&gt;I am working with the Bankless DeFi Innovation Index team to provide on-chain data overview of various projects that make up $GMI.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like help with on-chain analysis, please 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Inspect Element to Grab API Endpoints and Tokens</title>
      <link>/post/grab_api_inspect_element/</link>
      <pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate>
      <guid>/post/grab_api_inspect_element/</guid>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;When maintaining data pipelines, sometimes API endpoints get changed or authorization tokens expire prompting a need to grab new &lt;strong&gt;API endpoints&lt;/strong&gt; and &lt;strong&gt;bearer tokens&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This post provide a brief walk-through on how to use &lt;strong&gt;Inspect Element&lt;/strong&gt; on a web browser to grab this data. Which represents a powerful way to access a project&amp;rsquo;s API &lt;em&gt;before&lt;/em&gt; reaching out to the team.&lt;/p&gt;
&lt;h3 id=&#34;scenario&#34;&gt;Scenario&lt;/h3&gt;
&lt;p&gt;We have a data pipeline to ingest 
&lt;a href=&#34;https://coordinape.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Coordinape&lt;/a&gt; data but after two months, the pipeline script returns a &lt;code&gt;Response 401&lt;/code&gt; error, suggesting a connection could not be made. We want a way to explore what&amp;rsquo;s going on.&lt;/p&gt;
&lt;h4 id=&#34;api-endpoint-with-inspect-element&#34;&gt;API Endpoint with Inspect Element&lt;/h4&gt;
&lt;p&gt;We go to the Coordinape application and sign-in with our Ethereum wallet. Then, I left click on go to &lt;code&gt;inspect element&lt;/code&gt;, navigating to the &lt;strong&gt;Network&lt;/strong&gt; tab as shown here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./network_xhr.png&#34; alt=&#34;inspect_element&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once in the &lt;strong&gt;Network&lt;/strong&gt; tab, select &lt;strong&gt;Fetch/XHR&lt;/strong&gt; (XHR stands for XMLHttpRequest, but XML is phased out for JSON). Then we should see a list of events.&lt;/p&gt;
&lt;p&gt;The event highlighted in red indicates a &lt;strong&gt;Request URL&lt;/strong&gt; that shows the &lt;em&gt;current&lt;/em&gt; API endpoint (in Header)&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the endpoint: &lt;code&gt;https://api.coordinape.com/api/v2/manifest?circle_id=63&lt;/code&gt; (&lt;strong&gt;note&amp;amp;&lt;/strong&gt;: in the old endpoint, manifest was token-gifts. It looks like the team has consolidated it&amp;rsquo;s API endpoints)&lt;/p&gt;
&lt;h4 id=&#34;authorization&#34;&gt;Authorization&lt;/h4&gt;
&lt;p&gt;To grab the authorization, &lt;strong&gt;bearer token&lt;/strong&gt;, scroll down in &lt;strong&gt;Header&lt;/strong&gt; down to &lt;strong&gt;Request Headers&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./network_xhr_1.png&#34; alt=&#34;authorization&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is the information you&amp;rsquo;d store in the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;
&lt;h3 id=&#34;data-structure&#34;&gt;Data Structure&lt;/h3&gt;
&lt;p&gt;Finally, you can also get a sense for what kind of data will be returned with this new API endpoint by navigating to the &lt;strong&gt;Preview&lt;/strong&gt; tab next to &lt;strong&gt;Headers&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./network_xhr_2.png&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here we see circle, circles, myUsers and profile. It looks like we have nested JSON that will need to be flattened.&lt;/p&gt;
&lt;p&gt;For more use of data to explore DAOs and web3 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learn Foundational Ethereum Topics with SQL</title>
      <link>/post/query_ethereum/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      <guid>/post/query_ethereum/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#transactions&#34;&gt;Transactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#breaking_down_transactions&#34;&gt;Breaking Down Transactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#blocks&#34;&gt;Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#gas&#34;&gt;Gas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Many Ethereum tutorials target developers, but thereâs a lack of educational resources for data analyst or for people who wish to see on-chain data without running a client or node.&lt;/p&gt;
&lt;p&gt;This tutorial helps readers understand fundamental Ethereum concepts including transactions, blocks and gas by querying on-chain data with structured query language (SQL) through an interface provided by 
&lt;a href=&#34;https://duneanalytics.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dune Analytics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On-chain data can help us understand Ethereum, the network, and as an economy for computing power and should serve as a base for understanding challenges facing Ethereum today (i.e., rising gas prices) and, more importantly, discussions around scaling solutions.&lt;/p&gt;
&lt;h3 id=&#34;transactions&#34;&gt;Transactions&lt;/h3&gt;
&lt;p&gt;A userâs journey on Ethereum starts with initializing a user-controlled account or an entity with an ETH balance. There are two account types - user-controlled or a smart contract (see 
&lt;a href=&#34;https://ethereum.org/en/developers/docs/accounts/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereum.org&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Any account can be viewed on a block explorer like 
&lt;a href=&#34;https://etherscan.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Etherscan&lt;/a&gt;. Block explorers are a portal to Ethereumâs data. They display, in real-time, data on blocks, transactions, miners, accounts and other on-chain activity (see 
&lt;a href=&#34;https://ethereum.org/en/developers/docs/data-and-analytics/block-explorers/#top&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, a user may wish to query the data directly to reconcile the information provided by external block explorers. 
&lt;a href=&#34;https://duneanalytics.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dune Analytics&lt;/a&gt; provides this capability to anyone with some knowledge of SQL.&lt;/p&gt;
&lt;p&gt;For reference, the smart contract account for the Ethereum Foundation (EF) can be viewed on 
&lt;a href=&#34;https://etherscan.io/address/0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Etherscan&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One thing to note is that all accounts, including the EFâs, has a public address that can be used to send and receive transactions.&lt;/p&gt;
&lt;p&gt;The account balance on Etherscan comprises regular transactions and internal transactions. Internal transactions, despite the name, are not &lt;em&gt;actual&lt;/em&gt; transactions that change the state of the chain. They are value transfers initiated by executing a contract (
&lt;a href=&#34;https://ethereum.stackexchange.com/questions/3417/how-to-get-contract-internal-transactions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;). Since internal transactions have no signature, they are &lt;strong&gt;not&lt;/strong&gt; included on the blockchain and cannot be queried with Dune Analytics.&lt;/p&gt;
&lt;p&gt;Therefore, this tutorial will focus on regular transactions. This can be queried as such:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WITH temp_table AS (
SELECT 
    hash,
    block_number,
    block_time,
    &amp;quot;from&amp;quot;,
    &amp;quot;to&amp;quot;,
    value / 1e18 AS ether,
    gas_used,
    gas_price / 1e9 AS gas_price_gwei
FROM ethereum.&amp;quot;transactions&amp;quot;
WHERE &amp;quot;to&amp;quot; = &#39;\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe&#39;   
ORDER BY block_time DESC
)
SELECT
    hash,
    block_number,
    block_time,
    &amp;quot;from&amp;quot;,
    &amp;quot;to&amp;quot;,
    ether,
    (gas_used * gas_price_gwei) / 1e9 AS txn_fee
FROM temp_table

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will yield the same information as provided on Etherscan&amp;rsquo;s transaction page. For comparison, here are the two sources:&lt;/p&gt;
&lt;h4 id=&#34;etherscan&#34;&gt;Etherscan&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./etherscan_view.png&#34; alt=&#34;etherscan_view&#34;&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://etherscan.io/address/0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EF&amp;rsquo;s contract page on Etherscan.&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;dune-analytics&#34;&gt;Dune Analytics&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./dune_view.png&#34; alt=&#34;dune_view&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can find dashboard 
&lt;a href=&#34;https://duneanalytics.com/paulapivat/Learn-Ethereum&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. Click on the table to see the query (also see above).&lt;/p&gt;
&lt;h3 id=&#34;breaking_down_transactions&#34;&gt;Breaking_Down_Transactions&lt;/h3&gt;
&lt;p&gt;A submitted transaction includes several pieces of information including (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/transactions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Recipient&lt;/strong&gt;: The receiving address (queried as &amp;ldquo;to&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Signature&lt;/strong&gt;: While a sender&amp;rsquo;s private keys signs a transaction, what we can query with SQL is a sender&amp;rsquo;s public address (&amp;ldquo;from&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value&lt;/strong&gt;: This is the amount of ETH transferred (see &lt;code&gt;ether&lt;/code&gt; column).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data&lt;/strong&gt;: This is arbitrary data that&amp;rsquo;s been hashed (see &lt;code&gt;data&lt;/code&gt; column)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gasLimit&lt;/strong&gt;: The maximum amount of gas, or the cost of computation, that can be consumed by a transaction (see &lt;code&gt;gas_limit&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gasPrice&lt;/strong&gt;: The fee the sender pays to sign a transaction to the blockchain. Gas is denominated in Gwei which is 0.000000001 ETH (nine decimal places).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can query these specific pieces of information for transactions to the Ethereum Foundation public address:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT 
    &amp;quot;to&amp;quot;,
    &amp;quot;from&amp;quot;,
    value / 1e18 AS ether,
    data,
    gas_limit,
    gas_price / 1e9 AS gas_price_gwei,
    gas_used,
    ROUND(((gas_used / gas_limit) * 100),2) AS gas_used_pct
FROM ethereum.&amp;quot;transactions&amp;quot;
WHERE &amp;quot;to&amp;quot; = &#39;\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe&#39;   
ORDER BY block_time DESC

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;blocks&#34;&gt;Blocks&lt;/h3&gt;
&lt;p&gt;Each transaction will change the state of the Ethereum virtual machine (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/evm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EVM&lt;/a&gt;) (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/transactions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;). Transactions are broadcasted to the network to be verified and included in a block. Each transaction is associated with a block number. To see the data, we could query a specific block number:  12396854 (the most recent block among Ethereum Foundation transactions as of this writing, 11/5/21).&lt;/p&gt;
&lt;p&gt;Moreover, when we query the next two blocks, we can see that each block contains the hash of the previous block (i.e., parent hash), illustrating how the blockchain is formed.&lt;/p&gt;
&lt;p&gt;Each block contains a reference to it parent block. This is shown below between the &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;parent_hash&lt;/code&gt; columns (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/blocks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./parent_hash.png&#34; alt=&#34;parent_hash&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here is the 
&lt;a href=&#34;https://duneanalytics.com/queries/44856/88292&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;query&lt;/a&gt; on Dune Analytics:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
   time,
   number,
   difficulty,
   hash,
   parent_hash,
   nonce
FROM ethereum.&amp;quot;blocks&amp;quot;
WHERE &amp;quot;number&amp;quot; = 12396854 OR &amp;quot;number&amp;quot; = 12396855 OR &amp;quot;number&amp;quot; = 12396856
LIMIT 10

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can  examine a block by querying time, block number, difficulty, hash, parent hash, and nonce.&lt;/p&gt;
&lt;p&gt;The only thing this query does not cover is &lt;em&gt;list of transaction&lt;/em&gt; which requires a separate query below and &lt;em&gt;state root&lt;/em&gt;. A full or archival node will store all transactions and state transitions, allowing for clients to query the state of the chain at any time. Because this requires large storage space, we can separate chain data from state data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chain data (list of blocks, transactions)&lt;/li&gt;
&lt;li&gt;State data (result of each transactionâs state transition)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;State root falls in the latter and is &lt;em&gt;implicit&lt;/em&gt; data (not stored on-chain), while chain data is explicit and stored on the chain itself (
&lt;a href=&#34;https://ethereum.stackexchange.com/questions/359/where-is-the-state-data-stored&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For this tutorial, we&amp;rsquo;ll be focusing on on-chain data that &lt;em&gt;can&lt;/em&gt; be queried with SQL via Dune Analytics.&lt;/p&gt;
&lt;p&gt;As stated above, each block contains a list of transactions, we can query this by filtering for a specific block. We&amp;rsquo;ll try the most recent block, 12396854:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM ethereum.&amp;quot;transactions&amp;quot;
WHERE block_number = 12396854 
ORDER BY block_time DESC`

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s the SQL output on Dune:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./list_of_txn.png&#34; alt=&#34;list_of_txn&#34;&gt;&lt;/p&gt;
&lt;p&gt;This single block being added to the chain changes the state of the Ethereum virtual machine (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/evm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EVM&lt;/a&gt;). Dozens sometimes, hundreds of transactions are verified at once. In this specific case, 222 transactions were included.&lt;/p&gt;
&lt;p&gt;To see how many were actually successful, we would add another filter to count successful transactions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WITH temp_table AS (
    SELECT * FROM ethereum.&amp;quot;transactions&amp;quot;
    WHERE block_number = 12396854 AND success = true
    ORDER BY block_time DESC
)
SELECT
    COUNT(success) AS num_successful_txn
FROM temp_table

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For block 12396854, out of 222 total transactions, 204 were successfully verified:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./successful_txn.png&#34; alt=&#34;successful_txn&#34;&gt;&lt;/p&gt;
&lt;p&gt;Transactions requests occur dozens of times per second, but blocks are committed approximately once every 15 seconds (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/blocks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To see that there is one block produced approximately every 15 seconds, we could take the number of seconds in a day (86400) divided by 15 to get an &lt;em&gt;estimate&lt;/em&gt; average number of blocks per day (~ 5760).&lt;/p&gt;
&lt;p&gt;The chart for Ethereum blocks produced per day (2016 - present) is:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./daily_blocks.png&#34; alt=&#34;daily_blocks&#34;&gt;&lt;/p&gt;
&lt;p&gt;The average number of blocks produced daily over this time period is ~5,874:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./avg_daily_blocks.png&#34; alt=&#34;avg_daily_blocks&#34;&gt;&lt;/p&gt;
&lt;p&gt;The queries are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# query to visualize number of blocks produced daily since 2016

SELECT 
    DATE_TRUNC(&#39;day&#39;, time) AS dt,
    COUNT(*) AS block_count
FROM ethereum.&amp;quot;blocks&amp;quot;
GROUP BY dt
OFFSET 1

# average number of blocks produced per day

WITH temp_table AS (
SELECT 
    DATE_TRUNC(&#39;day&#39;, time) AS dt,
    COUNT(*) AS block_count
FROM ethereum.&amp;quot;blocks&amp;quot;
GROUP BY dt
OFFSET 1
)
SELECT 
    AVG(block_count) AS avg_block_count
FROM temp_table
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The average number of blocks produced per day since 2016 is slightly above that number at 5,874. Alternatively, dividing 86400 seconds by 5874 average blocks comes out to 14.7 seconds or approximately one block every 15 seconds.&lt;/p&gt;
&lt;h3 id=&#34;gas&#34;&gt;Gas&lt;/h3&gt;
&lt;p&gt;Blocks are bounded in size. Each block has a gas limit which is collectively set by miners and the network to prevent arbitrarily large block size to be less of a strain on full node in terms of disk space and speed requirements (
&lt;a href=&#34;https://ethereum.org/en/developers/docs/blocks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;One way to conceptualize block gas limit is to think of it as the &lt;strong&gt;supply&lt;/strong&gt; of available block space in which to batch transactions. The block gas limit can be queried and visualized from 2016 to present day:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./avg_gas_limit.png&#34; alt=&#34;avg_gas_limit&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT 
    DATE_TRUNC(&#39;day&#39;, time) AS dt,
    AVG(gas_limit) AS avg_block_gas_limit
FROM ethereum.&amp;quot;blocks&amp;quot;
GROUP BY dt
OFFSET 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then there is the actual gas used daily to pay for computing done on the Ethereum chain (i.e., sending transaction, calling a smart contract, minting an NFT). This is the &lt;strong&gt;demand&lt;/strong&gt; for available Ethereum block space:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./daily_gas_used.png&#34; alt=&#34;daily_gas_used&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT 
    DATE_TRUNC(&#39;day&#39;, time) AS dt,
    AVG(gas_used) AS avg_block_gas_used
FROM ethereum.&amp;quot;blocks&amp;quot;
GROUP BY dt
OFFSET 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also juxtapose these two charts together to see how &lt;strong&gt;demand and supply&lt;/strong&gt; line up:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./gas_demand_supply.png&#34; alt=&#34;gas_demand_supply&#34;&gt;&lt;/p&gt;
&lt;p&gt;Therefore we can understand gas prices as a function of demand for Ethereum block space, given available supply.&lt;/p&gt;
&lt;p&gt;Finally, we may want to query average daily gas prices for the Ethereum chain, however, doing so result in an especially long query time, so weâll filter our query to the average amount of gas paid per transaction by the Ethereum Foundation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./ef_daily_gas.png&#34; alt=&#34;ef_daily_gas&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can see gas prices paid in transaction to the Ethereum Foundation address over the years. Here is the query:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT 
    block_time,
    gas_price / 1e9 AS gas_price_gwei,
    value / 1e18 AS eth_sent
FROM ethereum.&amp;quot;transactions&amp;quot;
WHERE &amp;quot;to&amp;quot; = &#39;\xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe&#39;   
ORDER BY block_time DESC
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;With this tutorial, we understand foundational Ethereum concepts and how the Ethereum blockchain works by querying and getting a feel for on-chain data.&lt;/p&gt;
&lt;p&gt;The dashboard that holds all code used in this tutorial can be found 
&lt;a href=&#34;https://duneanalytics.com/paulapivat/Learn-Ethereum&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more use of data to explore web3 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pad Thai is a Terrible Choice</title>
      <link>/post/thai_dishes_project/</link>
      <pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate>
      <guid>/post/thai_dishes_project/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#exploratory_questions&#34;&gt;Exploratory Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#web_scraping&#34;&gt;Web Scraping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#data_cleaning&#34;&gt;Data Cleaning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#data_visualization&#34;&gt;Data Visualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#text_mining&#34;&gt;Text Mining&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;Let&amp;rsquo;s order Thai.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Great, what&amp;rsquo;s your go-to dish?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Pad Thai.â&lt;/p&gt;
&lt;p&gt;This has bugged me for years and is the genesis for this project.&lt;/p&gt;
&lt;p&gt;People need to know they have other choices aside from Pad Thai. Pad Thai is one of 53 individual dishes and stopping there risks missing out on at least 201 shared Thai dishes (source: 
&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_Thai_dishes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wikipedia&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This project is an opportunity to build a data set of Thai dishes by scraping tables off Wikipedia. We will use Python for web scraping and R for visualization. Web scraping is done in &lt;code&gt;Beautiful Soup&lt;/code&gt; (Python) and pre-processed further with &lt;code&gt;dplyr&lt;/code&gt; and visualized with &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Furthermore, we&amp;rsquo;ll use the &lt;code&gt;tidytext&lt;/code&gt; package in R to explore the names of Thai dishes (in English) to see if we can learn some interest things from text data.&lt;/p&gt;
&lt;p&gt;Finally, there is an opportunity to make an open source 
&lt;a href=&#34;https://github.com/holtzy/R-graph-gallery/pull/34&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;contribution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The project repo is 
&lt;a href=&#34;https://github.com/PaulApivat/thai_dishes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;exploratory_questions&#34;&gt;Exploratory_Questions&lt;/h3&gt;
&lt;p&gt;The purpose of this analysis is to generate questions.&lt;/p&gt;
&lt;p&gt;Because &lt;strong&gt;exploratory analysis&lt;/strong&gt; is iterative, these questions were generated in the process of manipulating and visualizing data. We can use these questions to structure the rest of the post:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How might we organized Thai dishes?&lt;/li&gt;
&lt;li&gt;What is the best way to organized the different dishes?&lt;/li&gt;
&lt;li&gt;Which raw material(s) are most popular?&lt;/li&gt;
&lt;li&gt;Which raw materials are most important?&lt;/li&gt;
&lt;li&gt;Could you learn about Thai food just from the names of the dishes?&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;web_scraping&#34;&gt;Web_Scraping&lt;/h3&gt;
&lt;p&gt;We scraped over 
&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_Thai_dishes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;300 Thai dishes&lt;/a&gt;. For each dish, we got:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thai name&lt;/li&gt;
&lt;li&gt;Thai script&lt;/li&gt;
&lt;li&gt;English name&lt;/li&gt;
&lt;li&gt;Region&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, we&amp;rsquo;ll use the following Python libraries/modules:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests
from bs4 import BeautifulSoup
import urllib.request
import urllib.parse
import urllib.error
import ssl
import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ll use &lt;code&gt;requests&lt;/code&gt; to send an HTTP requests to the wikipedia url we need. We&amp;rsquo;ll access network sockets using &amp;lsquo;secure sockets layer&amp;rsquo; (SSL). Then we&amp;rsquo;ll read in the html data to parse it with &lt;strong&gt;Beautiful Soup&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Before using &lt;strong&gt;Beautiful Soup&lt;/strong&gt;, we want to understand the structure of the page (and tables) we want to scrape under &lt;strong&gt;inspect element&lt;/strong&gt; on the browser (note: I used Chrome). We can see that we want the &lt;code&gt;table&lt;/code&gt; tag, along with &lt;code&gt;class&lt;/code&gt; of wikitable sortable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./web_scrap.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The main function we&amp;rsquo;ll use from &lt;strong&gt;Beautiful Soup&lt;/strong&gt; is &lt;code&gt;findAll()&lt;/code&gt; and the three parameters are &lt;code&gt;th&lt;/code&gt; (Header Cell in HTML table), &lt;code&gt;tr&lt;/code&gt; (Row in HTML table) and &lt;code&gt;td&lt;/code&gt; (Standard Data Cell).&lt;/p&gt;
&lt;p&gt;First, we&amp;rsquo;ll save the table headers in a list, which we&amp;rsquo;ll use when creating an empty &lt;code&gt;dictionary&lt;/code&gt; to store the data we need.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;header = [item.text.rstrip() for item in all_tables[0].findAll(&#39;th&#39;)]

table = dict([(x, 0) for x in header])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Initially, we want to scrape one table, knowing that we&amp;rsquo;ll need to repeat the process for all 16 tables. Therefore we&amp;rsquo;ll use a &lt;em&gt;nested loop&lt;/em&gt;. Because all tables have 6 columns, we&amp;rsquo;ll want to create 6 empty lists.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll scrape through all table rows &lt;code&gt;tr&lt;/code&gt; and check for 6 cells (which we should have for 6 columns), then we&amp;rsquo;ll &lt;em&gt;append&lt;/em&gt; the data to each empty list we created.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# loop through all 16 tables
a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

# 6 empty list (for 6 columns) to store data
a1 = []
a2 = []
a3 = []
a4 = []
a5 = []
a6 = []

# nested loop for looping through all 16 tables, then all tables individually
for i in a:
    for row in all_tables[i].findAll(&#39;tr&#39;):
        cells = row.findAll(&#39;td&#39;)
        if len(cells) == 6:
            a1.append([string for string in cells[0].strings])
            a2.append(cells[1].find(text=True))
            a3.append(cells[2].find(text=True))
            a4.append(cells[3].find(text=True))
            a5.append(cells[4].find(text=True))
            a6.append([string for string in cells[5].strings])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;rsquo;ll note the code for &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a6&lt;/code&gt; are slightly different. In retrospect, I found that &lt;code&gt;cells[0].find(text=True)&lt;/code&gt; did &lt;strong&gt;not&lt;/strong&gt; yield certain texts, particularly if they were links, therefore a slight adjustment is made.&lt;/p&gt;
&lt;p&gt;The strings tag returns a &lt;code&gt;NavigableString&lt;/code&gt; type object while text returns a &lt;code&gt;unicode&lt;/code&gt; object (see 
&lt;a href=&#34;https://stackoverflow.com/questions/25327693/difference-between-string-and-text-beautifulsoup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stack overflow&lt;/a&gt; explanation).&lt;/p&gt;
&lt;p&gt;After we&amp;rsquo;ve scrapped the data, we&amp;rsquo;ll need to store the data in a &lt;code&gt;dictionary&lt;/code&gt; before converting to &lt;code&gt;data frame&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# create dictionary
table = dict([(x, 0) for x in header])

# append dictionary with corresponding data list
table[&#39;Thai name&#39;] = a1
table[&#39;Thai script&#39;] = a2
table[&#39;English name&#39;] = a3
table[&#39;Image&#39;] = a4
table[&#39;Region&#39;] = a5
table[&#39;Description&#39;] = a6

# turn dict into dataframe
df_table = pd.DataFrame(table)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a6&lt;/code&gt;, we need to do an extra step of joining the strings together, so I&amp;rsquo;ve created two additional corresponding columns, &lt;code&gt;Thai name 2&lt;/code&gt; and &lt;code&gt;Description2&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Need to Flatten Two Columns: &#39;Thai name&#39; and &#39;Description&#39;
# Create two new columns
df_table[&#39;Thai name 2&#39;] = &amp;quot;&amp;quot;
df_table[&#39;Description2&#39;] = &amp;quot;&amp;quot;

# join all words in the list for each of 328 rows and set to thai_dishes[&#39;Description2&#39;] column
# automatically flatten the list
df_table[&#39;Description2&#39;] = [
    &#39; &#39;.join(cell) for cell in df_table[&#39;Description&#39;]]

df_table[&#39;Thai name 2&#39;] = [
    &#39; &#39;.join(cell) for cell in df_table[&#39;Thai name&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After we&amp;rsquo;ve scrapped all the data and converted from &lt;code&gt;dictionary&lt;/code&gt; to &lt;code&gt;data frame&lt;/code&gt;, we&amp;rsquo;ll write to CSV to prepare for data cleaning in R (&lt;strong&gt;note&lt;/strong&gt;: I saved the csv as thai_dishes.csv, but you can choose a different name).&lt;/p&gt;
&lt;h3 id=&#34;data_cleaning&#34;&gt;Data_Cleaning&lt;/h3&gt;
&lt;p&gt;Data cleaning is typically non-linear.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll manipulate the data to explore, learn &lt;em&gt;about&lt;/em&gt; the data and see that certain things need cleaning or, in some cases, going back to Python to re-scrape. The columns &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a6&lt;/code&gt; were scraped differently from other columns due to &lt;strong&gt;missing data&lt;/strong&gt; found during exploration and cleaning.&lt;/p&gt;
&lt;p&gt;For certain links, using &lt;code&gt;.find(text=True)&lt;/code&gt; did not work as intended, so a slight adjustment was made.&lt;/p&gt;
&lt;p&gt;For this post, &lt;code&gt;R&lt;/code&gt; is the tool of choice for cleaning the data.&lt;/p&gt;
&lt;p&gt;Here are other data cleaning tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Changing column names (snake case)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# read data
df &amp;lt;- read_csv(&amp;quot;thai_dishes.csv&amp;quot;)

# change column name
df &amp;lt;- df %&amp;gt;%
    rename(
        Thai_name = `Thai name`,
        Thai_name_2 = `Thai name 2`,
        Thai_script = `Thai script`,
        English_name = `English name`
    )

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Remove newline escape sequence (\n)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# remove  \n from all columns ----
df$Thai_name &amp;lt;- gsub(&amp;quot;[\n]&amp;quot;, &amp;quot;&amp;quot;, df$Thai_name)
df$Thai_name_2 &amp;lt;- gsub(&amp;quot;[\n]&amp;quot;, &amp;quot;&amp;quot;, df$Thai_name_2)
df$Thai_script &amp;lt;- gsub(&amp;quot;[\n]&amp;quot;, &amp;quot;&amp;quot;, df$Thai_script)
df$English_name &amp;lt;- gsub(&amp;quot;[\n]&amp;quot;, &amp;quot;&amp;quot;, df$English_name)
df$Image &amp;lt;- gsub(&amp;quot;[\n]&amp;quot;, &amp;quot;&amp;quot;, df$Image)
df$Region &amp;lt;- gsub(&amp;quot;[\n]&amp;quot;, &amp;quot;&amp;quot;, df$Region)
df$Description &amp;lt;- gsub(&amp;quot;[\n]&amp;quot;, &amp;quot;&amp;quot;, df$Description)
df$Description2 &amp;lt;- gsub(&amp;quot;[\n]&amp;quot;, &amp;quot;&amp;quot;, df$Description2)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Add/Mutate new columns (major_groupings, minor_groupings):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Add Major AND Minor Groupings ----
df &amp;lt;- df %&amp;gt;%
    mutate(
        major_grouping = as.character(NA),
        minor_grouping = as.character(NA)
        )
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Edit rows for missing data in Thai_name column: 26, 110, 157, 234-238, 240, 241, 246&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This was only necessary the first time round, after the changes are made to how I scraped &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a6&lt;/code&gt;, this step is &lt;strong&gt;no longer necessary&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# If necessary; may not need to do this after scraping a1 and a6 - see above
# Edit Rows for missing Thai_name
df[26,]$Thai_name &amp;lt;- &amp;quot;Khanom chin nam ngiao&amp;quot;
df[110,]$Thai_name &amp;lt;- &amp;quot;Lap Lanna&amp;quot;
df[157,]$Thai_name &amp;lt;- &amp;quot;Kai phat khing&amp;quot;
df[234,]$Thai_name &amp;lt;- &amp;quot;Nam chim chaeo&amp;quot;
df[235,]$Thai_name &amp;lt;- &amp;quot;Nam chim kai&amp;quot;
df[236,]$Thai_name &amp;lt;- &amp;quot;Nam chim paesa&amp;quot;
df[237,]$Thai_name &amp;lt;- &amp;quot;Nam chim sate&amp;quot;
df[238,]$Thai_name &amp;lt;- &amp;quot;Nam phrik i-ke&amp;quot;
df[240,]$Thai_name &amp;lt;- &amp;quot;Nam phrik kha&amp;quot;
df[241,]$Thai_name &amp;lt;- &amp;quot;Nam phrik khaep mu&amp;quot;
df[246,]$Thai_name &amp;lt;- &amp;quot;Nam phrik pla chi&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;save to &amp;ldquo;edit_thai_dishes.csv&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Write new csv to save edits made to data frame
write_csv(df, &amp;quot;edit_thai_dishes.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;data_visualization&#34;&gt;Data_Visualization&lt;/h3&gt;
&lt;p&gt;There are several ways to visualize the data. Because we want to communicate the diversity of Thai dishes, &lt;em&gt;aside&lt;/em&gt; from Pad Thai, we want a visualization that captures the many, many options.&lt;/p&gt;
&lt;p&gt;I opted for a &lt;strong&gt;dendrogram&lt;/strong&gt;. This graph assumes hierarchy within the data, which fits our project because we can organize the dishes in grouping and sub-grouping.&lt;/p&gt;
&lt;h4 id=&#34;how-might-we-organized-thai-dishes&#34;&gt;How might we organized Thai dishes?&lt;/h4&gt;
&lt;p&gt;We first make a distinction between &lt;strong&gt;individual&lt;/strong&gt; and &lt;strong&gt;shared&lt;/strong&gt; dishes to show that Pad Thai is not even close to being the best &lt;em&gt;individual&lt;/em&gt; dish. And, in fact, more dishes fall under the &lt;strong&gt;shared&lt;/strong&gt; grouping.&lt;/p&gt;
&lt;p&gt;To avoid cramming too much data into one visual, we&amp;rsquo;ll create two separate visualizations for individual vs. shared dishes.&lt;/p&gt;
&lt;p&gt;Here is the first &lt;strong&gt;dendrogram&lt;/strong&gt; representing 52 individual dish alternatives to Pad Thai.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./indiv_thai_dishes.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Creating a dendrogram requires using the &lt;code&gt;ggraph&lt;/code&gt; and &lt;code&gt;igraph&lt;/code&gt; libraries. First, we&amp;rsquo;ll load the libraries and sub-set our data frame by filtering for Individual Dishes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df &amp;lt;- read_csv(&amp;quot;edit_thai_dishes.csv&amp;quot;)

library(ggraph)
library(igraph)

df %&amp;gt;%
    select(major_grouping, minor_grouping, Thai_name, Thai_script) %&amp;gt;%
    filter(major_grouping == &#39;Individual dishes&#39;) %&amp;gt;%
    group_by(minor_grouping) %&amp;gt;%
    count() 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We create edges and nodes (i.e., from and to) to create the sub-groupings within Individual Dishes (i.e., Rice, Noodles and Misc):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Individual Dishes ----

# data: edge list
d1 &amp;lt;- data.frame(from=&amp;quot;Individual dishes&amp;quot;, to=c(&amp;quot;Misc Indiv&amp;quot;, &amp;quot;Noodle dishes&amp;quot;, &amp;quot;Rice dishes&amp;quot;))

d2 &amp;lt;- df %&amp;gt;%
    select(minor_grouping, Thai_name) %&amp;gt;%
    slice(1:53) %&amp;gt;%
    rename(
        from = minor_grouping,
        to = Thai_name
    ) 

edges &amp;lt;- rbind(d1, d2)

# plot dendrogram (idividual dishes)
indiv_dishes_graph &amp;lt;- graph_from_data_frame(edges)

ggraph(indiv_dishes_graph, layout = &amp;quot;dendrogram&amp;quot;, circular = FALSE) +
    geom_edge_diagonal(aes(edge_colour = edges$from), label_dodge = NULL) +
    geom_node_text(aes(label = name, filter = leaf, color = &#39;red&#39;), hjust = 1.1, size = 3) +
    geom_node_point(color = &amp;quot;whitesmoke&amp;quot;) +
    theme(
        plot.background = element_rect(fill = &#39;#343d46&#39;),
        panel.background = element_rect(fill = &#39;#343d46&#39;),
        legend.position = &#39;none&#39;,
        plot.title = element_text(colour = &#39;whitesmoke&#39;, face = &#39;bold&#39;, size = 25),
        plot.subtitle = element_text(colour = &#39;whitesmoke&#39;, face = &#39;bold&#39;),
        plot.caption = element_text(color = &#39;whitesmoke&#39;, face = &#39;italic&#39;)
    ) +
    labs(
        title = &#39;52 Alternatives to Pad Thai&#39;,
        subtitle = &#39;Individual Thai Dishes&#39;,
        caption = &#39;Data: Wikipedia | Graphic: @paulapivat&#39;
    ) +
    expand_limits(x = c(-1.5, 1.5), y = c(-0.8, 0.8)) +
    coord_flip() +
    annotate(&amp;quot;text&amp;quot;, x = 47, y = 1, label = &amp;quot;Miscellaneous (7)&amp;quot;, color = &amp;quot;#7CAE00&amp;quot;)+
    annotate(&amp;quot;text&amp;quot;, x = 31, y = 1, label = &amp;quot;Noodle Dishes (24)&amp;quot;, color = &amp;quot;#00C08B&amp;quot;) +
    annotate(&amp;quot;text&amp;quot;, x = 8, y = 1, label = &amp;quot;Rice Dishes (22)&amp;quot;, color = &amp;quot;#C77CFF&amp;quot;) +
    annotate(&amp;quot;text&amp;quot;, x = 26, y = 2, label = &amp;quot;Individual\nDishes&amp;quot;, color = &amp;quot;#F8766D&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;what-is-the-best-way-to-organized-the-different-dishes&#34;&gt;What is the best way to organized the different dishes?&lt;/h4&gt;
&lt;p&gt;There are approximately &lt;strong&gt;4X&lt;/strong&gt; as many &lt;em&gt;shared&lt;/em&gt; dishes as individual dishes, so the dendrogram should be &lt;strong&gt;circular&lt;/strong&gt; to fit the names of all dishes in one graphic.&lt;/p&gt;
&lt;p&gt;A wonderful resource I use regularly for these types of visuals is the 
&lt;a href=&#34;https://www.r-graph-gallery.com/339-circular-dendrogram-with-ggraph.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Graph Gallery&lt;/a&gt;. There was a slight issue in how the &lt;strong&gt;text angles&lt;/strong&gt; were calculated so I submitted a 
&lt;a href=&#34;https://github.com/holtzy/R-graph-gallery/pull/34&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PR to fix&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Perhaps distinguishing between individual and shared dishes is too crude, within the dendrogram for 201 shared Thai dishes, we can see further sub-groupings including Curries, Sauces/Pastes, Steamed, Grilled, Deep-Fried, Fried &amp;amp; Stir-Fried, Salads, Soups and other Misc:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./shared_dishes_final.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Shared Dishes ----
df %&amp;gt;%
    select(major_grouping, minor_grouping, Thai_name, Thai_script) %&amp;gt;%
    filter(major_grouping == &#39;Shared dishes&#39;) %&amp;gt;%
    group_by(minor_grouping) %&amp;gt;%
    count() %&amp;gt;%
    arrange(desc(n))

d3 &amp;lt;- data.frame(from=&amp;quot;Shared dishes&amp;quot;, to=c(&amp;quot;Curries&amp;quot;, &amp;quot;Soups&amp;quot;, &amp;quot;Salads&amp;quot;,
                                            &amp;quot;Fried and stir-fried dishes&amp;quot;, &amp;quot;Deep-fried dishes&amp;quot;, &amp;quot;Grilled dishes&amp;quot;,
                                            &amp;quot;Steamed or blanched dishes&amp;quot;, &amp;quot;Stewed dishes&amp;quot;, &amp;quot;Dipping sauces and pastes&amp;quot;, &amp;quot;Misc Shared&amp;quot;))


d4 &amp;lt;- df %&amp;gt;%
    select(minor_grouping, Thai_name) %&amp;gt;%
    slice(54:254) %&amp;gt;%
    rename(
        from = minor_grouping,
        to = Thai_name
    )

edges2 &amp;lt;- rbind(d3, d4)

# create a vertices data.frame. One line per object of hierarchy
vertices = data.frame(
    name = unique(c(as.character(edges2$from), as.character(edges2$to)))
)

# add column with group of each name. Useful to later color points
vertices$group = edges2$from[ match(vertices$name, edges2$to)]

# Add information concerning the label we are going to add: angle, horizontal adjustment and potential flip
# calculate the ANGLE of the labels
vertices$id=NA
myleaves=which(is.na(match(vertices$name, edges2$from)))
nleaves=length(myleaves)
vertices$id[myleaves] = seq(1:nleaves)
vertices$angle = 360 / nleaves * vertices$id + 90    


# calculate the alignment of labels: right or left
vertices$hjust&amp;lt;-ifelse( vertices$angle &amp;lt; 275, 1, 0)



# flip angle BY to make them readable
vertices$angle&amp;lt;-ifelse(vertices$angle &amp;lt; 275, vertices$angle+180, vertices$angle)

# plot dendrogram (shared dishes)
shared_dishes_graph &amp;lt;- graph_from_data_frame(edges2)

ggraph(shared_dishes_graph, layout = &amp;quot;dendrogram&amp;quot;, circular = TRUE) +
    geom_edge_diagonal(aes(edge_colour = edges2$from), label_dodge = NULL) +
    geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = vertices$angle, hjust= vertices$hjust, colour= vertices$group), size=2.7, alpha=1) +
    geom_node_point(color = &amp;quot;whitesmoke&amp;quot;) +
    theme(
        plot.background = element_rect(fill = &#39;#343d46&#39;),
        panel.background = element_rect(fill = &#39;#343d46&#39;),
        legend.position = &#39;none&#39;,
        plot.title = element_text(colour = &#39;whitesmoke&#39;, face = &#39;bold&#39;, size = 25),
        plot.subtitle = element_text(colour = &#39;whitesmoke&#39;, margin = margin(0,0,30,0), size = 20),
        plot.caption = element_text(color = &#39;whitesmoke&#39;, face = &#39;italic&#39;)
    ) +
    labs(
        title = &#39;Thai Food is Best Shared&#39;,
        subtitle = &#39;201 Ways to Make Friends&#39;,
        caption = &#39;Data: Wikipedia | Graphic: @paulapivat&#39;
    ) +
    #expand_limits(x = c(-1.5, 1.5), y = c(-0.8, 0.8)) +
    expand_limits(x = c(-1.5, 1.5), y = c(-1.5, 1.5)) +
    coord_flip() +
    annotate(&amp;quot;text&amp;quot;, x = 0.4, y = 0.45, label = &amp;quot;Steamed&amp;quot;, color = &amp;quot;#F564E3&amp;quot;) +
    annotate(&amp;quot;text&amp;quot;, x = 0.2, y = 0.5, label = &amp;quot;Grilled&amp;quot;, color = &amp;quot;#00BA38&amp;quot;) +
    annotate(&amp;quot;text&amp;quot;, x = -0.2, y = 0.5, label = &amp;quot;Deep-Fried&amp;quot;, color = &amp;quot;#DE8C00&amp;quot;) +
    annotate(&amp;quot;text&amp;quot;, x = -0.4, y = 0.1, label = &amp;quot;Fried &amp;amp;\n Stir-Fried&amp;quot;, color = &amp;quot;#7CAE00&amp;quot;) +
    annotate(&amp;quot;text&amp;quot;, x = -0.3, y = -0.4, label = &amp;quot;Salads&amp;quot;, color = &amp;quot;#00B4F0&amp;quot;) +
    annotate(&amp;quot;text&amp;quot;, x = -0.05, y = -0.5, label = &amp;quot;Soups&amp;quot;, color = &amp;quot;#C77CFF&amp;quot;) +
    annotate(&amp;quot;text&amp;quot;, x = 0.3, y = -0.5, label = &amp;quot;Curries&amp;quot;, color = &amp;quot;#F8766D&amp;quot;) +
    annotate(&amp;quot;text&amp;quot;, x = 0.5, y = -0.1, label = &amp;quot;Misc&amp;quot;, color = &amp;quot;#00BFC4&amp;quot;) +
    annotate(&amp;quot;text&amp;quot;, x = 0.5, y = 0.1, label = &amp;quot;Sauces\nPastes&amp;quot;, color = &amp;quot;#B79F00&amp;quot;)
    
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;text_mining&#34;&gt;Text_Mining&lt;/h3&gt;
&lt;h4 id=&#34;which-raw-materials-are-most-popular&#34;&gt;Which raw material(s) are most popular?&lt;/h4&gt;
&lt;p&gt;One way to answer this question is to use text mining to &lt;strong&gt;tokenize&lt;/strong&gt; by either word and count the words by frequency as one measure of popularity.&lt;/p&gt;
&lt;p&gt;In the below bar chart, we see frequency of words across all Thai Dishes. &lt;strong&gt;Mu&lt;/strong&gt; (à¸«à¸¡à¸¹) which means pork in Thai appears most frequently across all dish types and sub-grouping. Next we have &lt;strong&gt;kaeng&lt;/strong&gt; (à¹à¸à¸) which means curry. &lt;strong&gt;Phat&lt;/strong&gt; (à¸à¸±à¸) comings in third suggesting &amp;ldquo;stir-fry&amp;rdquo; is a popular cooking mode.&lt;/p&gt;
&lt;p&gt;As we can see &lt;strong&gt;not&lt;/strong&gt; all words refer to raw materials, so we may not be able to answer this question directly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./word_freq_barchart.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;library(tidytext)
library(scales)

# new csv file after data cleaning (see above)
df &amp;lt;- read_csv(&amp;quot;../web_scraping/edit_thai_dishes.csv&amp;quot;)

df %&amp;gt;%
    select(Thai_name, Thai_script) %&amp;gt;%
    # can substitute &#39;word&#39; for ngrams, sentences, lines
    unnest_tokens(ngrams, Thai_name) %&amp;gt;%  
    # to reference thai spelling: group_by(Thai_script)
    group_by(ngrams) %&amp;gt;%  
    tally(sort = TRUE) %&amp;gt;%  # alt: count(sort = TRUE)
    filter(n &amp;gt; 9) %&amp;gt;%
# visualize
# pipe directly into ggplot2, because using tidytools
    ggplot(aes(x = n, y = reorder(ngrams, n))) + 
    geom_col(aes(fill = ngrams)) +
    scale_fill_manual(values = c(
        &amp;quot;#c3d66b&amp;quot;,
        &amp;quot;#70290a&amp;quot;,
        &amp;quot;#2f1c0b&amp;quot;,
        &amp;quot;#ba9d8f&amp;quot;,
        &amp;quot;#dda37b&amp;quot;,
        &amp;quot;#8f5e23&amp;quot;,
        &amp;quot;#96b224&amp;quot;,
        &amp;quot;#dbcac9&amp;quot;,
        &amp;quot;#626817&amp;quot;,
        &amp;quot;#a67e5f&amp;quot;,
        &amp;quot;#be7825&amp;quot;,
        &amp;quot;#446206&amp;quot;,
        &amp;quot;#c8910b&amp;quot;,
        &amp;quot;#88821b&amp;quot;,
        &amp;quot;#313d5f&amp;quot;,
        &amp;quot;#73869a&amp;quot;,
        &amp;quot;#6f370f&amp;quot;,
        &amp;quot;#c0580d&amp;quot;,
        &amp;quot;#e0d639&amp;quot;,
        &amp;quot;#c9d0ce&amp;quot;,
        &amp;quot;#ebf1f0&amp;quot;,
        &amp;quot;#50607b&amp;quot;
    )) +
    theme_minimal() +
    theme(legend.position = &amp;quot;none&amp;quot;) +
    labs(
        x = &amp;quot;Frequency&amp;quot;,
        y = &amp;quot;Words&amp;quot;,
        title = &amp;quot;Frequency of Words in Thai Cuisine&amp;quot;,
        subtitle = &amp;quot;Words appearing at least 10 times in Individual or Shared Dishes&amp;quot;,
        caption = &amp;quot;Data: Wikipedia | Graphic: @paulapivat&amp;quot;
    )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also see words common to both Individual and Shared Dishes. We see other words like &lt;strong&gt;nuea&lt;/strong&gt; (beef), &lt;strong&gt;phrik&lt;/strong&gt; (chili) and &lt;strong&gt;kaphrao&lt;/strong&gt; (basil leaves).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./word_freq_indiv_shared_dishes.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# frequency for Thai_dishes (Major Grouping) ----

# comparing Individual and Shared Dishes (Major Grouping)
thai_name_freq &amp;lt;- df %&amp;gt;%
    select(Thai_name, Thai_script, major_grouping) %&amp;gt;%
    unnest_tokens(ngrams, Thai_name) %&amp;gt;% 
    count(ngrams, major_grouping) %&amp;gt;%
    group_by(major_grouping) %&amp;gt;%
    mutate(proportion = n / sum(n)) %&amp;gt;%
    select(major_grouping, ngrams, proportion) %&amp;gt;%
    spread(major_grouping, proportion) %&amp;gt;%
    gather(major_grouping, proportion, c(`Shared dishes`)) %&amp;gt;%
    select(ngrams, `Individual dishes`, major_grouping, proportion)


# Expect warming message about missing values
ggplot(thai_name_freq, aes(x = proportion, y = `Individual dishes`,
       color = abs(`Individual dishes` - proportion))) +
    geom_abline(color = &#39;gray40&#39;, lty = 2) +
    geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
    geom_text(aes(label = ngrams), check_overlap = TRUE, vjust = 1.5) +
    scale_x_log10(labels = percent_format()) +
    scale_y_log10(labels = percent_format()) +
    scale_color_gradient(limits = c(0, 0.01), 
                         low = &amp;quot;red&amp;quot;, high = &amp;quot;blue&amp;quot;) +    # low = &amp;quot;darkslategray4&amp;quot;, high = &amp;quot;gray75&amp;quot;
    theme_minimal() +
    theme(legend.position = &amp;quot;none&amp;quot;,
          legend.text = element_text(angle = 45, hjust = 1)) +
    labs(y = &amp;quot;Individual Dishes&amp;quot;,
         x = &amp;quot;Shared Dishes&amp;quot;,
         color = NULL,
         title = &amp;quot;Comparing Word Frequencies in the names Thai Dishes&amp;quot;,
         subtitle = &amp;quot;Individual and Shared Dishes&amp;quot;,
         caption = &amp;quot;Data: Wikipedia | Graphics: @paulapivat&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;which-raw-materials-are-most-important&#34;&gt;Which raw materials are most important?&lt;/h4&gt;
&lt;p&gt;We can only learn so much from frequency, so text mining practitioners have created &lt;strong&gt;term frequency - inverse document frequency&lt;/strong&gt; to better reflect how important a word is in a document or corpus (further details 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Tf%E2%80%93idf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Again, the words don&amp;rsquo;t necessarily refer to raw materials, so this question can&amp;rsquo;t be fully answered directly here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./td_idf_thai_dishes.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;could-you-learn-about-thai-food-just-from-the-names-of-the-dishes&#34;&gt;Could you learn about Thai food just from the names of the dishes?&lt;/h4&gt;
&lt;p&gt;The short answer is &amp;ldquo;yes&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;We learned just from frequency and &amp;ldquo;term frequency - inverse document frequency&amp;rdquo; not only the most frequent words, but the relative importance within the current set of words that we have tokenized with &lt;code&gt;tidytext&lt;/code&gt;. This informs us of not only popular raw materials (Pork), but also dish types (Curries) and other popular mode of preparation (Stir-Fry).&lt;/p&gt;
&lt;p&gt;We can even examine the &lt;strong&gt;network of relationships&lt;/strong&gt; between words. Darker arrows suggest a stronger relationship between pairs of words, for example &amp;ldquo;nam phrik&amp;rdquo; is a strong pairing. This means &amp;ldquo;chili sauce&amp;rdquo; in Thai and suggests the important role that it plays across many types of dishes.&lt;/p&gt;
&lt;p&gt;We learned above that &amp;ldquo;mu&amp;rdquo; (pork) appears frequently. Now we see that &amp;ldquo;mu&amp;rdquo; and &amp;ldquo;krop&amp;rdquo; are more related than other pairings (note: &amp;ldquo;mu krop&amp;rdquo; means &amp;ldquo;crispy pork&amp;rdquo;). We also saw above that &amp;ldquo;khao&amp;rdquo; appears frequently in Rice dishes. This alone is not surprising as &amp;ldquo;khao&amp;rdquo; means rice in Thai, but we see here &amp;ldquo;khao phat&amp;rdquo; is strongly related suggesting that fried rice (&amp;ldquo;khao phat&amp;rdquo;) is quite popular.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./network_thai_dishes.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Visualizing a network of Bi-grams with {ggraph} ----
library(igraph)
library(ggraph)
set.seed(2021)

thai_dish_bigram_counts &amp;lt;- df %&amp;gt;%
    select(Thai_name, minor_grouping) %&amp;gt;%
    unnest_tokens(bigram, Thai_name, token = &amp;quot;ngrams&amp;quot;, n = 2) %&amp;gt;%
    separate(bigram, c(&amp;quot;word1&amp;quot;, &amp;quot;word2&amp;quot;), sep = &amp;quot; &amp;quot;) %&amp;gt;%
    count(word1, word2, sort = TRUE)


# filter for relatively common combinations (n &amp;gt; 2)
thai_dish_bigram_graph &amp;lt;- thai_dish_bigram_counts %&amp;gt;%
    filter(n &amp;gt; 2) %&amp;gt;%
    graph_from_data_frame()


# polishing operations to make a better looking graph
a &amp;lt;- grid::arrow(type = &amp;quot;closed&amp;quot;, length = unit(.15, &amp;quot;inches&amp;quot;))

set.seed(2021)
ggraph(thai_dish_bigram_graph, layout = &amp;quot;fr&amp;quot;) +
    geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
                   arrow = a, end_cap = circle(.07, &#39;inches&#39;)) +
    geom_node_point(color = &amp;quot;dodgerblue&amp;quot;, size = 5, alpha = 0.7) +
    geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
    labs(
        title = &amp;quot;Network of Relations between Word Pairs&amp;quot;,
        subtitle = &amp;quot;{ggraph}: common nodes in Thai food&amp;quot;,
        caption = &amp;quot;Data: Wikipedia | Graphics: @paulapivat&amp;quot;
    ) +
    theme_void()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we may be interested in word relationships &lt;em&gt;within&lt;/em&gt; individual dishes.&lt;/p&gt;
&lt;p&gt;The below graph shows a network of word pairs with moderate-to-high correlations. We can see certain words clustered near each other with relatively dark lines: kaeng (curry), pet (spicy), wan (sweet), khiao (green curry), phrik (chili) and mu (pork). These words represent a collection of ingredient, mode of cooking and description that are generally combined.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./indiv_dish_corr.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;set.seed(2021)

# Individual Dishes
individual_dish_words &amp;lt;- df %&amp;gt;%
    select(major_grouping, Thai_name) %&amp;gt;%
    filter(major_grouping == &#39;Individual dishes&#39;) %&amp;gt;%
    mutate(section = row_number() %/% 10) %&amp;gt;%
    filter(section &amp;gt; 0) %&amp;gt;%
    unnest_tokens(word, Thai_name)  # assume no stop words

individual_dish_cors &amp;lt;- individual_dish_words %&amp;gt;%
    group_by(word) %&amp;gt;% 
    filter(n() &amp;gt;= 2) %&amp;gt;%     # looking for co-occuring words, so must be 2 or greater
    pairwise_cor(word, section, sort = TRUE) 


individual_dish_cors %&amp;gt;%
    filter(correlation &amp;lt; -0.40) %&amp;gt;%
    graph_from_data_frame() %&amp;gt;%
    ggraph(layout = &amp;quot;fr&amp;quot;) +
    geom_edge_link(aes(edge_alpha = correlation, size = correlation), show.legend = TRUE) +
    geom_node_point(color = &amp;quot;green&amp;quot;, size = 5, alpha = 0.5) +
    geom_node_text(aes(label = name), repel = TRUE) +
    labs(
        title = &amp;quot;Word Pairs in Individual Dishes&amp;quot;,
        subtitle = &amp;quot;{ggraph}: Negatively correlated (r = -0.4)&amp;quot;,
        caption = &amp;quot;Data: Wikipedia | Graphics: @paulapivat&amp;quot;
    ) +
    theme_void()
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;summary&#34;&gt;Summary&lt;/h4&gt;
&lt;p&gt;We have completed an exploratory data project where we scraped, clean, manipulated and visualized data using a combination of Python and R. We also used the &lt;code&gt;tidytext&lt;/code&gt; package for basic text mining task to see if we could gain some insights into Thai cuisine using  words from dish names scraped off Wikipedia.&lt;/p&gt;
&lt;p&gt;For more content on data science, R, Python, SQL and more, 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The More a Network is Worth, the Harder it is to Attack</title>
      <link>/post/crypto_price_attack/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/post/crypto_price_attack/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#data&#34;&gt;Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#implication&#34;&gt;Implication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this post, I use Python and R to access, parse, manipulate, then visualize data from 
&lt;a href=&#34;https://www.crypto51.app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Crypto51.app&lt;/a&gt; to show the strong relationship between Market Capitalization and Cost to Attack among public crypto networks.&lt;/p&gt;
&lt;p&gt;The more a network is thought to be worth, the more expensive it is to attack. An important, but often overlooked reason to celebrate price gains.&lt;/p&gt;
&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;
&lt;p&gt;In this post, I query an API endpoint setup at 
&lt;a href=&#34;https://www.crypto51.app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Crypto51.app&lt;/a&gt; to get &lt;code&gt;JSON&lt;/code&gt; data. Then, I use Python to parse and convert to &lt;code&gt;dataframe&lt;/code&gt;. Finally, I use R to wrangle and visualize.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get it!&lt;/p&gt;
&lt;p&gt;Here is the Python code to read in &lt;code&gt;JSON&lt;/code&gt; and convert to a &lt;code&gt;dataframe&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import json
import requests

r = requests.get(&#39;https://api.crypto51.app/coins.json&#39;)
dct = dict()
dct = r.json()

# loop through:
# last_updated
# coins
for x, y in dct.items():
    print(x)

type(dct[&#39;coins&#39;]) # list
len(dct[&#39;coins&#39;])  # 57 dictionaries in side this list

# convert list of 57 dictionaries into a pandas dataframe
df = pd.DataFrame.from_dict(dct[&#39;coins&#39;])
df.head()
df.to_csv(&#39;crypto51.csv&#39;, index=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After creating a CSV, I&amp;rsquo;m transition to R, out of preference for &lt;code&gt;dataframe&lt;/code&gt; manipulation and visualization with this tool (you could do the following in &lt;code&gt;pandas&lt;/code&gt; and &lt;code&gt;seaborn&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll load the &lt;code&gt;tidyverse&lt;/code&gt; and read in the CSV file we created. Then we&amp;rsquo;ll use a series of &lt;code&gt;magrittr&lt;/code&gt; 
&lt;a href=&#34;https://magrittr.tidyverse.org/reference/pipe.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pipes&lt;/a&gt; to sequence our data manipulation in one flow. We&amp;rsquo;ll remove projects with &lt;strong&gt;no market_cap&lt;/strong&gt; data. We&amp;rsquo;ll remove the Handshake project because of missing data for &lt;code&gt;attack_hourly_cost&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll change &lt;code&gt;attack_hourly_cost&lt;/code&gt; data type into numeric. Then we&amp;rsquo;ll use &lt;code&gt;ggplot2&lt;/code&gt; to visualize a scatter plot with both X and Y axes transformed with &lt;code&gt;scale_*_log10()&lt;/code&gt; to make the scatter plot more interpretable.&lt;/p&gt;
&lt;p&gt;Bitcoin and Ethereum are annotated as the two leading projects (see chart below).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;library(tidyverse)

df &amp;lt;- read_csv(&amp;quot;crypto51.csv&amp;quot;)

df %&amp;gt;%
    # remove projects with no market_cap
    slice(1:38) %&amp;gt;% 
    filter(attack_hourly_cost != &amp;quot;?&amp;quot;) %&amp;gt;% 
    # change character to numeric
    mutate(
        attack_hourly_cost = as.numeric(attack_hourly_cost)
    ) %&amp;gt;% 
    ggplot(aes(x=market_cap, y=attack_hourly_cost)) +
    geom_point(aes(size = log10(market_cap)), color = &amp;quot;white&amp;quot;, alpha = 0.8) +
    # use log10 transformation to make chart more interpretable
    scale_y_log10(label= scales::dollar) +
    scale_x_log10(label= scales::dollar) +
    theme_minimal() +
    theme(
        legend.position = &#39;none&#39;,
        panel.background = element_rect(fill = &amp;quot;dodger blue&amp;quot;),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        plot.background = element_rect(fill = &amp;quot;dodger blue&amp;quot;),
        plot.title = element_text(colour = &amp;quot;white&amp;quot;, face = &amp;quot;bold&amp;quot;, size = 30, 
                                  margin = margin(10,0,30,0)),
        plot.caption = element_text(color = &amp;quot;white&amp;quot;),
        axis.title = element_text(colour = &amp;quot;white&amp;quot;, face = &amp;quot;bold&amp;quot;),
        axis.title.x = element_text(margin = margin(30,0,10,0)),
        axis.text = element_text(colour = &amp;quot;white&amp;quot;, face = &amp;quot;bold&amp;quot;),
        axis.title.y = element_text(margin = margin(0,20,0,30), angle = 0)
    ) +
    labs(
        x = &amp;quot;Market Capitalization&amp;quot;,
        y = &amp;quot;Attack\nHourly\nCost&amp;quot;,
        title = &amp;quot;The More a Crypto Network is Worth,\n the Harder it is to Attack.&amp;quot;,
        caption = &amp;quot;Data: www.crypto51.app | Graphics: @paulapivat&amp;quot;
    ) +
    # annotate instead of geom_text
    annotate(&amp;quot;text&amp;quot;, x = 205174310335, y = 800000, label = &amp;quot;Bitcoin&amp;quot;, color = &amp;quot;white&amp;quot;) +
    annotate(&amp;quot;text&amp;quot;, x = 30762751140, y = 418437, label = &amp;quot;Ethereum&amp;quot;, color = &amp;quot;white&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;implication&#34;&gt;Implication&lt;/h2&gt;
&lt;h3 id=&#34;the-more-a-crypto-network-is-worth-the-harder-it-is-to-attack&#34;&gt;The More a Crypto Network is Worth, the Harder it is to Attack&lt;/h3&gt;
&lt;p&gt;All time high.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;d be hard pressed to find three more delicious words than these.&lt;/p&gt;
&lt;p&gt;When it comes to crypto, everyone keeps an eye on their portfolio value.&lt;/p&gt;
&lt;p&gt;Your bags aside, there is &lt;em&gt;another&lt;/em&gt; reason to celebrate price gains.&lt;/p&gt;
&lt;p&gt;Bitcoin&amp;rsquo;s big innovation was making &lt;strong&gt;digital transaction difficult to replicate&lt;/strong&gt; (unlike most digital files that are easily duplicated).&lt;/p&gt;
&lt;p&gt;Nodes follow the longest chain as the &amp;ldquo;correct&amp;rdquo; chain. However, this opens things up for any node(s) with more than 51% of the network hashing power to pull &lt;em&gt;shenanigans&lt;/em&gt;, such as &lt;strong&gt;double-spending&lt;/strong&gt;. Sending funds to one address on the main chain and the same funds to another address on a different chain.&lt;/p&gt;
&lt;p&gt;More hardware and hash power allow a node to secretly mine a side chain, which they can later âfoolâ the rest of the network into accepting.&lt;/p&gt;
&lt;p&gt;Since their inception, Bitcoin and Ethereum have gotten more difficult to mine over time. And when price increases, the capital costs of buying new equipment goes up.&lt;/p&gt;
&lt;p&gt;This makes it more difficult for any one entity to accumulate too much hash power and pull shenanigans. &lt;strong&gt;As a result, the entire network is more secure&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In fact, the data provided by crypto51.app suggests a near perfect correlation between Market Capitalization and Cost to Attack, at r = 0.94.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./price_nb3.png&#34; alt=&#34;Crypto Price Attack&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The more a crypto network is worth, the more expensive it is to attack.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another reason to celebrate price gains.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.crypto51.app&#34;&gt;www.crypto51.app&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For more content on data science, machine learning, R, Python, SQL and more, 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Positive are Your Facebook Posts?</title>
      <link>/post/sentiment_analysis/</link>
      <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/post/sentiment_analysis/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#getting_data&#34;&gt;Getting Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#tokenization&#34;&gt;Tokenization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#normalizing_sentences&#34;&gt;Normalizing Sentences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#frequency&#34;&gt;Frequency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#sentiment_analysis&#34;&gt;Sentiment Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#data_transformation&#34;&gt;Data Transformation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#visualization&#34;&gt;Visualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;h4 id=&#34;why-sentiment-analysis&#34;&gt;Why Sentiment Analysis?&lt;/h4&gt;
&lt;p&gt;NLP is subfield of linguistic, computer science and artificial intelligence (
&lt;a href=&#34;https://en.wikipedia.org/wiki/Natural_language_processing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt;), and you could spend years studying it.&lt;/p&gt;
&lt;p&gt;However, I wanted a quick dive to a get an intuition for how NLP works, and we&amp;rsquo;ll do that via &lt;strong&gt;sentiment analysis&lt;/strong&gt;, categorizing text by their polarity.&lt;/p&gt;
&lt;p&gt;We can&amp;rsquo;t help but feel motivated to see insights about our &lt;em&gt;own&lt;/em&gt; social media post, so we&amp;rsquo;ll turn to a well known platform.&lt;/p&gt;
&lt;h4 id=&#34;how-well-does-facebook-know-us&#34;&gt;How well does Facebook know us?&lt;/h4&gt;
&lt;p&gt;To find out, I downloaded 14 years of posts to apply &lt;strong&gt;text&lt;/strong&gt; and &lt;strong&gt;sentiment&lt;/strong&gt; analysis. We&amp;rsquo;l use &lt;code&gt;Python&lt;/code&gt; to read and parse &lt;code&gt;json&lt;/code&gt; data from Facebook.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll perform tasks such as tokenization and normalization aided by Python&amp;rsquo;s &lt;strong&gt;Natural Language Toolkit&lt;/strong&gt;, &lt;code&gt;NLTK&lt;/code&gt;. Then, we&amp;rsquo;ll use the &lt;code&gt;Vader&lt;/code&gt; module (Hutto &amp;amp; Gilbert, 2014) for rule-based (lexicon) &lt;strong&gt;sentiment analysis&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we&amp;rsquo;ll transition our work flow to &lt;code&gt;R&lt;/code&gt; and the &lt;code&gt;tidyverse&lt;/code&gt; for &lt;strong&gt;data manipulation&lt;/strong&gt; and &lt;strong&gt;visualization&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;getting_data&#34;&gt;Getting_Data&lt;/h2&gt;
&lt;p&gt;First, you&amp;rsquo;ll need to download your own Facebook data by following: Setting &amp;amp; Privacy &amp;gt; Setting &amp;gt; Your Facebook Information &amp;gt; Download Your Information &amp;gt; (select) Posts.&lt;/p&gt;
&lt;p&gt;Below, I named my file &lt;code&gt;your_posts_1.json&lt;/code&gt;, but you can change this.
We&amp;rsquo;ll use Python&amp;rsquo;s &lt;code&gt;json&lt;/code&gt; module read in data. We can get a feel for the data with &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json

# load json into python, assign to &#39;data&#39;
with open(&#39;your_posts_1.json&#39;) as file:
    data = json.load(file)

type(data)     # a list
type(data[0])  # first object in the list: a dictionary
len(data)      # my list contains 2166 dictionaries
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are the Python libraries we use in this post:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from nltk.stem import LancasterStemmer, WordNetLemmatizer      # OPTIONAL (more relevant for individual words)
from nltk.corpus import stopwords
from nltk.probability import FreqDist
import re
import unicodedata
import nltk
import json
import inflect
import matplotlib.pyplot as plt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.nltk.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Natural Language Tookkit&lt;/a&gt; is a popular Python platform for working with human language data. While it has over 50 lexical resources, we&amp;rsquo;ll use the 
&lt;a href=&#34;https://github.com/cjhutto/vaderSentiment&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vader Sentiment Lexicon&lt;/a&gt;, that is &lt;em&gt;specifically&lt;/em&gt; attuned to sentiments expressed in social media.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.python.org/3/library/re.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Regex&lt;/a&gt; (regular expressions) will be used to remove punctuation.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.python.org/3/library/unicodedata.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unicode Database&lt;/a&gt; will be used to remove non-ASCII characters.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.python.org/3/library/json.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JSON&lt;/a&gt; module helps us to read in json from Facebook.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://pypi.org/project/inflect/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Inflect&lt;/a&gt; helps us to convert numbers to words.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://pandas.pydata.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pandas&lt;/a&gt; is a powerful data manipulation and data analysis tool for when we save our text data into a data frame and write to csv.&lt;/p&gt;
&lt;p&gt;After we have our data, we&amp;rsquo;ll 
&lt;a href=&#34;https://twitter.com/paulapivat/status/1352893979897909251?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dig through&lt;/a&gt; to get actual &lt;strong&gt;text data&lt;/strong&gt; (our posts).&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll store this in a list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;data&lt;/code&gt; key occasionally returns an empty array and we want to skip over those by checking &lt;code&gt;if len(v) &amp;gt; 0&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# create empty list
empty_lst = []

# multiple nested loops to store all post in empty list
for dct in data:
    for k, v in dct.items():
        if k == &#39;data&#39;:
            if len(v) &amp;gt; 0:
                for k_i, v_i in vee[0].items():  
                    if k_i == &#39;post&#39;:
                        empty_lst.append(v_i)

print(&amp;quot;This is the empty list: &amp;quot;, empty_lst)
print(&amp;quot;\nLength of list: &amp;quot;, len(empty_lst))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have a list of strings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./list_of_strings.png&#34; alt=&#34;list_of_strings&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;tokenization&#34;&gt;Tokenization&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll loop through our list of strings (empty_lst) to tokenize each &lt;em&gt;sentence&lt;/em&gt; with &lt;code&gt;nltk.sent_tokenize()&lt;/code&gt;. We want to split the text into individual sentences.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./token_list_of_strings.png&#34; alt=&#34;token_list_of_strings&#34;&gt;&lt;/p&gt;
&lt;p&gt;This yields a list of list, which we&amp;rsquo;ll flatten:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# - list of list, len: 1762 (each list contain sentences)
nested_sent_token = [nltk.sent_tokenize(lst) for lst in empty_lst]

# flatten list, len: 3241
flat_sent_token = [item for sublist in nested_sent_token for item in sublist]
print(&amp;quot;Flatten sentence token: &amp;quot;, len(flat_sent_token))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;normalizing_sentences&#34;&gt;Normalizing_Sentences&lt;/h2&gt;
&lt;p&gt;For context on the functions used in this section, check out this article by Matthew Mayo on 
&lt;a href=&#34;https://www.kdnuggets.com/2018/03/text-data-preprocessing-walkthrough-python.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Text Data Preprocessing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, we&amp;rsquo;ll remove non-ASCII characters (&lt;code&gt;remove_non_ascii(words)&lt;/code&gt;) including: &lt;code&gt;#&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;&#39;&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;, among many others. Then we&amp;rsquo;ll lowercase (&lt;code&gt;to_lowercase(words)&lt;/code&gt;), remove punctuation (&lt;code&gt;remove_punctuation(words)&lt;/code&gt;), replace numbers (&lt;code&gt;replace_numbers(words)&lt;/code&gt;), and remove stopwords (&lt;code&gt;remove_stopwords(words)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Example stopwords are: your, yours, yourself, yourselves, he, him, his, himself etc.&lt;/p&gt;
&lt;p&gt;This allows us to have each sentence be on equal playing field.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Remove Non-ASCII
def remove_non_ascii(words):
    &amp;quot;&amp;quot;&amp;quot;Remove non-ASCII character from List of tokenized words&amp;quot;&amp;quot;&amp;quot;
    new_words = []
    for word in words:
        new_word = unicodedata.normalize(&#39;NFKD&#39;, word).encode(
            &#39;ascii&#39;, &#39;ignore&#39;).decode(&#39;utf-8&#39;, &#39;ignore&#39;)
        new_words.append(new_word)
    return new_words


# To LowerCase
def to_lowercase(words):
    &amp;quot;&amp;quot;&amp;quot;Convert all characters to lowercase from List of tokenized words&amp;quot;&amp;quot;&amp;quot;
    new_words = []
    for word in words:
        new_word = word.lower()
        new_words.append(new_word)
    return new_words


# Remove Punctuation , then Re-Plot Frequency Graph
def remove_punctuation(words):
    &amp;quot;&amp;quot;&amp;quot;Remove punctuation from list of tokenized words&amp;quot;&amp;quot;&amp;quot;
    new_words = []
    for word in words:
        new_word = re.sub(r&#39;[^\w\s]&#39;, &#39;&#39;, word)
        if new_word != &#39;&#39;:
            new_words.append(new_word)
    return new_words


# Replace Numbers with Textual Representations
def replace_numbers(words):
    &amp;quot;&amp;quot;&amp;quot;Replace all interger occurrences in list of tokenized words with textual representation&amp;quot;&amp;quot;&amp;quot;
    p = inflect.engine()
    new_words = []
    for word in words:
        if word.isdigit():
            new_word = p.number_to_words(word)
            new_words.append(new_word)
        else:
            new_words.append(word)
    return new_words

# Remove Stopwords
def remove_stopwords(words):
    &amp;quot;&amp;quot;&amp;quot;Remove stop words from list of tokenized words&amp;quot;&amp;quot;&amp;quot;
    new_words = []
    for word in words:
        if word not in stopwords.words(&#39;english&#39;):
            new_words.append(word)
    return new_words
    
# Combine all functions into Normalize() function
def normalize(words):
    words = remove_non_ascii(words)
    words = to_lowercase(words)
    words = remove_punctuation(words)
    words = replace_numbers(words)
    words = remove_stopwords(words)
    return words
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The below screen cap gives us an idea of the difference between sentence &lt;strong&gt;normalization&lt;/strong&gt; vs &lt;strong&gt;non-normalization&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./normal_v_non.png&#34; alt=&#34;normal_v_non&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sents = normalize(flat_sent_token)
print(&amp;quot;Length of sentences list: &amp;quot;, len(sents))   # 3194
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The process of stemming and lemmatization makes more sense for individuals words (over sentences), so we won&amp;rsquo;t use them here.&lt;/p&gt;
&lt;h2 id=&#34;frequency&#34;&gt;Frequency&lt;/h2&gt;
&lt;p&gt;You can use the &lt;code&gt;FreqDist()&lt;/code&gt; function to get the most common sentences. Then, you could plot a line chart for a visual comparison of the most frequent sentences.&lt;/p&gt;
&lt;p&gt;Although simple, counting frequencies can yield some 
&lt;a href=&#34;https://twitter.com/paulapivat/status/1353704114467729408?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;insights&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from nltk.probability import FreqDist

# Find frequency of sentence
fdist_sent = FreqDist(sents)
fdist_sent.most_common(10)   

# Plot
fdist_sent.plot(10)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sentiment_analysis&#34;&gt;Sentiment_Analysis&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll use the &lt;code&gt;Vader&lt;/code&gt; module from &lt;code&gt;NLTK&lt;/code&gt;. Vader stands for:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Valence, Aware, Dictionary and sEntiment Reasoner.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are taking a &lt;strong&gt;Rule-based/Lexicon&lt;/strong&gt; approach to sentiment analysis because we have a fairly large dataset, but lack labeled data to build a robust training set. Thus, Machine Learning would &lt;strong&gt;not&lt;/strong&gt; be ideal for this task.&lt;/p&gt;
&lt;p&gt;To get an intuition for how the &lt;code&gt;Vader&lt;/code&gt; module works, we can visit the github repo to view &lt;code&gt;vader_lexicon.txt&lt;/code&gt; (
&lt;a href=&#34;https://github.com/cjhutto/vaderSentiment/blob/master/vaderSentiment/vader_lexicon.txt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;). This is a &lt;strong&gt;dictionary&lt;/strong&gt; that has been empirically validated. Sentiment ratings are provided by 10 independent human raters (pre-screened, trained and checked for inter-rater reliability).&lt;/p&gt;
&lt;p&gt;Scores range from (-4) Extremely Negative to (4) Extremely Positive, with (0) as Neutral. For example, &amp;ldquo;die&amp;rdquo; is rated -2.9, while &amp;ldquo;dignified&amp;rdquo; has a 2.2 rating. For more details visit their (
&lt;a href=&#34;https://github.com/cjhutto/vaderSentiment&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;repo&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll create two empty lists to store the sentences and the polarity scores, separately.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sentiment&lt;/code&gt; captures each sentence and &lt;code&gt;sent_scores&lt;/code&gt;, which initializes the &lt;code&gt;nltk.sentiment.vader.SentimentIntensityAnalyzer&lt;/code&gt; to calculate &lt;strong&gt;polarity_score&lt;/strong&gt; of each sentence (i.e., negative, neutral, positive).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sentiment2&lt;/code&gt; captures each polarity and value in a list of tuples.&lt;/p&gt;
&lt;p&gt;The below screen cap should give you a sense of what we have:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./sentiment_2.png&#34; alt=&#34;sentiment_2&#34;&gt;&lt;/p&gt;
&lt;p&gt;After we have appended each sentence (&lt;code&gt;sentiment&lt;/code&gt;) and their polarity scores (&lt;code&gt;sentiment2&lt;/code&gt;, negative, neutral, positive), we&amp;rsquo;ll &lt;strong&gt;create data frames&lt;/strong&gt; to store these values.&lt;/p&gt;
&lt;p&gt;Then, we&amp;rsquo;ll write the data frames to &lt;strong&gt;CSV&lt;/strong&gt; to transition to &lt;code&gt;R&lt;/code&gt;. Note that we set index to false when saving for CSV. Python starts counting at 0, while &lt;code&gt;R&lt;/code&gt; starts at 1, so we&amp;rsquo;re better off re-creating the index as a separate column in &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: There are more efficient ways for what I&amp;rsquo;m doing here. My solution is to save two CSV files and move the work flow over to &lt;code&gt;R&lt;/code&gt; for further data manipulation and visualization. This is primarily a personal preference for handling data frames and visualizations in &lt;code&gt;R&lt;/code&gt;, but I should point out this &lt;em&gt;can&lt;/em&gt; be done with &lt;code&gt;pandas&lt;/code&gt; and &lt;code&gt;matplotlib&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# nltk.download(&#39;vader_lexicon&#39;)

sid = SentimentIntensityAnalyzer()

sentiment = []
sentiment2 = []

for sent in sents:
    sent1 = sent
    sent_scores = sid.polarity_scores(sent1)
    for x, y in sent_scores.items():
        sentiment2.append((x, y))
    sentiment.append((sent1, sent_scores))
    # print(sentiment)

# sentiment
cols = [&#39;sentence&#39;, &#39;numbers&#39;]
result = pd.DataFrame(sentiment, columns=cols)
print(&amp;quot;First five rows of results: &amp;quot;, result.head())

# sentiment2
cols2 = [&#39;label&#39;, &#39;values&#39;]
result2 = pd.DataFrame(sentiment2, columns=cols2)
print(&amp;quot;First five rows of results2: &amp;quot;, result2.head())

# save to CSV
result.to_csv(&#39;sent_sentiment.csv&#39;, index=False)
result2.to_csv(&#39;sent_sentiment_2.csv&#39;, index=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;data_transformation&#34;&gt;Data_Transformation&lt;/h2&gt;
&lt;p&gt;From this point forward, we&amp;rsquo;ll be using &lt;code&gt;R&lt;/code&gt; and the &lt;code&gt;tidyverse&lt;/code&gt; for data manipulation and visualization. &lt;code&gt;RStudio&lt;/code&gt; is the IDE of choice here. We&amp;rsquo;ll create an &lt;code&gt;R Script&lt;/code&gt; to store all our data transformation and visualization process. We should be in the same directory in which the above CSV files were created with &lt;code&gt;pandas&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll load the two CSV files we saved and the &lt;code&gt;tidyverse&lt;/code&gt; library:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)

# load data
df &amp;lt;- read_csv(&amp;quot;sent_sentiment.csv&amp;quot;)       
df2 &amp;lt;- read_csv(&#39;sent_sentiment_2.csv&#39;)    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ll create another column that matches the index for the first data frame (sent_sentiment.csv). I save it as &lt;code&gt;df1&lt;/code&gt;, but you could overwrite the original &lt;code&gt;df&lt;/code&gt; if you wanted.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# create a unique identifier for each sentence
df1 &amp;lt;- df %&amp;gt;%
    mutate(row = row_number())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, for the second data frame (sent_sentiment_2.csv), we&amp;rsquo;ll create another column matching the index, but also use &lt;code&gt;pivot_wider&lt;/code&gt; from the &lt;code&gt;tidyr&lt;/code&gt; package. &lt;strong&gt;NOTE&lt;/strong&gt;: You&amp;rsquo;ll want to &lt;code&gt;group_by&lt;/code&gt; label first, then use &lt;code&gt;mutate&lt;/code&gt; to create a unique identifier.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll then use &lt;code&gt;pivot_wider&lt;/code&gt; to ensure that all polarity values (negative, neutral, positive) have their own columns.&lt;/p&gt;
&lt;p&gt;By creating a unique identifier using &lt;code&gt;mutate&lt;/code&gt; and &lt;code&gt;row_number()&lt;/code&gt;, we&amp;rsquo;ll be able to join (&lt;code&gt;left_join&lt;/code&gt;) by row.&lt;/p&gt;
&lt;p&gt;Finally, I save the operation to &lt;code&gt;df3&lt;/code&gt; which allows me to work off a fresh new data frame for visualization.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# long-to-wide for df2
# note: first, group by label; then, create a unique identifier for each label then use pivot_wider

df3 &amp;lt;- df2 %&amp;gt;%
    group_by(label) %&amp;gt;%
    mutate(row = row_number()) %&amp;gt;%
    pivot_wider(names_from = label, values_from = values) %&amp;gt;%
    left_join(df1, by = &#39;row&#39;) %&amp;gt;%
    select(row, sentence, neg:compound, numbers) 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;visualization&#34;&gt;Visualization&lt;/h2&gt;
&lt;p&gt;First, we&amp;rsquo;ll visualize the positive and negative polarity scores separately, across all 3194 sentences (your numbers will vary).&lt;/p&gt;
&lt;p&gt;Here are positivity scores:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./positivity_line.png&#34; alt=&#34;positivity_line&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here are negativity scores:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./negativity_line.png&#34; alt=&#34;negativity_line&#34;&gt;&lt;/p&gt;
&lt;p&gt;When I sum positivity and negativity scores to get a ratio, it&amp;rsquo;s approximately 568:97 or  5.8x more positive than negative according to the &lt;code&gt;Vader&lt;/code&gt; (Valance Aware Dictionary and Sentiment Reasoner).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Vader&lt;/code&gt; module will take in every sentence and assign a valence score from -1 (most negative) to 1 (most positive). We can classify sentences as &lt;code&gt;pos&lt;/code&gt; (positive), &lt;code&gt;neu&lt;/code&gt; (neutral) and &lt;code&gt;neg&lt;/code&gt;(negative) or as a composite (&lt;code&gt;compound&lt;/code&gt;) score (i.e., normalized, weighted composite score). For more details, see 
&lt;a href=&#34;https://pypi.org/project/vader-sentiment/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vader-sentiment documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a chart to see &lt;em&gt;both&lt;/em&gt; positive and negative scores together (positive = blue, negative = red, neutral = black).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./sentiment2.png&#34; alt=&#34;sentiment2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Finally, we can also use &lt;code&gt;histograms&lt;/code&gt; to see the distribution of negative and positive sentiment among the sentences:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./patch_histo.png&#34; alt=&#34;patch_histo&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;non-normalized-data&#34;&gt;Non-Normalized Data&lt;/h4&gt;
&lt;p&gt;It turns out the &lt;code&gt;Vader&lt;/code&gt; module is fully capable of analyzing sentences with punctuation, word-shape (capitalization for emphasis), slang and even utf-8 encoded emojis.&lt;/p&gt;
&lt;p&gt;So to see if there would be any difference if we implemented sentiment analysis &lt;strong&gt;without normalization&lt;/strong&gt;, I re-ran all the analyses above.&lt;/p&gt;
&lt;p&gt;Here are the two version of data for comparison. Top for normalization and bottom for non-normalized.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./two_version.png&#34; alt=&#34;two_version&#34;&gt;&lt;/p&gt;
&lt;p&gt;While there are expected slight differences, they are only slight.&lt;/p&gt;
&lt;h4 id=&#34;summary&#34;&gt;Summary&lt;/h4&gt;
&lt;p&gt;I downloaded 14 years worth of Facebook posts to run a rule-based sentiment analysis and visualize the results, using a combination of &lt;code&gt;Python&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I enjoyed using both for this project and sought to play to their strengths. I found parsing JSON straight-forward with Python, but once we transition to data frames, I was itching to get back to R.&lt;/p&gt;
&lt;p&gt;Because we lacked labeled data, using a rule-based/lexicon-approach to sentiment analysis made sense. Now that we have a label for valence scores, it may be possible to take a machine learning approach to predict the valence of future posts.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Hutto, C.J. &amp;amp; Gilbert, E.E. (2014). VADER: A Parsimonious Rule-based Model for Sentiment Analysis of Social Media Text. Eighth International Conference on Weblogs and Social Media (ICWSM-14). Ann Arbor, MI, June 2014.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For more content on data science, machine learning, R, Python, SQL and more, 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Analyzing Your Twitter Data</title>
      <link>/post/twitter_analytics/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/post/twitter_analytics/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#exploring_relationships&#34;&gt;Exploring Relationships&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview--setup&#34;&gt;Overview &amp;amp; Setup&lt;/h2&gt;
&lt;p&gt;This post uses various R libraries and functions to help you explore your Twitter Analytics Data. The first thing to do is download data from 
&lt;a href=&#34;https://analytics.twitter.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;analytics.twitter.com&lt;/a&gt;. The assumption here is that you&amp;rsquo;re already a Twitter user and have been using for at least 6 months.&lt;/p&gt;
&lt;p&gt;Once there, you&amp;rsquo;ll click on the &lt;code&gt;Tweets&lt;/code&gt; tab, which should bring you to your Tweet activity with the option to &lt;strong&gt;Export data&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./twitter_analytics.png&#34; alt=&#34;twitter_analytics&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once you click on &lt;strong&gt;Export data&lt;/strong&gt;, you&amp;rsquo;ll choose &amp;ldquo;By day&amp;rdquo;, which provides your impressions and engagements metrics for everyday (you&amp;rsquo;ll also select the time period, in the drop down menu right next to Export data - the default is &amp;ldquo;Last 28 Days&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The other option is to choose &amp;ldquo;By Tweet&amp;rdquo; and that will download the text of each Tweet along with associated metrics. We could potentially do fun text analysis with this, but we&amp;rsquo;ll save that for another post.&lt;/p&gt;
&lt;p&gt;For this post, I downloaded all &lt;em&gt;available&lt;/em&gt; data, which goes five months back.&lt;/p&gt;
&lt;p&gt;After downloading, you&amp;rsquo;ll want to &lt;strong&gt;read&lt;/strong&gt; in the data and, in our case, &lt;strong&gt;combine&lt;/strong&gt; all five months into one data frame, we&amp;rsquo;ll use the &lt;code&gt;readr&lt;/code&gt; package and &lt;code&gt;read_csv()&lt;/code&gt; function contained in &lt;code&gt;tidyverse&lt;/code&gt;. Then we&amp;rsquo;ll use &lt;code&gt;rbind()&lt;/code&gt; to combine five data frames by rows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(tidyverse)

# load data from September to mid-January
df1 &amp;lt;- read_csv(&amp;quot;./daily_tweet_activity/daily_tweet_activity_metrics_paulapivat_20200901_20201001_en.csv&amp;quot;)
df2 &amp;lt;- read_csv(&amp;quot;./daily_tweet_activity/daily_tweet_activity_metrics_paulapivat_20201001_20201101_en.csv&amp;quot;)
df3 &amp;lt;- read_csv(&amp;quot;./daily_tweet_activity/daily_tweet_activity_metrics_paulapivat_20201101_20201201_en.csv&amp;quot;)
df4 &amp;lt;- read_csv(&amp;quot;./daily_tweet_activity/daily_tweet_activity_metrics_paulapivat_20201201_20210101_en.csv&amp;quot;)
df5 &amp;lt;- read_csv(&amp;quot;./daily_tweet_activity/daily_tweet_activity_metrics_paulapivat_20210101_20210112_en.csv&amp;quot;)

# combining ALL five dataframes into ONE, by rows
df &amp;lt;- rbind(df1, df2, df3, df4, df5)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;exploring_relationships&#34;&gt;Exploring_Relationships&lt;/h2&gt;
&lt;p&gt;Twitter analytics tracks several metric that are broadly grouped under Engagements, including: retweets, replies, likes, user profile clicks, url clicks, hashtag clicks, detail expands, media views and media engagements.&lt;/p&gt;
&lt;p&gt;There are other metrics like &amp;ldquo;app opens&amp;rdquo; and &amp;ldquo;promoted engagements&amp;rdquo;, which are services I have not used and so do not have any data available.&lt;/p&gt;
&lt;h4 id=&#34;a-guiding-question&#34;&gt;A Guiding Question&lt;/h4&gt;
&lt;p&gt;It&amp;rsquo;s useful to have a guiding question as it helps focus your exploration. Let&amp;rsquo;s say, I was interested in whether one of my tweets prompted a reader to click on my profile. The metric for this is &lt;code&gt;user profile clicks&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;My initial guiding question for this post is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Which metrics are most strongly correlated with User Profile Clicks?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You could simply use the &lt;code&gt;cor.test()&lt;/code&gt; function, which comes with base R, to go one by one between &lt;em&gt;each&lt;/em&gt; metric and &lt;code&gt;User Profile Click&lt;/code&gt;. For example, below we calculate the correlation between three pairs of variables, &lt;code&gt;User Profile Clicks&lt;/code&gt; and &lt;code&gt;retweets&lt;/code&gt;, &lt;code&gt;replies&lt;/code&gt; and &lt;code&gt;likes&lt;/code&gt;, separately. After awhile, this can get tedious.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cor.test(x = df$`user profile clicks`, y = df$retweets)
cor.test(x = df$`user profile clicks`, y = df$replies)
cor.test(x = df$`user profile clicks`, y = df$likes)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quicker way to explore the relationship between pairs of metrics throughout a dataset is to use a &lt;strong&gt;correlelogram&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll start with base R. You&amp;rsquo;ll want to limit the number of variables you visualize so the correlelogram doesn&amp;rsquo;t become too cluttered. Here are four variables that correlate the highest with &lt;code&gt;User Profile Clicks&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# four columns are selected along with user profile clicks to plot
df %&amp;gt;%
    select(8, 12, 19:20, `user profile clicks`) %&amp;gt;%
    plot(pch = 20, cex = 1.5, col=&amp;quot;#69b3a2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s a visual:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./plot_strongest.png&#34; alt=&#34;plot_strongest&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here are another four metrics with &lt;em&gt;moderate&lt;/em&gt; relationships:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df %&amp;gt;%
    select(6:7, 10:11, `user profile clicks`) %&amp;gt;%
    plot(pch = 20, cex = 1.5, col=&amp;quot;#69b3a2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./plot_moderate.png&#34; alt=&#34;plot_moderate&#34;&gt;&lt;/p&gt;
&lt;p&gt;Visually, you can see the moderate relationship scatter plots are more dispersed, with a less identifiable direction.&lt;/p&gt;
&lt;p&gt;While base R is dependable, we can get more informative plots with the &lt;code&gt;GGally&lt;/code&gt; package. Here are the four highly correlated variables with &lt;code&gt;User Profile Clicks&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(GGally)

# GGally, Strongest Related
df %&amp;gt;%
    select(8, 12, 19:20, `user profile clicks`) %&amp;gt;%
    ggpairs(
        diag = NULL,
        title = &amp;quot;Strongest Relationships with User Profile Clicks: Sep 2020 - Jan 2021&amp;quot;,
        axisLabels = c(&amp;quot;internal&amp;quot;),
        xlab = &amp;quot;Value&amp;quot;
    )

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s the correlelogram between the four most highly correlated variables with &lt;code&gt;user profile clicks&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./strongest.png&#34; alt=&#34;strongest&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here are the moderately correlated variables with &lt;code&gt;User Profile Clicks&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./moderate.png&#34; alt=&#34;moderate&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, not only do these provide scatter plots, but they also show the numerical values of the correlation between each pair of variables, which is much more informative than base R.&lt;/p&gt;
&lt;p&gt;Now, its entirely possible that the pattern of correlation in your data is different as the initial patterns we&amp;rsquo;re seeing here are not meant to generalize to a different dataset.&lt;/p&gt;
&lt;p&gt;For more content on data science, machine learning, R, Python, SQL and more, 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gradient Descent -- Data Science from Scratch (ch8)</title>
      <link>/post/dsfs_8/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/post/dsfs_8/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#gradient_descent&#34;&gt;Gradient Descent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#from_scratch&#34;&gt;From Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#take_away&#34;&gt;Take Away&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll explore Gradient Descent from the ground up starting conceptually, then using code to build up our intuition brick by brick.&lt;/p&gt;
&lt;p&gt;While this post is part of an ongoing series where I document my progress through 
&lt;a href=&#34;https://joelgrus.com/2019/05/13/data-science-from-scratch-second-edition/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Data Science from Scratch by Joel Grus&lt;/a&gt;, for this post I am drawing on external sources including AurÃ©lien Geron&amp;rsquo;s Hands-On Machine Learning to provide a context for why and when gradient descent is used.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll also be using external libraries such as &lt;code&gt;numpy&lt;/code&gt;, that are generally avoided in Data Science from Scratch, to help highlight concepts.&lt;/p&gt;
&lt;p&gt;While the book introduces gradient descent as a standalone topic, I find it more intuitive to reason about it within the context of a regression problem.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;In any modeling task, there is error, and our objective is minimize the errors so that when we develop models from our training data, we&amp;rsquo;ll have some confidence that the predictions will work in testing and completely new data.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll train a &lt;em&gt;linear regression model&lt;/em&gt;. Our dataset will only have three data points. To create the model, we&amp;rsquo;ll setting up parameters (slope and intercept) that best &amp;ldquo;fits&amp;rdquo; the data (i.e., best-fitting line), for example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./best_fit_line2.png&#34; alt=&#34;best fit line2&#34;&gt;&lt;/p&gt;
&lt;p&gt;We know the values for both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, so we can calculate the slope and intercept directly through the &lt;strong&gt;normal equation&lt;/strong&gt;, which is the 
&lt;a href=&#34;http://mlwiki.org/index.php/Normal_Equation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;analytical approach&lt;/a&gt; to finding regression coefficients (slope and intercept):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Normal Equation

import numpy as np
import matplotlib.pyplot as plt

x = np.array([2, 4, 5])
y = np.array([45, 85, 105])

# computing Normal Equation
x_b = np.c_[np.ones((3, 1)), x]       # add x0 = 1 to each of three instances
theta = np.linalg.inv(x_b.T.dot(x_b)).dot(x_b.T).dot(y)

# array([ 5., 20.])
theta
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key line is &lt;code&gt;np.linalg.inv()&lt;/code&gt; which computes the multiplicative inverse of a matrix.&lt;/p&gt;
&lt;p&gt;Our slope is 20 and intercept is 5 (i.e., &lt;code&gt;theta&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We could also have used the more familiar &amp;ldquo;rise over run&amp;rdquo; ((85 - 45) / (4 - 2)) or (40/2) or 20, but we want to illustrate the &lt;strong&gt;normal equation&lt;/strong&gt; which should come in handy when we go beyond the simplistic three data point example.&lt;/p&gt;
&lt;p&gt;We could also use the &lt;code&gt;LinearRegression&lt;/code&gt; class from &lt;code&gt;sklearn&lt;/code&gt; to call the least squares (&lt;code&gt;np.linalg.lstsq()&lt;/code&gt;) function directly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Linear Regression

from sklearn.linear_model import LinearRegression
import numpy as np

x = np.array([2, 4, 5])
y = np.array([45, 85, 105])

x = x.reshape(-1, 1)              # reshape because sklearn expect 2D array

x_b = np.c_[np.ones((3, 1)), x]   # add x0 = 1 to each of three instances

theta, residuals, rank, s = np.linalg.lstsq(x_b, y, rcond=1e-6)

# array([ 5., 20.])
print(&amp;quot;theta:&amp;quot;, theta)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This appraoch also yields the slope (20) and intercept (5) directly.&lt;/p&gt;
&lt;p&gt;We know the parameters of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in our example, but we want to see how &lt;strong&gt;learning from data&lt;/strong&gt; would work. Here&amp;rsquo;s the equation we&amp;rsquo;re working with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;y = 20 * x + 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here&amp;rsquo;s what it looks like (intercept = 5, slope = 20)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./known_x_y.png&#34; alt=&#34;known x y&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;gradient_descent&#34;&gt;Gradient_Descent&lt;/h2&gt;
&lt;h4 id=&#34;why&#34;&gt;Why?&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;normal equation&lt;/strong&gt; and the &lt;strong&gt;least squares&lt;/strong&gt; approach can handle large training sets efficiently, but when your model has a large number of features or too many training instances to fit into memory, &lt;strong&gt;gradient descent&lt;/strong&gt; is an often used alternative.&lt;/p&gt;
&lt;p&gt;Moreover, linear least squares assume the errors have a normal distribution and the relationship in the data is linear (this is where closed-form solutions like the normal equation excel). When the data is non-linear, an iterative solution (gradient descent) can be used.&lt;/p&gt;
&lt;p&gt;With linear regression we seek to minimize the sum-of-squares differences between the observed data and the predicted values (aka the error), in a &lt;strong&gt;non-iterative&lt;/strong&gt; fashion.&lt;/p&gt;
&lt;p&gt;Alternatively, we use gradient descent to find the slope and intercept that minimizes the average squared error, however, in an &lt;strong&gt;iterative fashion&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;using-gradient-descent-to-fit-a-model&#34;&gt;Using Gradient Descent to Fit a Model&lt;/h4&gt;
&lt;p&gt;The process for gradient descent is to start with a &lt;strong&gt;random&lt;/strong&gt; slope and intercept, then compute the gradient of the mean squared error, while adjusting the slope/intercept (&lt;code&gt;theta&lt;/code&gt;) in the direction that continues to minimize the error. This is repeated iteratively until we find a point where errors are &lt;em&gt;most&lt;/em&gt; minimized.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This section builds heavily on a previous post on linear algebra. You&amp;rsquo;ll want to 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;read this post&lt;/a&gt; to get a feel for the functions used to construct the functions we see in this post.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import TypeVar, List, Iterator
import math
import random
import matplotlib.pyplot as plt
from typing import Callable
from typing import List
import numpy as np

x = np.array([2, 4, 5])

# instead of putting y directly, we&#39;ll use the equation: 20 * x + 5, which is a direct representation of its relationship to x

# y = np.array([45, 85, 105])   

# both x and y are represented in inputs
inputs = [(x, 20 * x + 5) for x in range(2, 6)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, we&amp;rsquo;ll start with random values for the slope and intercept; we&amp;rsquo;ll also establish a learning rate, which controls how much a change in the model is warranted in response to the estimated error each time the model parameters (slope and intercept) are updated.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 1. start with a random value for slope and intercept
theta = [random.uniform(-1, 1), random.uniform(-1, 1)]

learning_rate = 0.001
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we&amp;rsquo;ll compute the mean of the gradients, then adjust the slope/intercept in the direction of minimizing the gradient, which is based on the error.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll note that this for-loop has 100 iterations. The more iterations we go through, the more that errors are minimized and the more we approach a slope/intercept where the model &amp;ldquo;fits&amp;rdquo; the data better.&lt;/p&gt;
&lt;p&gt;You can see in this list, &lt;code&gt;[linear_gradient(x, y, theta) for x, y in inputs]&lt;/code&gt;, that our &lt;code&gt;linear_gradient&lt;/code&gt; function is applied to the known &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values in the list of tuples, &lt;code&gt;inputs&lt;/code&gt;, along with random values for slope/intercept (&lt;code&gt;theta&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We multiply each &lt;code&gt;x&lt;/code&gt; value with a random value for slope, then add a random value for intercept. This yields the initial prediction. Error is the gap between the initial prediction and &lt;em&gt;actual&lt;/em&gt; &lt;code&gt;y&lt;/code&gt; values. We minimize the squared error by using its gradient.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# start with a function that determines the gradient based on the error from a single data point
def linear_gradient(x: float, y: float, theta: Vector) -&amp;gt; Vector:
    slope, intercept = theta
    predicted = slope * x + intercept   # model prediction
    error = (predicted - y)             # error is (predicted - actual)
    squared_error = error ** 2          # minimize squared error
    grad = [2 * error * x, 2 * error]   # using its gradient
    return grad
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;linear_gradient&lt;/code&gt; function along with initial parameters are then passed to &lt;code&gt;vector_mean&lt;/code&gt;, which utilize &lt;code&gt;scalar_multiply&lt;/code&gt; and &lt;code&gt;vector_sum&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
def vector_mean(vectors: List[Vector]) -&amp;gt; Vector:
    &amp;quot;&amp;quot;&amp;quot;Computes the element-wise average&amp;quot;&amp;quot;&amp;quot;
    n = len(vectors)
    return scalar_multiply(1/n, vector_sum(vectors))

def scalar_multiply(c: float, v: Vector) -&amp;gt; Vector:
    &amp;quot;&amp;quot;&amp;quot;Multiplies every element by c&amp;quot;&amp;quot;&amp;quot;
    return [c * v_i for v_i in v]
    
def vector_sum(vectors: List[Vector]) -&amp;gt; Vector:
    &amp;quot;&amp;quot;&amp;quot;Sum all corresponding elements (componentwise sum)&amp;quot;&amp;quot;&amp;quot;
    # Check that vectors is not empty
    assert vectors, &amp;quot;no vectors provided!&amp;quot;
    # Check the vectorss are all the same size
    num_elements = len(vectors[0])
    assert all(len(v) == num_elements for v in vectors), &amp;quot;different sizes!&amp;quot;
    # the i-th element of the result is the sum of every vector[i]
    return [sum(vector[i] for vector in vectors)
            for i in range(num_elements)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This yields the gradient. Then, each &lt;code&gt;gradient_step&lt;/code&gt; is deteremined as our function adjusts the initial random &lt;code&gt;theta&lt;/code&gt; values (slope/intercept) in the direction that minimizes the error.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def gradient_step(v: Vector, gradient: Vector, step_size: float) -&amp;gt; Vector:
    &amp;quot;&amp;quot;&amp;quot;Moves `step_size` in the `gradient` direction from `v`&amp;quot;&amp;quot;&amp;quot;
    assert len(v) == len(gradient)
    step = scalar_multiply(step_size, gradient)
    return add(v, step)
    
def add(v: Vector, w: Vector) -&amp;gt; Vector:
    &amp;quot;&amp;quot;&amp;quot;Adds corresponding elements&amp;quot;&amp;quot;&amp;quot;
    assert len(v) == len(w), &amp;quot;vectors must be the same length&amp;quot;
    return [v_i + w_i for v_i, w_i in zip(v, w)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All this comes together in this &lt;strong&gt;for-loop&lt;/strong&gt; to print out how the slope and intercept change with each iteration (we start with 100):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for epoch in range(100):     # start with 100 &amp;lt;--- change this figure to try different iterations
    # compute the mean of the gradients
    grad = vector_mean([linear_gradient(x, y, theta) for x, y in inputs])
    # take a step in that direction
    theta = gradient_step(theta, grad, -learning_rate)
    print(epoch, grad, theta)

slope, intercept = theta

#assert 19.9 &amp;lt; slope &amp;lt; 20.1,  &amp;quot;slope should be about 20&amp;quot;
#assert 4.9 &amp;lt; intercept &amp;lt; 5.1, &amp;quot;intercept should be about 5&amp;quot;
print(&amp;quot;slope&amp;quot;, slope)
print(&amp;quot;intercept&amp;quot;, intercept)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;iterative-descent&#34;&gt;Iterative Descent&lt;/h4&gt;
&lt;p&gt;At 100 iterations, the slope is 18.87 and intercept is 4.87 and the gradient is -32.48 (error for the slope) and -8.45 (error for the intercept). These numbers suggest that we need to decrease the slope and intercept from our random starting point, but our emphasis needs to be on decreasing the slope.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./100_iterations.png&#34; alt=&#34;100 iterations&#34;&gt;&lt;/p&gt;
&lt;p&gt;At 200 iterations, the slope is 19.97 and intercept is 4.86 and the gradient is -1.76 (error for the slope) and -0.48 (error for the intercept). Our errors have been reduced significantly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./200_iterations.png&#34; alt=&#34;200 iterations&#34;&gt;&lt;/p&gt;
&lt;p&gt;At 1000 iterations, the slope is 19.97 (not much difference from 200 iterations) and intercept is 5.09 and the gradients are markedly lower at -0.004 (error for the slope) and 0.02 (error for the intercept). Here the errors may not be much different from zero and we are near our optimal point.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./1000_iterations.png&#34; alt=&#34;1000 iterations&#34;&gt;&lt;/p&gt;
&lt;p&gt;In summary, the &lt;strong&gt;normal equation&lt;/strong&gt; and &lt;strong&gt;regression&lt;/strong&gt; approaches gave us a slope of 20 and intercept of 5. With gradient descent, we approached these values with each successive iterations, 1000 iterations yielding &lt;strong&gt;less error&lt;/strong&gt; than 100 or 200 iterations.&lt;/p&gt;
&lt;h2 id=&#34;from_scratch&#34;&gt;From_Scratch&lt;/h2&gt;
&lt;p&gt;As mentioned above, the functions used to compute the gradients and adjust the slope/intercept build on functions we explored in 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this post&lt;/a&gt;. Here&amp;rsquo;s a visual showing how the functions we used to iteratively arrive at the slope and intercept through gradient descent was built:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./ch8_funct.png&#34; alt=&#34;ch8_funct&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;take_away&#34;&gt;Take_Away&lt;/h2&gt;
&lt;p&gt;Gradient descent is an optimization technique often used in machine learning and in this post, we built some intuition around how it works by applying it to a simple linear regression problem, favoring code over math (which we&amp;rsquo;ll return to in a later post). Gradient Descent is useful if you are expecting computational complexity due to the number of features or training instances.&lt;/p&gt;
&lt;p&gt;We placed gradient descent in context, in comparison to a more analytical approach, normal equation and the least squares method, both of which are non-iterative.&lt;/p&gt;
&lt;p&gt;Furthermore, we saw how the functions used in this post can be traced back to a previous post on 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;linear algebra&lt;/a&gt;, thus giving us a big picture view of how the building blocks of data science and an intuition for areas we&amp;rsquo;ll need to explore at a deeper, perhaps at a more mathematical, level.&lt;/p&gt;
&lt;p&gt;This post is part of an ongoing series where I document my progress through 
&lt;a href=&#34;https://joelgrus.com/2019/05/13/data-science-from-scratch-second-edition/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Data Science from Scratch by Joel Grus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./book_disclaim_ch8.png&#34; alt=&#34;book disclaim ch8&#34;&gt;&lt;/p&gt;
&lt;p&gt;For more content on data science, machine learning, R, Python, SQL and more, 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BBC Women of 2020</title>
      <link>/post/sunburst/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/post/sunburst/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/sequences/sequences.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/sunburst-binding/sunburst.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;load-libraries&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load Libraries&lt;/h2&gt;
&lt;p&gt;The two main libraries are &lt;code&gt;tidyverse&lt;/code&gt; (mostly &lt;code&gt;dplyr&lt;/code&gt; so you can just load that if you want) and &lt;code&gt;sunburstR&lt;/code&gt;. There are other packages for sunburst plots including: &lt;a href=&#34;https://plotly.com/r/sunburst-charts/&#34;&gt;plotly&lt;/a&gt; and &lt;a href=&#34;https://github.com/didacs/ggsunburst&#34;&gt;ggsunburst (of ggplot)&lt;/a&gt;, but weâll explore &lt;a href=&#34;https://www.rdocumentation.org/packages/sunburstR/versions/2.1.5/topics/sunburst&#34;&gt;sunburstR&lt;/a&gt; in this post.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(sunburstR)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;load-data-explore&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load Data &amp;amp; Explore&lt;/h2&gt;
&lt;p&gt;The data is from &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-12-08/readme.md&#34;&gt;week 50 of TidyTuesday&lt;/a&gt;, exploring the BBCâs top 100 influential women of 2020.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;women &amp;lt;- read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-12-08/women.csv&amp;#39;)

head(women)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;add-continents&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Add Continents&lt;/h2&gt;
&lt;p&gt;The original dataset organized 100 women by category, country, role and description. I found that for employing the sunburst plot, I would want to group countries together by continents.&lt;/p&gt;
&lt;p&gt;I manually added country names to continent vectors, then added a new column to the &lt;code&gt;women&lt;/code&gt; dataframe to conditionally add continent name.&lt;/p&gt;
&lt;p&gt;We could then focus on six continents rather than 65 separate countries.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# add continent as character vector
asia &amp;lt;-  c(&amp;#39;Afghanistan&amp;#39;, &amp;#39;Bangladesh&amp;#39;, &amp;#39;China&amp;#39;, &amp;#39;Exiled Uighur from Ghulja (in Chinese, Yining)&amp;#39;, &amp;#39;Hong Kong&amp;#39;, &amp;#39;India&amp;#39;, &amp;#39;Indonesia&amp;#39;, &amp;#39;Iran&amp;#39;, &amp;#39;Iraq/UK&amp;#39;, &amp;#39;Japan&amp;#39;, &amp;#39;Kyrgyzstan&amp;#39;, &amp;#39;Lebanon&amp;#39;, &amp;#39;Malaysia&amp;#39;, &amp;#39;Myanmar&amp;#39;, &amp;#39;Nepal&amp;#39;, &amp;#39;Pakistan&amp;#39;, &amp;#39;Singapore&amp;#39;, &amp;#39;South Korea&amp;#39;, &amp;#39;Syria&amp;#39;, &amp;#39;Thailand&amp;#39;, &amp;#39;UAE&amp;#39;, &amp;#39;Vietnam&amp;#39;, &amp;#39;Yemen&amp;#39;)

south_america &amp;lt;- c(&amp;#39;Argentina&amp;#39;, &amp;#39;Brazil&amp;#39;, &amp;#39;Colombia&amp;#39;, &amp;#39;Ecuador&amp;#39;, &amp;#39;Peru&amp;#39;, &amp;#39;Venezuela&amp;#39;)
oceania &amp;lt;- c(&amp;#39;Australia&amp;#39;)
europe &amp;lt;- c(&amp;#39;Belarus&amp;#39;, &amp;#39;Finland&amp;#39;, &amp;#39;France&amp;#39;, &amp;#39;Germany&amp;#39;, &amp;#39;Italy&amp;#39;, &amp;#39;Netherlands&amp;#39;, &amp;#39;Northern Ireland&amp;#39;, &amp;#39;Norway&amp;#39;, &amp;#39;Republic of Ireland&amp;#39;, &amp;#39;Russia&amp;#39;, &amp;#39;Turkey&amp;#39;, &amp;#39;UK&amp;#39;, &amp;#39;Ukraine&amp;#39;, &amp;#39;Wales, UK&amp;#39;)
africa &amp;lt;- c(&amp;#39;Benin&amp;#39;, &amp;#39;DR Congo&amp;#39;, &amp;#39;Egypt&amp;#39;, &amp;#39;Ethiopia&amp;#39;, &amp;#39;Kenya&amp;#39;, &amp;#39;Morocco&amp;#39;, &amp;#39;Mozambique&amp;#39;, &amp;#39;Nigeria&amp;#39;, &amp;#39;Sierra Leone&amp;#39;, &amp;#39;Somalia&amp;#39;, &amp;#39;Somaliland&amp;#39;, &amp;#39;South Africa&amp;#39;, &amp;#39;Tanzania&amp;#39;, &amp;#39;Uganda&amp;#39;, &amp;#39;Zambia&amp;#39;, &amp;#39;Zimbabwe&amp;#39;)
north_america &amp;lt;- c(&amp;#39;El Salvador&amp;#39;, &amp;#39;Jamaica&amp;#39;, &amp;#39;Mexico&amp;#39;, &amp;#39;US&amp;#39;)

# add new column for continent
women &amp;lt;- women %&amp;gt;%
    mutate(continent = NA) 

# add continents to women dataframe
women$continent &amp;lt;- ifelse(women$country %in% asia, &amp;#39;Asia&amp;#39;, women$continent)
women$continent &amp;lt;- ifelse(women$country %in% south_america, &amp;#39;South America&amp;#39;, women$continent)
women$continent &amp;lt;- ifelse(women$country %in% oceania, &amp;#39;Oceania&amp;#39;, women$continent)
women$continent &amp;lt;- ifelse(women$country %in% europe, &amp;#39;Europe&amp;#39;, women$continent)
women$continent &amp;lt;- ifelse(women$country %in% africa, &amp;#39;Africa&amp;#39;, women$continent)
women$continent &amp;lt;- ifelse(women$country %in% north_america, &amp;#39;North America&amp;#39;, women$continent)

women&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-wrangling&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Wrangling&lt;/h2&gt;
&lt;p&gt;The key to using the &lt;code&gt;sunburstR&lt;/code&gt; package with this specific dataset is the wrangling that happens to filter by continents we created above. Weâll also want to get rid of dashes with &lt;code&gt;mutate_at&lt;/code&gt; as dashes are structurally needed to render the sunburst plots.&lt;/p&gt;
&lt;p&gt;Below, Iâve filtered the &lt;code&gt;women&lt;/code&gt; data frame into Africa and Asia (the same could be done for North and South America and Europe as well).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;two most important&lt;/strong&gt; operations here are the creation of the &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;V2&lt;/code&gt; columns that will later be parameters for rendering the sunburst plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Filter for Africa
africa_name &amp;lt;- women %&amp;gt;%
    select(continent, category, role, name) %&amp;gt;%
    # remove dash within dplyr pipe
    mutate_at(vars(3, 4), funs(gsub(&amp;quot;-&amp;quot;, &amp;quot;&amp;quot;, .))) %&amp;gt;% 
    filter(continent==&amp;#39;Africa&amp;#39;) %&amp;gt;%
    mutate(
        path = paste(continent, category, role, name, sep = &amp;quot;-&amp;quot;)
    ) %&amp;gt;%
    slice(2:100) %&amp;gt;%
    mutate(
        V2 = 1
    )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: `funs()` is deprecated as of dplyr 0.8.0.
## Please use a list of either functions or lambdas: 
## 
##   # Simple named list: 
##   list(mean = mean, median = median)
## 
##   # Auto named with `tibble::lst()`: 
##   tibble::lst(mean, median)
## 
##   # Using lambdas
##   list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))
## This warning is displayed once every 8 hours.
## Call `lifecycle::last_warnings()` to see where this warning was generated.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Filter for Asia
asia_name &amp;lt;- women %&amp;gt;%
    select(continent, category, role, name) %&amp;gt;%
    # remove dash within dplyr pipe
    mutate_at(vars(3, 4), funs(gsub(&amp;quot;-&amp;quot;, &amp;quot;&amp;quot;, .))) %&amp;gt;%
    filter(continent==&amp;#39;Asia&amp;#39;) %&amp;gt;%
    mutate(
        path = paste(continent, category, role, name, sep = &amp;quot;-&amp;quot;)
    ) %&amp;gt;%
    slice(2:100) %&amp;gt;%
    mutate(
        V2 = 1
    )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sunburst-africa&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sunburst: Africa&lt;/h2&gt;
&lt;p&gt;Ultimately, I found the information best presented by continent as the &lt;em&gt;base&lt;/em&gt; of the sunburst plot, followed by category, specific roles and the names of each of the 100 women honored by the BBC.&lt;/p&gt;
&lt;p&gt;Moreover, by presenting the data by continent, you can focus on just five specific color as you decide on a palette.&lt;/p&gt;
&lt;p&gt;I wouldnât recommend trying to pick a color for each role or name; it becomes too unweildy. Just pick five colors for the two inner most rings of the sunburst plot and itâll shuffle the rest of the colors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Africa
sunburst(data = data.frame(xtabs(V2~path, africa_name)), legend = FALSE,
         colors = c(&amp;quot;D99527&amp;quot;, &amp;quot;6F7239&amp;quot;, &amp;quot;CE4B3C&amp;quot;, &amp;quot;C8AC70&amp;quot;, &amp;quot;018A9D&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;sunburst html-widget&#34; id=&#34;htmlwidget-1&#34; style=&#34;width:672px;height:480px; position:relative;&#34;&gt;
&lt;div&gt;
&lt;div class=&#34;sunburst-main&#34;&gt;
&lt;div class=&#34;sunburst-sequence&#34;&gt;&lt;/div&gt;
&lt;div class=&#34;sunburst-chart&#34;&gt;
&lt;div class=&#34;sunburst-explanation&#34; style=&#34;visibility:hidden;&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sunburst-sidebar&#34;&gt;
&lt;input type=&#34;checkbox&#34; class=&#34;sunburst-togglelegend&#34; style=&#34;visibility:hidden;&#34;&gt;Legend&lt;/input&gt;
&lt;div class=&#34;sunburst-legend&#34; style=&#34;visibility:hidden;&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:{&#34;children&#34;:[{&#34;name&#34;:&#34;Africa&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Creativity&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Artist and curator&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Mulenga Kapwepwe&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Musician&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Angelique Kidjo&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Rapper&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Houda Abouz&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Singer/songwriter&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Bulelwa Mkutukana&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Writer and filmmaker&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Tsitsi Dangarembga&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;}],&#34;colname&#34;:&#34;X2&#34;},{&#34;name&#34;:&#34;Identity&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Filmmaker&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Uyaiedu  IkpeEtim&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Socialjustice activist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Josina Machel&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;}],&#34;colname&#34;:&#34;X2&#34;},{&#34;name&#34;:&#34;Knowledge&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Activist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Ishtar Lakhani&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Doctor&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Jemimah Kariuki&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Journalist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Douce Namwezi N&#39;Ibamba&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Lawyer&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Rebeca Gyumi&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Mental health expert&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Ethelreda NakimuliMpungu&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;}],&#34;colname&#34;:&#34;X2&#34;},{&#34;name&#34;:&#34;Leadership&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Activist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Aisha Yesufu&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Campaigner&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Nadeen Ashraf&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Climate activist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Vanessa Nakate&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Coptic nun&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Maggie Gobran&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Environmental activist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Phyllis Omido&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;FGM educator&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Ubah Ali&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Mayor&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Yvonne AkiSawyerr&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Peace activist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Ilwad Elman&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;}],&#34;colname&#34;:&#34;X2&#34;}],&#34;colname&#34;:&#34;X1&#34;}],&#34;name&#34;:&#34;root&#34;},&#34;options&#34;:{&#34;legendOrder&#34;:null,&#34;colors&#34;:[&#34;D99527&#34;,&#34;6F7239&#34;,&#34;CE4B3C&#34;,&#34;C8AC70&#34;,&#34;018A9D&#34;],&#34;valueField&#34;:&#34;size&#34;,&#34;percent&#34;:true,&#34;count&#34;:false,&#34;explanation&#34;:null,&#34;breadcrumb&#34;:[],&#34;legend&#34;:false,&#34;sortFunction&#34;:null,&#34;sumNodes&#34;:true}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;sunburst-asia&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sunburst: Asia&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Asia
sunburst(data = data.frame(xtabs(V2~path, asia_name)), legend = FALSE,
         colors = c(&amp;quot;#e6e0ae&amp;quot;, &amp;quot;#dfbc5e&amp;quot;, &amp;quot;#ee6146&amp;quot;, &amp;quot;#d73c37&amp;quot;, &amp;quot;#b51f09&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;sunburst html-widget&#34; id=&#34;htmlwidget-2&#34; style=&#34;width:672px;height:480px; position:relative;&#34;&gt;
&lt;div&gt;
&lt;div class=&#34;sunburst-main&#34;&gt;
&lt;div class=&#34;sunburst-sequence&#34;&gt;&lt;/div&gt;
&lt;div class=&#34;sunburst-chart&#34;&gt;
&lt;div class=&#34;sunburst-explanation&#34; style=&#34;visibility:hidden;&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sunburst-sidebar&#34;&gt;
&lt;input type=&#34;checkbox&#34; class=&#34;sunburst-togglelegend&#34; style=&#34;visibility:hidden;&#34;&gt;Legend&lt;/input&gt;
&lt;div class=&#34;sunburst-legend&#34; style=&#34;visibility:hidden;&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:{&#34;children&#34;:[{&#34;name&#34;:&#34;Asia&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Creativity&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Actor&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Mahira Khan&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;},{&#34;name&#34;:&#34;Michelle Yeoh&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Architect&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Chu Kim Duc&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Feminist activist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Nandar&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Filmmaker&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Waad  alKateab&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Landscape architect&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Kotchakorn Voraakhom&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Musician&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Isaivani&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Sake master brewer&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Miho Imada&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;}],&#34;colname&#34;:&#34;X2&#34;},{&#34;name&#34;:&#34;Identity&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Activist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Hayat Mirshad&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;},{&#34;name&#34;:&#34;Laleh Osmany&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;UN Women ambassador/model&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Cindy Bishop&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Writer&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Muyesser Abdulâehed Hendan&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;}],&#34;colname&#34;:&#34;X2&#34;},{&#34;name&#34;:&#34;Knowledge&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Activist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Febfi Setyawati&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Computational geneticist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Pardis Sabeti&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Crematorium technician&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Sapana Roka Magar&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Doctor&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Leo YeeSin&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Global health leader&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Sania Nishtar&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Microgrid manager&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Iman Ghaleb AlHamli&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Minister for Advanced Technologies&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Sarah AlAmiri&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Plant virologist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Safaa Kumari&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Public health expert&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Nisreen Alwan&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Robotics team leader&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Somaya Faruqi&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Teacher&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Rima Sultana Rimu&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Writer&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Fang Fang&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;}],&#34;colname&#34;:&#34;X2&#34;},{&#34;name&#34;:&#34;Leadership&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Athlete&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Manasi Joshi&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Climate activist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Ridhima Pandey&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Disability activist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Gulnaz Zhuzbaeva&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Environmental campaigner&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Salsabila Khairunnisa&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Human rights activist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Nasrin Sotoudeh&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;KDCA Commissioner&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Jeong Eunkyeong&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Prodemocracy activist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Agnes Chow&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Protest leader&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Bilkis&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;},{&#34;name&#34;:&#34;Student activist&#34;,&#34;children&#34;:[{&#34;name&#34;:&#34;Panusaya Sithijirawattanakul&#34;,&#34;size&#34;:1,&#34;colname&#34;:&#34;X4&#34;}],&#34;colname&#34;:&#34;X3&#34;}],&#34;colname&#34;:&#34;X2&#34;}],&#34;colname&#34;:&#34;X1&#34;}],&#34;name&#34;:&#34;root&#34;},&#34;options&#34;:{&#34;legendOrder&#34;:null,&#34;colors&#34;:[&#34;#e6e0ae&#34;,&#34;#dfbc5e&#34;,&#34;#ee6146&#34;,&#34;#d73c37&#34;,&#34;#b51f09&#34;],&#34;valueField&#34;:&#34;size&#34;,&#34;percent&#34;:true,&#34;count&#34;:false,&#34;explanation&#34;:null,&#34;breadcrumb&#34;:[],&#34;legend&#34;:false,&#34;sortFunction&#34;:null,&#34;sumNodes&#34;:true}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;And thatâs it for visualizing the BBCâs top 100 influential women in 2020 with the &lt;code&gt;sunburstR&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;For more content on data science, visualization, in R and Python, &lt;a href=&#34;https://twitter.com/paulapivat&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Science from Scratch (ch7) - Hypothesis and Inference</title>
      <link>/post/dsfs_7/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/post/dsfs_7/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#central_limit_theorem&#34;&gt;Central Limit Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#hypothesis_testing&#34;&gt;Hypothesis Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#p_values&#34;&gt;p-Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#confidence_intervals&#34;&gt;Confidence Intervals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#connecting_dots&#34;&gt;Connecting dots with Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This is a continuation of my progress through Data Science from Scratch by Joel Grus. We&amp;rsquo;ll use a classic coin-flipping example in this post because it is simple to illustrate with both &lt;strong&gt;concept&lt;/strong&gt; and &lt;strong&gt;code&lt;/strong&gt;. The goal of this post is to connect the dots between several concepts including the Central Limit Theorem, Hypothesis Testing, p-Values and confidence intervals, using python to build our intuition.&lt;/p&gt;
&lt;h2 id=&#34;central_limit_theorem&#34;&gt;Central_Limit_Theorem&lt;/h2&gt;
&lt;p&gt;Terms like &amp;ldquo;null&amp;rdquo; and &amp;ldquo;alternative&amp;rdquo; hypothesis are used quite frequently, so let&amp;rsquo;s set some context. The &amp;ldquo;null&amp;rdquo; is the &lt;strong&gt;default&lt;/strong&gt; position. The &amp;ldquo;alternative&amp;rdquo;, alt for short, is something we&amp;rsquo;re &lt;em&gt;comparing to&lt;/em&gt; the default (null).&lt;/p&gt;
&lt;p&gt;The classic coin-flipping exercise is to test the &lt;em&gt;fairness&lt;/em&gt; off a coin. If a coin is fair, it&amp;rsquo;ll land on heads 50% of the time (and tails 50% of the time). Let&amp;rsquo;s translate into hypothesis testing language:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Null Hypothesis&lt;/strong&gt;: Probability of landing on Heads = 0.5.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alt Hypothesis&lt;/strong&gt;: Probability of landing on Heads != 0.5.&lt;/p&gt;
&lt;p&gt;Each coin flip is a &lt;strong&gt;Bernoulli trial&lt;/strong&gt;, which is an experiment with two outcomes - outcome 1, &amp;ldquo;success&amp;rdquo;, (probability &lt;em&gt;p&lt;/em&gt;) and outcome 0, &amp;ldquo;fail&amp;rdquo; (probability &lt;em&gt;p - 1&lt;/em&gt;). The reason it&amp;rsquo;s a Bernoulli trial is because there are only two outcome with a coin flip (heads or tails). Read more about 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Bernoulli_trial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bernoulli here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the code for a single Bernoulli Trial:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def bernoulli_trial(p: float) -&amp;gt; int:
    &amp;quot;&amp;quot;&amp;quot;Returns 1 with probability p and 0 with probability 1-p&amp;quot;&amp;quot;&amp;quot;
    return 1 if random.random() &amp;lt; p else 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you &lt;strong&gt;sum the independent Bernoulli trials&lt;/strong&gt;, you get a &lt;strong&gt;Binomial(n,p)&lt;/strong&gt; random variable, a variable whose &lt;em&gt;possible&lt;/em&gt; values have a probability distribution. The &lt;strong&gt;central limit theorem&lt;/strong&gt; says as &lt;strong&gt;n&lt;/strong&gt; or the &lt;em&gt;number&lt;/em&gt; of independent Bernoulli trials get large, the Binomial distribution approaches a normal distribution.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the code for when you sum all the Bernoulli Trials to get a Binomial random variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def binomial(n: int, p: float) -&amp;gt; int:
    &amp;quot;&amp;quot;&amp;quot;Returns the sum of n bernoulli(p) trials&amp;quot;&amp;quot;&amp;quot;
    return sum(bernoulli_trial(p) for _ in range(n))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: A single &amp;lsquo;success&amp;rsquo; in a Bernoulli trial is &amp;lsquo;x&amp;rsquo;. Summing up all those x&amp;rsquo;s into X, is a Binomial random variable. Success doesn&amp;rsquo;t imply desirability, nor does &amp;ldquo;failure&amp;rdquo; imply undesirability. They&amp;rsquo;re just terms to count the cases we&amp;rsquo;re looking for (i.e., number of heads in multiple coin flips to assess a coin&amp;rsquo;s fairness).&lt;/p&gt;
&lt;p&gt;Given that our &lt;strong&gt;null&lt;/strong&gt; is (p = 0.5) and &lt;strong&gt;alt&lt;/strong&gt; is (p != 0.5), we can run some independent bernoulli trials, then sum them up to get a binomial random variable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./independent_coin_flips.png&#34; alt=&#34;independent_coin_flips&#34;&gt;&lt;/p&gt;
&lt;p&gt;Each &lt;code&gt;bernoulli_trial&lt;/code&gt; is an experiment with either 0 or 1 as outcomes. The &lt;code&gt;binomial&lt;/code&gt; function sums up &lt;strong&gt;n&lt;/strong&gt; bernoulli(0.5) trails. We ran both twice and got different results. Each bernoulli experiment can be a success(1) or faill(0); summing up into a binomial random variable means we&amp;rsquo;re taking the probability p(0.5) &lt;em&gt;that a coin flips head&lt;/em&gt; and we ran the experiment 1,000 times to get a random binomial variable.&lt;/p&gt;
&lt;p&gt;The first 1,000 flips we got 510. The second 1,000 flips we got 495. We can repeat this process many times to get a &lt;em&gt;distribution&lt;/em&gt;. We can plot this distribution to reinforce our understanding. To this we&amp;rsquo;ll use &lt;code&gt;binomial_histogram&lt;/code&gt; function. This function picks points from a Binomial(n,p) random variable and plots their histogram.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import Counter
import matplotlib.pyplot as plt

def normal_cdf(x: float, mu: float = 0, sigma: float = 1) -&amp;gt; float:
    return (1 + math.erf((x - mu) / math.sqrt(2) / sigma)) / 2
    

def binomial_histogram(p: float, n: int, num_points: int) -&amp;gt; None:
    &amp;quot;&amp;quot;&amp;quot;Picks points from a Binomial(n, p) and plots their histogram&amp;quot;&amp;quot;&amp;quot;
    data = [binomial(n, p) for _ in range(num_points)]
    # use a bar chart to show the actual binomial samples
    histogram = Counter(data)
    plt.bar([x - 0.4 for x in histogram.keys()],
            [v / num_points for v in histogram.values()],
            0.8,
            color=&#39;0.75&#39;)
    mu = p * n
    sigma = math.sqrt(n * p * (1 - p))
    # use a line chart to show the normal approximation
    xs = range(min(data), max(data) + 1)
    ys = [normal_cdf(i + 0.5, mu, sigma) -
          normal_cdf(i - 0.5, mu, sigma) for i in xs]
    plt.plot(xs, ys)
    plt.title(&amp;quot;Binomial Distribution vs. Normal Approximation&amp;quot;)
    plt.show()

# call function   
binomial_histogram(0.5, 1000, 10000)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This plot is then rendered:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./binomial_coin_fairness.png&#34; alt=&#34;binomial_coin_fairness&#34;&gt;&lt;/p&gt;
&lt;p&gt;What we did was sum up independent &lt;code&gt;bernoulli_trial&lt;/code&gt;(s) of 1,000 coin flips, where the probability of head is p = 0.5, to create a &lt;code&gt;binomial&lt;/code&gt; random variable. We then repeated this a large number of times (N = 10,000), then plotted a histogram of the distribution of all binomial random variables. And because we did it so many times, it approximates the standard normal distribution (smooth bell shape curve).&lt;/p&gt;
&lt;p&gt;Just to demonstrate how this works, we can generate several &lt;code&gt;binomial&lt;/code&gt; random variables:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./several_binomial.png&#34; alt=&#34;several_binomial&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we do this 10,000 times, we&amp;rsquo;ll generate the above histogram. You&amp;rsquo;ll notice that because we are testing whether the coin is fair, the probability of heads (success) &lt;em&gt;should&lt;/em&gt; be at 0.5 and, from 1,000 coin flips, the &lt;strong&gt;mean&lt;/strong&gt;(&lt;code&gt;mu&lt;/code&gt;) should be a 500.&lt;/p&gt;
&lt;p&gt;We have another function that can help us calculate &lt;code&gt;normal_approximation_to_binomial&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import random
from typing import Tuple
import math


def normal_approximation_to_binomial(n: int, p: float) -&amp;gt; Tuple[float, float]:
    &amp;quot;&amp;quot;&amp;quot;Return mu and sigma corresponding to a Binomial(n, p)&amp;quot;&amp;quot;&amp;quot;
    mu = p * n
    sigma = math.sqrt(p * (1 - p) * n)
    return mu, sigma
    
# call function
# (500.0, 15.811388300841896)
normal_approximation_to_binomial(1000, 0.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When calling the function with our parameters, we get a mean &lt;code&gt;mu&lt;/code&gt; of 500 (from 1,000 coin flips) and a standard deviation &lt;code&gt;sigma&lt;/code&gt; of 15.8114. Which means that 68% of the time, the binomial random variable will be 500 +/- 15.8114 and 95% of the time it&amp;rsquo;ll be 500 +/- 31.6228 (see 
&lt;a href=&#34;https://en.wikipedia.org/wiki/68%E2%80%9395%E2%80%9399.7_rule&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;68-95-99.7 rule&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;hypothesis_testing&#34;&gt;Hypothesis_Testing&lt;/h2&gt;
&lt;p&gt;Now that we have seen the results of our &amp;ldquo;coin fairness&amp;rdquo; experiment plotted on a binomial distribution (approximately normal), we will be, for the purpose of testing our hypothesis, be interested in the probability of its realized value (binomial random variable) lies &lt;strong&gt;within or outside a particular interval&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This means we&amp;rsquo;ll be interested in questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What&amp;rsquo;s the probability that the binomial(n,p) is below a threshold?&lt;/li&gt;
&lt;li&gt;Above a threshold?&lt;/li&gt;
&lt;li&gt;Between an interval?&lt;/li&gt;
&lt;li&gt;Outside an interval?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, the &lt;code&gt;normal_cdf&lt;/code&gt; (normal cummulative distribution function), which we learned in a 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_6/#distributions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous post&lt;/a&gt;, &lt;em&gt;is&lt;/em&gt; the probability of a variable being &lt;em&gt;below&lt;/em&gt; a certain threshold.&lt;/p&gt;
&lt;p&gt;Here, the probability of X (success or heads for a &amp;lsquo;fair coin&amp;rsquo;) is at 0.5 (&lt;code&gt;mu&lt;/code&gt; = 500, &lt;code&gt;sigma&lt;/code&gt; = 15.8113), and we want to find the probability that X falls below 490, which comes out to roughly 26%&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;normal_probability_below = normal_cdf

# probability that binomal random variable, mu = 500, sigma = 15.8113, is below 490

# 0.26354347477247553
normal_probability_below(490, 500, 15.8113)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the other hand, the &lt;code&gt;normal_probability_above&lt;/code&gt;, probability that X falls &lt;em&gt;above&lt;/em&gt; 490 would be
1 - 0.2635 = 0.7365 or roughly 74%.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def normal_probability_above(lo: float,
                             mu: float = 0,
                             sigma: float = 1) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;The probability that an N(mu, sigma) is greater than lo.&amp;quot;&amp;quot;&amp;quot;
    return 1 - normal_cdf(lo, mu, sigma)
    
# 0.7364565252275245
normal_probability_above(490, 500, 15.8113)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make sense of this we need to recall the binomal distribution, that approximates the normal distribution, but we&amp;rsquo;ll draw a vertical line at 490.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./binomial_vline.png&#34; alt=&#34;binomial_vline&#34;&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re asking, given the binomal distribution with &lt;code&gt;mu&lt;/code&gt; 500 and &lt;code&gt;sigma&lt;/code&gt; at 15.8113, what is the probability that a binomal random variable falls below the threshold (left of the line); the answer is approximately 26% and correspondingly falling above the threshold (right of the line), is approximately 74%.&lt;/p&gt;
&lt;h3 id=&#34;between-interval&#34;&gt;Between interval&lt;/h3&gt;
&lt;p&gt;We may also wonder what the probability of a binomial random variable &lt;strong&gt;falling between 490 and 520&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./binomial_2_vline.png&#34; alt=&#34;binomial_2_vline&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here is the function to calculate this probability and it comes out to approximately 63%. &lt;em&gt;note&lt;/em&gt;: Bear in mind the full area under the curve is 1.0 or 100%.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def normal_probability_between(lo: float,
                               hi: float,
                               mu: float = 0,
                               sigma: float = 1) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;The probability that an N(mu, sigma) is between lo and hi.&amp;quot;&amp;quot;&amp;quot;
    return normal_cdf(hi, mu, sigma) - normal_cdf(lo, mu, sigma)

# 0.6335061861416337
normal_probability_between(490, 520, 500, 15.8113)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, the area outside of the interval should be 1 - 0.6335 = 0.3665:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def normal_probability_outside(lo: float,
                               hi: float,
                               mu: float = 0,
                               sigma: float = 1) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;The probability that an N(mu, sigma) is not between lo and hi.&amp;quot;&amp;quot;&amp;quot;
    return 1 - normal_probability_between(lo, hi, mu, sigma)
    
# 0.3664938138583663
normal_probability_outside(490, 520, 500, 15.8113)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition to the above, we may also be interested in finding (symmetric) intervals around the mean that account for a &lt;em&gt;certain level of likelihood&lt;/em&gt;, for example, 60% probability centered around the mean.&lt;/p&gt;
&lt;p&gt;For this operation we would use the &lt;code&gt;inverse_normal_cdf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def inverse_normal_cdf(p: float,
                       mu: float = 0,
                       sigma: float = 1,
                       tolerance: float = 0.00001) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;Find approximate inverse using binary search&amp;quot;&amp;quot;&amp;quot;
    # if not standard, compute standard and rescale
    if mu != 0 or sigma != 1:
        return mu + sigma * inverse_normal_cdf(p, tolerance=tolerance)
    low_z = -10.0     # normal_cdf(-10) is (very close to) 0
    hi_z = 10.0       # normal_cdf(10) is (very close to) 1
    while hi_z - low_z &amp;gt; tolerance:
        mid_z = (low_z + hi_z) / 2      # Consider the midpoint
        mid_p = normal_cdf(mid_z)       # and the CDF&#39;s value there
        if mid_p &amp;lt; p:
            low_z = mid_z               # Midpoint too low, search above it
        else:
            hi_z = mid_z                # Midpoint too high, search below it
    return mid_z
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First we&amp;rsquo;d have to find the cutoffs where the upper and lower tails each contain 20% of the probability. We calculate &lt;code&gt;normal_upper_bound&lt;/code&gt; and &lt;code&gt;normal_lower_bound&lt;/code&gt; and use those to calculate the &lt;code&gt;normal_two_sided_bounds&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def normal_upper_bound(probability: float,
                       mu: float = 0,
                       sigma: float = 1) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;Returns the z for which P(Z &amp;lt;= z) = probability&amp;quot;&amp;quot;&amp;quot;
    return inverse_normal_cdf(probability, mu, sigma)


def normal_lower_bound(probability: float,
                       mu: float = 0,
                       sigma: float = 1) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;Returns the z for which P(Z &amp;gt;= z) = probability&amp;quot;&amp;quot;&amp;quot;
    return inverse_normal_cdf(1 - probability, mu, sigma)


def normal_two_sided_bounds(probability: float,
                            mu: float = 0,
                            sigma: float = 1) -&amp;gt; Tuple[float, float]:
    &amp;quot;&amp;quot;&amp;quot;
    Returns the symmetric (about the mean) bounds
    that contain the specified probability
    &amp;quot;&amp;quot;&amp;quot;
    tail_probability = (1 - probability) / 2
    # upper bound should have tail_probability above it
    upper_bound = normal_lower_bound(tail_probability, mu, sigma)
    # lower bound should have tail_probability below it
    lower_bound = normal_upper_bound(tail_probability, mu, sigma)
    return lower_bound, upper_bound
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So if we wanted to know what the cutoff points were for a 60% probability around the mean and standard deviation (&lt;code&gt;mu&lt;/code&gt; = 500, &lt;code&gt;sigma&lt;/code&gt; = 15.8113), it would be between &lt;strong&gt;486.69 and 513.31&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Said differently, this means roughly 60% of the time, we can expect the binomial random variable to fall between 486 and 513.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# (486.6927811021805, 513.3072188978196)
normal_two_sided_bounds(0.60, 500, 15.8113)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;significance-and-power&#34;&gt;Significance and Power&lt;/h3&gt;
&lt;p&gt;Now that we have a handle on the binomial normal distribution, thresholds (left and right of the mean), and cut-off points, we want to make a &lt;strong&gt;decision about significance&lt;/strong&gt;. Probably the most important part of &lt;em&gt;statistical significance&lt;/em&gt; is that it is a decision to be made, not a standard that is externally set.&lt;/p&gt;
&lt;p&gt;Significance is a decision about how willing we are to make a &lt;em&gt;type 1&lt;/em&gt; error (false positive), which we explored in a 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_6/#applying_bayes_theorem&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous post&lt;/a&gt;. The convention is to set it to a 5% or 1% willingness to make a type 1 error. Suppose we say 5%.&lt;/p&gt;
&lt;p&gt;We would say that out of 1,000 coin flips, 95% of the time, we&amp;rsquo;d get between 469 and 531 heads on a &amp;ldquo;fair coin&amp;rdquo; and 5% of the time, outside of this 469-531 range.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# (469.0104394712448, 530.9895605287552)
normal_two_sided_bounds(0.95, 500, 15.8113)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we recall our hypotheses:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Null Hypothesis&lt;/strong&gt;: Probability of landing on Heads = 0.5 (fair coin)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alt Hypothesis&lt;/strong&gt;: Probability of landing on Heads != 0.5 (biased coin)&lt;/p&gt;
&lt;p&gt;Each binomial distribution (test) that consist of 1,000 bernoulli trials, each &lt;em&gt;test&lt;/em&gt; where the number of heads falls outside the range of 469-531, we&amp;rsquo;ll &lt;strong&gt;reject the null&lt;/strong&gt; that the coin is fair. And we&amp;rsquo;ll be wrong (false positive), 5% of the time. It&amp;rsquo;s a false positive when we &lt;strong&gt;incorrectly reject&lt;/strong&gt; the null hypothesis, when it&amp;rsquo;s actually true.&lt;/p&gt;
&lt;p&gt;We also want to avoid making a type-2 error (false negative), where we &lt;strong&gt;fail to reject&lt;/strong&gt; the null hypothesis, when it&amp;rsquo;s actually false.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Its important to keep in mind that terms like &lt;em&gt;significance&lt;/em&gt; and &lt;em&gt;power&lt;/em&gt; are used to describe &lt;strong&gt;tests&lt;/strong&gt;, in our case, the test of whether a coin is fair or not. Each test is the sum of 1,000 independent bernoulli trials.&lt;/p&gt;
&lt;p&gt;For a &amp;ldquo;test&amp;rdquo; that has a 95% significance, we&amp;rsquo;ll assume that out of a 1,000 coin flips, it&amp;rsquo;ll land on heads between 469-531 times and we&amp;rsquo;ll determine the coin is fair. For the 5% of the time it lands outside of this range, we&amp;rsquo;ll determine the coin to be &amp;ldquo;unfair&amp;rdquo;, but we&amp;rsquo;ll be wrong because it actually is fair.&lt;/p&gt;
&lt;p&gt;To calculate the power of the test, we&amp;rsquo;ll take the assumed &lt;code&gt;mu&lt;/code&gt; and &lt;code&gt;sigma&lt;/code&gt; with a 95% bounds (based on the assumption that the probability of the coin landing on heads is 0.5 or 50% - a fair coin). We&amp;rsquo;ll determine the lower and upper bounds:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lo, hi = normal_two_sided_bounds(0.95, mu_0, sigma_0)
lo # 469.01026640487555
hi # 530.9897335951244
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if the coin was &lt;em&gt;actually biased&lt;/em&gt;, we should reject the null, but we fail to. Let&amp;rsquo;s suppose the actual probability that the coin lands on heads is 55% ( &lt;strong&gt;biased&lt;/strong&gt; towards head):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mu_1, sigma_1 = normal_approximation_to_binomial(1000, 0.55)
mu_1    # 550.0
sigma_1 # 15.732132722552274
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the same range 469 - 531, where the coin is assumed &amp;lsquo;fair&amp;rsquo; with &lt;code&gt;mu&lt;/code&gt; at 500 and &lt;code&gt;sigma&lt;/code&gt; at 15.8113:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./95sig_binomial.png&#34; alt=&#34;95sig_binomial&#34;&gt;&lt;/p&gt;
&lt;p&gt;If the coin, in fact, had a bias towards head (p = 0.55), the distribution would shift right, but if our 95% significance test remains the same, we get:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./type2_error.png&#34; alt=&#34;type2_error&#34;&gt;&lt;/p&gt;
&lt;p&gt;The probability of making a type-2 error is 11.345%. This is the probability that we&amp;rsquo;re see that the coin&amp;rsquo;s distribution is within the previous interval 469-531, thinking we should accept the null hypothesis (that the coin is fair), but in actuality, failing to see that the distribution has shifted to the coin having a &lt;em&gt;bias&lt;/em&gt; towards heads.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 0.11345199870463285
type_2_probability = normal_probability_between(lo, hi, mu_1, sigma_1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The other way to arrive at this is to find the probability, under the &lt;em&gt;new&lt;/em&gt; &lt;code&gt;mu&lt;/code&gt; and &lt;code&gt;sigma&lt;/code&gt; (new distribution), that X (number of successes) will fall &lt;em&gt;below&lt;/em&gt; 531.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 0.11357762975476304
normal_probability_below(531, mu_1, sigma_1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the probability of making a type-2 error or the probability that the &lt;em&gt;new&lt;/em&gt; distribution falls below 531 is approximately 11.3%.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;power to detect&lt;/strong&gt; a type-2 error is 1.00 minus the probability of a type-2 error (1 - 0.113 = 0.887), or 88.7%.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;power = 1 - type_2_probability # 0.8865480012953671
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we may be interested in &lt;strong&gt;increasing power&lt;/strong&gt; to detect a type-2 error. Instead of using a &lt;code&gt;normal_two_sided_bounds&lt;/code&gt; function to find the cut-off points (i.e., 469 and 531), we could use a &lt;em&gt;one-sided test&lt;/em&gt; that rejects the null hypothesis (&amp;lsquo;fair coin&amp;rsquo;) when X (number of heads on a coin-flip) is much larger than 500.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the code, using &lt;code&gt;normal_upper_bound&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 526.0073585242053
hi = normal_upper_bound(0.95, mu_0, sigma_0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means shifting the upper bounds from 531 to 526, providing more probability in the upper tail. This means the probability of a type-2 error goes down from 11.3 to 6.3.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./increase_power.png&#34; alt=&#34;increase_power&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# previous probability of type-2 error
# 0.11357762975476304
normal_probability_below(531, mu_1, sigma_1)


# new probability of type-2 error
# 0.06356221447122662
normal_probability_below(526, mu_1, sigma_1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the new (stronger) &lt;strong&gt;power to detect&lt;/strong&gt; type-2 error is 1.0 - 0.064 = 0.936 or 93.6% (up from 88.7% above).&lt;/p&gt;
&lt;h2 id=&#34;p_values&#34;&gt;p_values&lt;/h2&gt;
&lt;p&gt;p-Values represent &lt;em&gt;another way&lt;/em&gt; of deciding whether to accept or reject the Null Hypothesis. Instead of choosing bounds, thresholds or cut-off points, we could compute the probability, assuming the Null Hypothesis is true, that we would see a value &lt;em&gt;as extreme as&lt;/em&gt; the one we just observed.&lt;/p&gt;
&lt;p&gt;Here is the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def two_sided_p_values(x: float, mu: float = 0, sigma: float = 1) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;
    How likely are we to see a value at least as extreme as x (in either
    direction) if our values are from an N(mu, sigma)?
    &amp;quot;&amp;quot;&amp;quot;
    if x &amp;gt;= mu:
        # x is greater than the mean, so the tail is everything greater than x
        return 2 * normal_probability_above(x, mu, sigma)
    else:
        # x is less than the mean, so the tail is everything less than x
        return 2 * normal_probability_below(x, mu, sigma)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to compute, assuming we have a &amp;ldquo;fair coin&amp;rdquo; (&lt;code&gt;mu&lt;/code&gt; = 500, &lt;code&gt;sigma&lt;/code&gt; = 15.8113), what is the probability of seeing a value like 530? (&lt;strong&gt;note&lt;/strong&gt;: We use 529.5 instead of 530 below due to 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Continuity_correction&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;continuity correction&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Answer: approximately 6.2%&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 0.06207721579598835
two_sided_p_values(529.5, mu_0, sigma_0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The p-value, 6.2% is higher than our (hypothetical) 5% significance, so we don&amp;rsquo;t reject the null. On the other hand, if X was slightly more extreme, 532, the probability of seeing that value would be approximately 4.3%, which is less than 5% significance, so we would reject the null.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 0.04298479507085862
two_sided_p_values(532, mu_0, sigma_0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For one-sided tests, we would use the &lt;code&gt;normal_probability_above&lt;/code&gt; and &lt;code&gt;normal_probability_below&lt;/code&gt; functions created above:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;upper_p_value = normal_probability_above
lower_p_value = normal_probability_below
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Under the &lt;code&gt;two_sided_p_values&lt;/code&gt; test, the extreme value of 529.5 had a probability of 6.2% of showing up, but not low enough to reject the null hypothesis.&lt;/p&gt;
&lt;p&gt;However, with a one-sided test, &lt;code&gt;upper_p_value&lt;/code&gt; for the same threshold is now 3.1% and we would reject the null hypothesis.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 0.031038607897994175
upper_p_value(529.5, mu_0, sigma_0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;confidence_intervals&#34;&gt;Confidence_Intervals&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;third&lt;/em&gt; approach to deciding whether to accept or reject the null is to use confidence intervals. We&amp;rsquo;ll use the 530 as we did in the p-Values example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;p_hat = 530/1000
mu = p_hat
sigma = math.sqrt(p_hat * (1 - p_hat) / 1000) # 0.015782902141241326

# (0.4990660982192851, 0.560933901780715)
normal_two_sided_bounds(0.95, mu, sigma)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The confidence interval for a coin flipping heads 530 (out 1,000) times is (0.4991, 0.5609). Since this interval &lt;strong&gt;contains&lt;/strong&gt; the p = 0.5 (probability of heads 50% of the time, assuming a fair coin), we do not reject the null.&lt;/p&gt;
&lt;p&gt;If the extreme value were &lt;em&gt;more&lt;/em&gt; extreme at 540, we would arrive at a different conclusion:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;p_hat = 540/1000
mu = p_hat
sigma = math.sqrt(p_hat * (1 - p_hat) / 1000)

(0.5091095927295919, 0.5708904072704082)
normal_two_sided_bounds(0.95, mu, sigma)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we would be 95% confident that the mean of this distribution is contained between 0.5091 and 0.5709 and this &lt;strong&gt;does not&lt;/strong&gt; contain 0.500 (albiet by a slim margin), so we reject the null hypothesis that this is a fair coin.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: Confidence intervals are about the &lt;em&gt;interval&lt;/em&gt; not probability p. We interpret the confidence interval as, if you were to repeat the experiment many times, 95% of the time, the &amp;ldquo;true&amp;rdquo; parameter, in our example p = 0.5, would lie within the observed confidence interval.&lt;/p&gt;
&lt;h2 id=&#34;connecting_dots&#34;&gt;Connecting_Dots&lt;/h2&gt;
&lt;p&gt;We used several python functions to build intuition around statistical hypothesis testing. To higlight this &amp;ldquo;from scratch&amp;rdquo; aspect of the book here is a diagram tying together the various python function used in this post:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./connecting_dots.png&#34; alt=&#34;connecting_dots&#34;&gt;&lt;/p&gt;
&lt;p&gt;This post is part of an ongoing series where I document my progress through 
&lt;a href=&#34;https://joelgrus.com/2019/05/13/data-science-from-scratch-second-edition/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Data Science from Scratch by Joel Grus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./book_disclaimer.png&#34; alt=&#34;book_disclaimer&#34;&gt;&lt;/p&gt;
&lt;p&gt;For more content on data science, machine learning, R, Python, SQL and more, 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Statistics &amp; Probability in Code</title>
      <link>/post/statistics_probability/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/post/statistics_probability/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#permutations&#34;&gt;Permutations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Itertools&lt;/code&gt; are a core set of fast, memory efficient tools for creating iterators for efficient looping (read the 
&lt;a href=&#34;https://docs.python.org/3/library/itertools.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt; here).&lt;/p&gt;
&lt;h2 id=&#34;itertools-permutations&#34;&gt;Itertools Permutations&lt;/h2&gt;
&lt;p&gt;One (of many) uses for &lt;code&gt;itertools&lt;/code&gt; is to create a &lt;code&gt;permutations()&lt;/code&gt; function that will return all possible combinations of items in a list.&lt;/p&gt;
&lt;p&gt;I was working on a project that involved user funnels with different stages and we were wondering how many different &amp;ldquo;paths&amp;rdquo; a user &lt;em&gt;could&lt;/em&gt; take, so this was naturally a good fit for using &lt;strong&gt;permutations&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./sample_funnel.png&#34; alt=&#34;sample_funnel&#34;&gt;
&lt;em&gt;Sample Funnel&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In our hypothetical example, we&amp;rsquo;re looking at a funnel with three stages for a total of 6 permutations. Here&amp;rsquo;s the formula:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./permutation_formula.png&#34; alt=&#34;permutation_formula&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using a sales/marketing funnel, you&amp;rsquo;ll have in mind what your funnel would look like so you may &lt;strong&gt;not&lt;/strong&gt; want all possible paths, but if you&amp;rsquo;re interested in exploring potentially &lt;em&gt;overlooked&lt;/em&gt; paths, read on.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the python 
&lt;a href=&#34;https://docs.python.org/3.6/library/itertools.html#itertools.permutations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt; for &lt;code&gt;itertools&lt;/code&gt;, and &lt;code&gt;permutations&lt;/code&gt; specifically. We&amp;rsquo;ll break down the code to better understand what&amp;rsquo;s going on in this function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt; I found a clearer alternative after the fact. Feel free to skip to the final section below, although there is value in comparing the two versions.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll start off with the &lt;code&gt;iterable&lt;/code&gt; which is a &lt;code&gt;list&lt;/code&gt; with three strings. The &lt;code&gt;permutations&lt;/code&gt; function takes in two parameters, the &lt;code&gt;iterable&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt; which is the number of items from the list that we&amp;rsquo;re interested in finding the combination of. If we have three items in the list, we generally want to find &lt;em&gt;all possible&lt;/em&gt; combinations of those three items.&lt;/p&gt;
&lt;p&gt;Here is the code, and subsequent breakdown:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# list of length 3
list1 = [&#39;stage 1&#39;, &#39;stage 2&#39;, &#39;stage 3&#39;]

# iterable is the list
# r = number of items from the list to find combinations of


def permutations(iterable, r=None):
    &amp;quot;&amp;quot;&amp;quot;Find all possible order of a list of elements&amp;quot;&amp;quot;&amp;quot;
    # permutations(&#39;ABCD&#39;,2)--&amp;gt; AB AC AD BA BC BD CA CB CD DA DB DC
    # permutations(range(3))--&amp;gt; 012 021 102 120 201 210
    # permutations(list1, 6)--&amp;gt; ...720 permutations
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    if r &amp;gt; n:
        return
    indices = list(range(n))                     # [0, 1, 2]
    cycles = list(range(n, n-r, -1))             # [3, 2, 1]
    yield tuple(pool[i] for i in indices[:r])
    print(&amp;quot;Now entering while-loop \n&amp;quot;)
    while n:
        for i in reversed(range(r)):
            cycles[i] -= 1
            if cycles[i] == 0:
                indices[i:] = indices[i+1:] + indices[i:i+1]
                cycles[i] = n - i
            else:
                j = cycles[i]
                indices[i], indices[-j] = indices[-j], indices[i]
                yield tuple(pool[i] for i in indices[:r])
                print(&amp;quot;indices[:r]&amp;quot;, indices[:r])
                print(&amp;quot;pool[i]:&amp;quot;, tuple(pool[i] for i in indices[:r]))
                print(&amp;quot;n:&amp;quot;, n)
                break
        else:
            print(&amp;quot;return:&amp;quot;)
            return


#permutations(list1, 6)

perm = permutations(list1, 3)
count = 0

for p in perm:
    count += 1
    print(p)
print(&amp;quot;there are:&amp;quot;, count, &amp;quot;permutations.&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing we do is take the &lt;code&gt;iterable&lt;/code&gt; input parameter is turn it from a &lt;code&gt;list&lt;/code&gt; into a &lt;code&gt;tuple&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pool = tuple(iterable)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are several reasons to do this. First, &lt;code&gt;tuples&lt;/code&gt; are &lt;em&gt;faster&lt;/em&gt; than &lt;code&gt;lists&lt;/code&gt;; the &lt;code&gt;permutations()&lt;/code&gt; function will do several operations to the input so changing it to a &lt;code&gt;tuple&lt;/code&gt; allows faster operations and because &lt;code&gt;tuples&lt;/code&gt; are &lt;em&gt;immutable&lt;/em&gt;, we can do a bunch of different operations without fear that we might &lt;em&gt;inadvertently&lt;/em&gt; change the list.&lt;/p&gt;
&lt;p&gt;We then create &lt;code&gt;n&lt;/code&gt; from the length of &lt;code&gt;pool&lt;/code&gt; (in our case it&amp;rsquo;s 3) and the additional &lt;code&gt;r&lt;/code&gt; parameter, which defaults to &lt;code&gt;None&lt;/code&gt; is also 3 as we&amp;rsquo;re interested in seeing &lt;strong&gt;all combinations&lt;/strong&gt; of a list of three elements.&lt;/p&gt;
&lt;p&gt;We also have a line that ensures that &lt;code&gt;r&lt;/code&gt; can never be greater than the number of elements in the &lt;code&gt;iterable&lt;/code&gt; (list).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if r &amp;gt; n:
    return
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we create &lt;code&gt;indices&lt;/code&gt; and &lt;code&gt;cycles&lt;/code&gt;. Indices are basically the index of each item, starting with 0 to 2, for three items. Cycles uses &lt;code&gt;range(n, n-r, -1)&lt;/code&gt;, which in our case is &lt;code&gt;range(3, 3-3, -1)&lt;/code&gt;; this means &lt;strong&gt;start&lt;/strong&gt; at three and &lt;strong&gt;end&lt;/strong&gt; at zero, in -1 &lt;strong&gt;steps&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The next chunk of code is a &lt;code&gt;while-loop&lt;/code&gt; that will continue for the length of the list, &lt;code&gt;n&lt;/code&gt; (note the &lt;code&gt;break&lt;/code&gt; at the bottom to exit out of this loop).&lt;/p&gt;
&lt;p&gt;After each &lt;code&gt;if-else&lt;/code&gt; cycle, a new set of &lt;code&gt;indices&lt;/code&gt; are created, which then gets looped through with &lt;code&gt;pool&lt;/code&gt;, the interable parameter input, which changes the order of the elements in the list.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll note in the commented code above, &lt;code&gt;cycles&lt;/code&gt; start off at [3,2,1] and &lt;code&gt;indices&lt;/code&gt; start off at [0,1,2]. Each loop through the code changes the &lt;code&gt;indices&lt;/code&gt; where &lt;code&gt;indices[i:]&lt;/code&gt; successively gets longer [2], then [1,2], then [1,2,3]. While &lt;code&gt;cycles&lt;/code&gt; changes as it trends toward [1,1,1], which point the code breaks out of the loop.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;while n:
        for i in reversed(range(r)):
            cycles[i] -= 1
            if cycles[i] == 0:
                indices[i:] = indices[i+1:] + indices[i:i+1]
                cycles[i] = n - i
            else:
                j = cycles[i]
                indices[i], indices[-j] = indices[-j], indices[i]
                yield tuple(pool[i] for i in indices[:r])
                print(&amp;quot;indices[:r]&amp;quot;, indices[:r])
                print(&amp;quot;pool[i]:&amp;quot;, tuple(pool[i] for i in indices[:r]))
                print(&amp;quot;n:&amp;quot;, n)
                break
        else:
            print(&amp;quot;return:&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;permutations(iterable, r)&lt;/code&gt; function actually creates a &lt;code&gt;generator&lt;/code&gt; so we need to loop through it again to print out all the permutations of the list.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;generator object permutations at 0x7fe19400fdd0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We add another for-loop at the bottom to print out all the permutations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;perm = permutations(list1, 3)
count = 0

for p in perm:
    count += 1
    print(p)
print(&amp;quot;there are:&amp;quot;, count, &amp;quot;permutations.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is our result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./permutations.png&#34; alt=&#34;permutations&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;a-clearer-alternative-permutation-using-recursion&#34;&gt;A Clearer Alternative: Permutation Using Recursion&lt;/h3&gt;
&lt;p&gt;As is often the case, there is a better way I found in retrospect from 
&lt;a href=&#34;https://stackoverflow.com/questions/104420/how-to-generate-all-permutations-of-a-list&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this stack overflow&lt;/a&gt; (h/t to 
&lt;a href=&#34;https://twitter.com/lebigot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Eric O Lebigot&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def all_perms(elements):
    if len(elements) &amp;lt;= 1:
        yield elements  # Only permutation possible = no permutation
    else:
        # Iteration over the first element in the result permutation:
        for (index, first_elmt) in enumerate(elements):
            other_elmts = elements[:index] + elements[index+1:]
            for permutation in all_perms(other_elmts):
                yield [first_elmt] + permutation
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;enumerate&lt;/code&gt; built-in function obviates the need to separately create &lt;code&gt;cycles&lt;/code&gt; and &lt;code&gt;indices&lt;/code&gt;. The local variable &lt;code&gt;other_elmts&lt;/code&gt; separates the other elements in the list from the &lt;code&gt;first_elmt&lt;/code&gt;, then the second for-loop recursively finds the permutation of the other elements before adding with the &lt;code&gt;first_elmt&lt;/code&gt; on the final line, yielding all possible permutations of a list. As with the previous case, the result of this function is a &lt;code&gt;generator&lt;/code&gt; which requires looping through and printing the permutations.&lt;/p&gt;
&lt;p&gt;I found this much easier to digest than the documentation version.&lt;/p&gt;
&lt;p&gt;Permutations can be useful when you have varied user journeys through your product and you want to figure out all the possible paths. With this short python script, you can easily print out all options for consideration.&lt;/p&gt;
&lt;h3 id=&#34;take-aways&#34;&gt;Take Aways&lt;/h3&gt;
&lt;p&gt;From the perspective of a user funnel, &lt;strong&gt;permutations&lt;/strong&gt; allow us to explore all possible &lt;em&gt;paths&lt;/em&gt; a user might take. For our hypothetical example, a three-step funnel yields six possible paths a user could navigate from start to finish.&lt;/p&gt;
&lt;p&gt;Knowing permutations should also &lt;strong&gt;give us pause&lt;/strong&gt; when deciding whether to add another &amp;ldquo;step&amp;rdquo; to a funnel. Going from a three-step funnel to a four-step funnel increases the number of possible paths from six to 24 - a quadruple increase.&lt;/p&gt;
&lt;p&gt;Not only does this increase &lt;strong&gt;friction&lt;/strong&gt; between your user and the &amp;lsquo;end goal&amp;rsquo; (conversion), whatever that may be for your product, but it also increases complexity (and potentially confusion) in the user experience.&lt;/p&gt;
&lt;p&gt;For more content on data science, machine learning, R, Python, SQL and more, 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data Science from Scratch (ch6) - Probability</title>
      <link>/post/dsfs_6/</link>
      <pubDate>Sun, 22 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/post/dsfs_6/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#challenge&#34;&gt;Challenge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#marginal_and_joint_probabilities&#34;&gt;Marginal and Joint Probability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#conditional_probability&#34;&gt;Conditional Probability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#bayes_theorem&#34;&gt;Bayes&#39; Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#applying_bayes_theorem&#34;&gt;Applying Bayes&#39; Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#distributions&#34;&gt;Distributions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;h2 id=&#34;challenge&#34;&gt;Challenge&lt;/h2&gt;
&lt;p&gt;The first challenge in this section is distinguishing between &lt;strong&gt;two&lt;/strong&gt; conditional probability statements.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the setup. We have a family with two (unknown) children with two assumptions. First, each child is equally likely to be a boy or a girl. Second, the gender of the second child is &lt;em&gt;independent&lt;/em&gt; of the gender of the first child.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Outcome 1: What is the probability of the event &amp;ldquo;both children are girls&amp;rdquo; (B) conditional on the event &amp;ldquo;the older child is a girl&amp;rdquo; (G)?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The probability for statement one is roughly 50% or (1/2).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Outcome 2: What is the probability of the event &amp;ldquo;both children are girls&amp;rdquo; (B) conditional on the event &amp;ldquo;at least one of the children is a girl&amp;rdquo; (L)?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The probability for statement two is roughly 33% or (1/3).&lt;/p&gt;
&lt;p&gt;But at first glance, they look similar.&lt;/p&gt;
&lt;h2 id=&#34;marginal_and_joint_probabilities&#34;&gt;Marginal_and_Joint_Probabilities&lt;/h2&gt;
&lt;p&gt;The book jumps straight to conditional probabilities, but first, we&amp;rsquo;ll have to look at &lt;strong&gt;marginal&lt;/strong&gt; and &lt;strong&gt;joint&lt;/strong&gt; probabilities. Then we&amp;rsquo;ll create a &lt;strong&gt;joint probabilities table&lt;/strong&gt; and &lt;strong&gt;sum&lt;/strong&gt; probabilities to help us figure out the differences. We&amp;rsquo;ll then &lt;em&gt;resume&lt;/em&gt; with &lt;strong&gt;conditional probabilities&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Before anything, we need to realize the situation we have is one of &lt;strong&gt;independence&lt;/strong&gt;. The gender of one child is &lt;strong&gt;independent&lt;/strong&gt; of a second child.&lt;/p&gt;
&lt;p&gt;The intuition for this scenario will be different from a &lt;strong&gt;dependent&lt;/strong&gt; situation. For example, if we draw two cards from a deck (without replacement), the probabilities are different. The probability of drawing one King â ï¸ is (4/52) and the probability of drawing a second King â£ï¸ is now (3/51); the probability of the second event (a second King) is &lt;em&gt;dependent&lt;/em&gt; on the result of the first draw.&lt;/p&gt;
&lt;p&gt;Ok back to the two unknown children.&lt;/p&gt;
&lt;p&gt;We can say the probability of the first child being either a boy or a girl is 50/50. Moreover, the probability of the second child, which is &lt;strong&gt;independent&lt;/strong&gt; of the first, is &lt;em&gt;also&lt;/em&gt; 50/50. Remember, our first assumption is that &lt;em&gt;each child is equally likely to be a boy or a girl&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s put these numbers in a table. The (1/2) probabilities shown here are called &lt;strong&gt;marginal&lt;/strong&gt; probabilities (note how they&amp;rsquo;re at the margins of the table).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./marginal.png&#34; alt=&#34;marginal&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since we have two gender (much like two sides of a flipped coin), we can intuitively figure out &lt;em&gt;all&lt;/em&gt; possible outcomes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;first child (Boy), second child (Boy)&lt;/li&gt;
&lt;li&gt;first child (Boy), second child (Girl)&lt;/li&gt;
&lt;li&gt;first child (Girl), second child (Boy)&lt;/li&gt;
&lt;li&gt;first child (Girl), second child (Girl)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are &lt;em&gt;4 possible outcomes&lt;/em&gt; so the probability of getting any one of the four outcomes is (1/4). We can actually write these probabilities in the middle of the table, the &lt;strong&gt;joint probabilities&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./joint.png&#34; alt=&#34;joint&#34;&gt;&lt;/p&gt;
&lt;p&gt;To recap, the probability of the first child being either boy or girl is 50/50, simple enough. The probability of the second child being either boy or girl is also 50/50. When put in a table, this yielded the &lt;strong&gt;marginal probability&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now we want to know the probability of say, &amp;lsquo;first child being a boy and second child being a girl&amp;rsquo;. This is a &lt;strong&gt;joint probability&lt;/strong&gt; because is is the probability that the first child take a specific gender (boy) &lt;strong&gt;AND&lt;/strong&gt; the second child take a specific gender (girl).&lt;/p&gt;
&lt;p&gt;If two event are &lt;strong&gt;independent&lt;/strong&gt;, and in this case they are, their &lt;strong&gt;joint probabilities&lt;/strong&gt; are the &lt;em&gt;product&lt;/em&gt; of the probabilities of &lt;strong&gt;each one happening&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The probability of the first child being a Boy (1/2) &lt;strong&gt;and&lt;/strong&gt; second child being a Girl (1/2); The product of each marginal probability is the joint probability (1/2 * 1/2 = 1/4).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./product_marginal.png&#34; alt=&#34;product_marginal&#34;&gt;&lt;/p&gt;
&lt;p&gt;This can be repeated for the other three joint probabilities.&lt;/p&gt;
&lt;h2 id=&#34;conditional_probability&#34;&gt;Conditional_Probability&lt;/h2&gt;
&lt;p&gt;Now we get into &lt;strong&gt;conditional probability&lt;/strong&gt; which is the probability of one event happening (i.e., second child being a Boy or Girl) &lt;strong&gt;given that&lt;/strong&gt; or &lt;strong&gt;on conditional that&lt;/strong&gt; another event happened (i.e., first child being a Boy).&lt;/p&gt;
&lt;p&gt;At this point, it might be a good idea to get familiar with notation.&lt;/p&gt;
&lt;p&gt;A joint probability is the product of each individual event happening (assuming they are independent events). For example we might have two individual events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(1st Child = Boy): 1/2&lt;/li&gt;
&lt;li&gt;P(2nd Child = Boy): 1/2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is their &lt;strong&gt;joint probability&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(1st Child = Boy, 2nd Child = Boy) =&amp;gt;&lt;/li&gt;
&lt;li&gt;P(1st Child = Boy) * P(2nd Child = Boy) =&amp;gt;&lt;/li&gt;
&lt;li&gt;(1/2 * 1/2 = 1/4)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a relationship between &lt;strong&gt;conditional&lt;/strong&gt; probabilities and &lt;strong&gt;joint&lt;/strong&gt; probabilities.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(1st Child = Boy | 2nd Child = Boy) = P(1st Child = Boy, 2nd Child = Boy) / P(2nd Child = Boy)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Namely, the &lt;strong&gt;conditional&lt;/strong&gt; probability is equal to the &lt;strong&gt;joint&lt;/strong&gt; probability divided by the conditional.&lt;/p&gt;
&lt;p&gt;Thie works out to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(1st Child = Boy | 2nd Child = Boy) = (1/4) / (1/2)
or&lt;/li&gt;
&lt;li&gt;(1/4) * (2/1)
= 1/2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, the probability that the second child is a boy, given that the first child is a boy is &lt;em&gt;still&lt;/em&gt; 50% (this implies that with respect to &lt;strong&gt;conditional&lt;/strong&gt; probability, if the events are &lt;strong&gt;independent&lt;/strong&gt; it is not different from a single event).&lt;/p&gt;
&lt;p&gt;Now we&amp;rsquo;re ready to tackle the two challenges posed at the beginning of this post.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Challenge 1: What is the probability of the event &amp;ldquo;both children are girls&amp;rdquo; (B) conditional on the event &amp;ldquo;the older child is a girl&amp;rdquo; (G)?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s break it down. First we want the probability of the event that &amp;ldquo;both children are girls&amp;rdquo;. We&amp;rsquo;ll take the product of two events; the probability that the first child is a girl (1/2) and the probability that the second child is a girl (1/2). So the  &lt;strong&gt;joint probability of both&lt;/strong&gt; child being girls is 1/2 * 1/2 = 1/4&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(1st Child = Girl, 2nd Child = Girl) = 1/4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Second, we want that to be &lt;strong&gt;given that&lt;/strong&gt; the &amp;ldquo;older child is a girl&amp;rdquo;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(1st Child = Girl) = 1/2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conditional probability&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;P(Both Child = Girls | 1st Child = Girl) = P(1st Child = Girl, 2nd Child = Girl) / P(1st Child = Girl)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P(Both Child = Girls | 1st Child = Girl) = (1/4) / (1/2)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1/4) * (2/1) = &lt;strong&gt;1/2&lt;/strong&gt; or roughly &lt;strong&gt;50%&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let&amp;rsquo;s break down the second challenge:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Challenge 2: What is the probability of the event &amp;ldquo;both children are girls&amp;rdquo; (B) conditional on the event &amp;ldquo;at least one of the children is a girl&amp;rdquo; (L)?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Again, we start with &amp;ldquo;both children are girls&amp;rdquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(1st Child = Girl, 2nd Child = Girl) = 1/4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, we have &amp;ldquo;on condition that at least one of the children is a girl&amp;rdquo;. We&amp;rsquo;ll reference a &lt;strong&gt;joint probability table&lt;/strong&gt;. We see that when trying to figure out the probability that &amp;ldquo;at least one of the children is a girl&amp;rdquo;, we rule out the scenario where &lt;strong&gt;both&lt;/strong&gt; children are boys. The remaining 3 out of 4 probabilities, fit the condition.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./at_least.png&#34; alt=&#34;at least&#34;&gt;&lt;/p&gt;
&lt;p&gt;The probability of at least one children being a girl is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1/4) + (1/4) + (1/4) = 3/4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So (introducing notation):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;P(B) = &amp;ldquo;probability of both child being girls&amp;rdquo; (i.e., 1st Child = Girl, 2nd Child = Girl)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P(L) = &amp;ldquo;probability of at least one child being a girl&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P(B|L) = P(B,L) / P(L)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P(B|L) = (1/4) / (3/4) = (1/4) * (4/3) = &lt;strong&gt;1/3&lt;/strong&gt; or roughly &lt;strong&gt;33%&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;key-take-away&#34;&gt;Key Take-away&lt;/h4&gt;
&lt;p&gt;When two events are &lt;strong&gt;independent&lt;/strong&gt;, their &lt;strong&gt;joint probability&lt;/strong&gt; is the product of each event:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(E,F) = P(E) * P(F)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Their &lt;strong&gt;conditional&lt;/strong&gt; probability is the &lt;strong&gt;joint probability&lt;/strong&gt; divided by the conditional (i.e., P(F)).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(E|F) = P(E,F) / P(F)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And so for our two challenge scenarios, we have:&lt;/p&gt;
&lt;p&gt;Challenge 1:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B = probability that both children are girls&lt;/li&gt;
&lt;li&gt;G = probability that the &lt;em&gt;older&lt;/em&gt; children is a girl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This can be stated as: P(B|G) = P(B,G) / P(G)&lt;/p&gt;
&lt;p&gt;Challenge 2:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B = probability that both children are girls&lt;/li&gt;
&lt;li&gt;L = probability that &lt;em&gt;at least one&lt;/em&gt; children is a girl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This can be stated as: P(B|L) = P(B,L) / P(L)&lt;/p&gt;
&lt;h4 id=&#34;python-code&#34;&gt;Python Code&lt;/h4&gt;
&lt;p&gt;Now that we have an intuition and have worked out the problem on paper, we can use code to express conditional probability:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import enum, random
class Kid(enum.Enum):
    BOY = 0
    GIRL = 1
    
def random_kid() -&amp;gt; Kid:
    return random.choice([Kid.BOY, Kid.GIRL])
    
both_girls = 0
older_girl = 0
either_girl = 0

random.seed(0)
for _ in range(10000):
    younger = random_kid()
    older = random_kid()
    if older == Kid.GIRL:
        older_girl += 1
    if older == Kid.GIRL and younger == Kid.GIRL:
        both_girls += 1
    if older == Kid.GIRL or younger == Kid.GIRL:
        either_girl += 1
        
print(&amp;quot;P(both | older):&amp;quot;, both_girls / older_girl)   # 0.5007089325501317
print(&amp;quot;P(both | either):&amp;quot;, both_girls / either_girl) # 0.3311897106109325
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that code confirms our intuition.&lt;/p&gt;
&lt;p&gt;We use a &lt;code&gt;for-loop&lt;/code&gt; and &lt;code&gt;range(10000)&lt;/code&gt; to randomly simulate 10,000 scenarios. The &lt;code&gt;random_kid&lt;/code&gt; function randomly picks either a boy or girl (assumption #1). We set the following variables to start a 0, &lt;code&gt;both_girls&lt;/code&gt; (both children are girls); &lt;code&gt;older_girl&lt;/code&gt; (first child is a girl); and &lt;code&gt;either_girl&lt;/code&gt; (at least one child is a girl).&lt;/p&gt;
&lt;p&gt;Then, each of these variables are incremented by 1 through each of the 10,000 loops if it meets certain conditions. After we finish looping, we can call on each of the three variables to see if they match our calculations above:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;either_girl #7,464 / 10,000 ~ roughly 75% or 3/4 probability that there is at least one girl
both_girls  #2,472 / 10,000 ~ roughly 25% or 1/4 probability that both children are girls
older_girl  #4,937 / 10,000 ~ roughly 50% or 1/2 probability that the first child is a girl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will look at Bayes Theorem next.&lt;/p&gt;
&lt;h2 id=&#34;bayes_theorem&#34;&gt;Bayes_Theorem&lt;/h2&gt;
&lt;p&gt;Previously, we established an understanding of &lt;strong&gt;conditional&lt;/strong&gt; probability, but building up with &lt;strong&gt;marginal&lt;/strong&gt; and &lt;strong&gt;joint&lt;/strong&gt; probabilities. We explored the conditional probabilities of two outcomes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Outcome 1: What is the probability of the event &amp;ldquo;both children are girls&amp;rdquo; (B) conditional on the event &amp;ldquo;the older child is a girl&amp;rdquo; (G)?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The probability for outcome one is roughly 50% or (1/2).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Outcome 2: What is the probability of the event &amp;ldquo;both children are girls&amp;rdquo; (B) conditional on the event &amp;ldquo;at least one of the children is a girl&amp;rdquo; (L)?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The probability for outcome two is roughly 33% or (1/3).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bayes&#39; Theorem&lt;/strong&gt; is simply &lt;em&gt;an alternate&lt;/em&gt; way of calculating conditional probability.&lt;/p&gt;
&lt;p&gt;Previously, we used the &lt;strong&gt;joint&lt;/strong&gt; probability to calculate the &lt;strong&gt;conditional&lt;/strong&gt; probability.&lt;/p&gt;
&lt;h3 id=&#34;outcome-1&#34;&gt;Outcome 1&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s the conditional probability for outcome 1, using a joint probability:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;P(G) = &amp;lsquo;Probability that first child is a girl&amp;rsquo; (1/2)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P(B) = &amp;lsquo;Probability that both children are girls&amp;rsquo; (1/4)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P(B|G) = P(B,G) / P(G)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P(B|G) =  (1/4) / (1/2) = &lt;strong&gt;1/2&lt;/strong&gt; or roughly &lt;strong&gt;50%&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Technically, we &lt;em&gt;can&amp;rsquo;t&lt;/em&gt; use joint probability because the two events are &lt;em&gt;not independent&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To clarify, the probability of the older child being a certain gender and the probability of the younger child being a certain gender &lt;em&gt;is&lt;/em&gt; independent, but &lt;code&gt;P(B|G)&lt;/code&gt; the &amp;lsquo;probability of &lt;em&gt;both&lt;/em&gt; child being a girl&amp;rsquo; and &amp;lsquo;the probability of the older child being a girl&amp;rsquo; are &lt;em&gt;not independent&lt;/em&gt;; and hence we express it as a &lt;em&gt;conditional&lt;/em&gt; probability.&lt;/p&gt;
&lt;p&gt;So, the joint probability of &lt;code&gt;P(B,G)&lt;/code&gt; is just event B,&lt;code&gt;P(B)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an alternate way to calculate the conditional probability (&lt;strong&gt;without&lt;/strong&gt; joint probability):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;P(B|G) = P(G|B) * P(B) / P(G)&lt;/code&gt;  &lt;strong&gt;This is Bayes Theorem&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;P(B|G) = 1 * (1/4) / (1/2)&lt;/li&gt;
&lt;li&gt;P(B|G) = (1/4) * (2/1)&lt;/li&gt;
&lt;li&gt;P(B|G) = 1/2 = &lt;strong&gt;50%&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: P(G|B) is &amp;lsquo;the probability that the first child is a girl, given that &lt;strong&gt;both&lt;/strong&gt; children are girls is a certainty (1.0)&amp;rsquo;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;reverse&lt;/strong&gt; conditional probability, can also be calculated, without joint probability:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the probability of the older child being a girl, given that both children are girls?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;P(G|B) = P(B|G) * P(G) / P(B)&lt;/code&gt;  &lt;strong&gt;This is Bayes Theorem (reverse case)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;P(G|B) = (1/2) * (1/2) / (1/4)&lt;/li&gt;
&lt;li&gt;P(G|B) = (1/4) / (1/4)&lt;/li&gt;
&lt;li&gt;P(G|B) = 1 = &lt;strong&gt;100%&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is consistent with what we already derived above, namely that P(G|B) is a &lt;strong&gt;certainty&lt;/strong&gt; (probability = 1.0), that the older child is a girl, &lt;strong&gt;given that&lt;/strong&gt; both children are girls.&lt;/p&gt;
&lt;p&gt;We can point out two additional observations / rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;While, joint probabilities are &lt;strong&gt;symmetrical&lt;/strong&gt;: P(B,G) == P(G,B),&lt;/li&gt;
&lt;li&gt;Conditional probabilities are &lt;strong&gt;not symmetrical&lt;/strong&gt;: P(B|G) != P(G|B)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;bayes-theorem-alternative-expression&#34;&gt;Bayes&#39; Theorem: Alternative Expression&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Bayes Theorem&lt;/strong&gt; is a way of calculating conditional probability &lt;em&gt;without&lt;/em&gt; the joint probability, summarized here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;P(B|G) = P(G|B) * P(B) / P(G)&lt;/code&gt;  &lt;strong&gt;This is Bayes Theorem&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;P(G|B) = P(B|G) * P(G) / P(B)&lt;/code&gt;  &lt;strong&gt;This is Bayes Theorem (reverse case)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You&amp;rsquo;ll note that &lt;code&gt;P(G)&lt;/code&gt; is the denominator in the former, and &lt;code&gt;P(B)&lt;/code&gt; is the denominator in the latter.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What if, for some reasons, we don&amp;rsquo;t have access to the denominator?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We could derive both &lt;code&gt;P(G)&lt;/code&gt; and &lt;code&gt;P(B)&lt;/code&gt; in another way using the &lt;code&gt;NOT&lt;/code&gt; operator:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(G) = P(G,B) + P(G,not B) = P(G|B) * P(B) + P(G|not B) * P(not B)&lt;/li&gt;
&lt;li&gt;P(B) = P(B,G) + P(B,not G) = P(B|G) * P(G) + P(B|not G) * P(not G)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, the alternative expression of Bayes Theorem for the probability of &lt;em&gt;both&lt;/em&gt; children being girls, given that the first child is a girl ( P(B|G) ) is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(B|G) = P(G|B) * P(B) / ( P(G|B) * P(B) + P(G|not B) * P(not B) )&lt;/li&gt;
&lt;li&gt;P(B|G) =     1 * 1/4 / (1 * 1/4 + 1/3 * 3/4)&lt;/li&gt;
&lt;li&gt;P(B|G) =  1/4  /  (1/4 + 3/12)&lt;/li&gt;
&lt;li&gt;P(B|G) =  1/4  /  2/4  =  1/4 * 4/2&lt;/li&gt;
&lt;li&gt;P(B|G) =  1/2 or roughly &lt;strong&gt;50%&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can check the result in code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def bayes_theorem(p_b, p_g_given_b, p_g_given_not_b):
   # calculate P(not B)
   not_b = 1 - p_b
   # calculate P(G)
   p_g = p_g_given_b * p_b + p_g_given_not_b * not_b
   # calculate P(B|G)
   p_b_given_g = (p_g_given_b * p_b) / p_g
   return p_b_given_g
   
#P(B)
p_b = 1/4

# P(G|B)
p_g_given_b = 1

# P(G|notB)
p_g_given_not_b = 1/3

# calculate P(B|G)
result = bayes_theorem(p_b, p_g_given_b, p_g_given_not_b)

# print result
print(&#39;P(B|G) = %.2f%%&#39; % (result * 100))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the probability that the first child is a girl, given that &lt;em&gt;both&lt;/em&gt; children are girls ( P(G|B) ) is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(G|B) = P(B|G) * P(G) / ( P(G|B) * P(G) + P(B|not G) * P(not G) )&lt;/li&gt;
&lt;li&gt;P(G|B) =   1/2 * 1/2  / ((1/2 * 1/2) + (0 * 1/2))&lt;/li&gt;
&lt;li&gt;P(G|B) =  1/4  /  1/4&lt;/li&gt;
&lt;li&gt;P(G|B) = 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s unpack Outcome 2.&lt;/p&gt;
&lt;h3 id=&#34;outcome-2&#34;&gt;Outcome 2&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Outcome 2: What is the probability of the event &amp;ldquo;both children are girls&amp;rdquo; (B) conditional on the event &amp;ldquo;at least one of the children is a girl&amp;rdquo; (L)?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The probability for outcome two is roughly 33% or (1/3).&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll go through the same process as above.&lt;/p&gt;
&lt;p&gt;We could use &lt;strong&gt;joint&lt;/strong&gt; probability to calculate the &lt;strong&gt;conditional&lt;/strong&gt; probability. As with the previous outcome, the joint probability of &lt;code&gt;P(B,G)&lt;/code&gt; is just event B,&lt;code&gt;P(B)&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(B|L) = P(B,L) / P(L) = 1/3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or, we could use Bayes&#39; Theorem to figure out the &lt;strong&gt;conditional&lt;/strong&gt; probability &lt;strong&gt;without joint&lt;/strong&gt; probability:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(B|L) = P(L|B) * P(B) / P(L)&lt;/li&gt;
&lt;li&gt;P(B|L) =  (1 * 1/4) / (3/4)&lt;/li&gt;
&lt;li&gt;P(B|L) = 1/3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, if there&amp;rsquo;s no &lt;code&gt;P(L)&lt;/code&gt;, we can calculate that indirectly, also using Bayes&#39; Theorem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(L) = P(L|B) * P(B) + P(L|not B) * P(not B)&lt;/li&gt;
&lt;li&gt;P(L) =  1 * (1/4) + (2/3) * (3/4)&lt;/li&gt;
&lt;li&gt;P(L) =  (1/4) + (2/4)&lt;/li&gt;
&lt;li&gt;P(L) = 3/4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, we can use &lt;code&gt;P(L)&lt;/code&gt; in the way Bayes&#39; Theorem is commonly expressed, when we don&amp;rsquo;t have the denominator:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(B|L) = P(L|B) * P(B) / ( P(L|B) * P(B) + P(L|not B) * P(not B) )&lt;/li&gt;
&lt;li&gt;P(B|L) =  1 * (1/4) / (3/4)&lt;/li&gt;
&lt;li&gt;P(B|L) = 1/3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that we&amp;rsquo;ve gone through the calculation for two conditional probabilities, &lt;code&gt;P(B|G)&lt;/code&gt; and &lt;code&gt;P(B|L)&lt;/code&gt;, using Bayes Theorem, and implemented code for one of the scenarios, let&amp;rsquo;s take a step back and assess what this &lt;em&gt;means&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;bayesian-terminology&#34;&gt;Bayesian Terminology&lt;/h3&gt;
&lt;p&gt;I think its useful to understand that probability in general shines when we want to describe uncertainty and that Bayes&#39; Theorem allows us to quantify how much the data we observe, should change our beliefs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./bayes_table.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We have two &lt;strong&gt;posteriors&lt;/strong&gt;, &lt;code&gt;P(B|G)&lt;/code&gt; and &lt;code&gt;P(B|L)&lt;/code&gt;, both with equal &lt;strong&gt;priors&lt;/strong&gt; and &lt;strong&gt;likelihood&lt;/strong&gt;, but with &lt;em&gt;different&lt;/em&gt; &lt;strong&gt;evidence&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Said differently, we want to know the &amp;lsquo;probability that both children are girls`, given &lt;em&gt;different&lt;/em&gt; conditions.&lt;/p&gt;
&lt;p&gt;In the first case, our condition is &amp;lsquo;the first child is a girl&amp;rsquo; and in the second case, our condition is &amp;lsquo;&lt;em&gt;at least one&lt;/em&gt; of the child is a girl&amp;rsquo;. The question is which condition will increase the probability that &lt;strong&gt;both&lt;/strong&gt; children are girls?&lt;/p&gt;
&lt;p&gt;Bayes&amp;rsquo; Theorem allows us to update our belief about the probability in these two cases, as we incorporate varied data into our framework.&lt;/p&gt;
&lt;p&gt;What the calculations tell us is that the &lt;strong&gt;evidence&lt;/strong&gt; that &amp;lsquo;one child is a girl&amp;rsquo; increases the probability that &lt;strong&gt;both&lt;/strong&gt; children are girls &lt;em&gt;more than&lt;/em&gt; the other piece of &lt;strong&gt;evidence&lt;/strong&gt; that &amp;lsquo;at least one child is a girl&amp;rsquo; increases that probability.&lt;/p&gt;
&lt;p&gt;And our beliefs should be updated accordingly.&lt;/p&gt;
&lt;p&gt;At the end of the day, understanding conditional probability (and Bayes Theorem) comes down to &lt;strong&gt;counting&lt;/strong&gt;. For our hypothetical scenarios, we only need one hand:&lt;/p&gt;
&lt;p&gt;When we look at the probability table for outcome one, &lt;code&gt;P(B|G)&lt;/code&gt;, we can see how the posterior probability comes out to 1/2:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./outcome_one.png&#34; alt=&#34;outcome_one&#34;&gt;&lt;/p&gt;
&lt;p&gt;When we look at the probability table for outcome two, &lt;code&gt;P(B|L)&lt;/code&gt;, we can see how the posterior probability comes out to 1/3:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./outcome_two.png&#34; alt=&#34;outcome_two&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is part of an ongoing series documenting my progress through Data Science from Scratch by Joel Grus:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./conditional_prob_ch6.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;applying_bayes_theorem&#34;&gt;Applying_Bayes_Theorem&lt;/h2&gt;
&lt;p&gt;Now that we have a basic understanding of Bayes Theorem, let&amp;rsquo;s extend the application to a slightly more complex example. This section was inspired by this 
&lt;a href=&#34;https://twitter.com/3blue1brown/status/1333121058824613889?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tweet&lt;/a&gt; from Grant Sanderson (of 
&lt;a href=&#34;https://www.youtube.com/watch?v=HZGCoVF3YvM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3Blue1Brown fame&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./grant_tweet.png&#34; alt=&#34;grant_tweet&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is a classic application of Bayes Theorem - the &lt;strong&gt;medical diagnostic scenario&lt;/strong&gt;. The above tweet can be re-stated:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the probability of you &lt;em&gt;actually having the disease&lt;/em&gt;, given that you tested positive?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This happens to be even more relevant as we&amp;rsquo;re living through a generational pandemic.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start off with a conceptual understanding, using the tools we learned previously. First, we have to keep in mind &lt;strong&gt;testing&lt;/strong&gt; and &lt;strong&gt;actually having the disease&lt;/strong&gt; are &lt;strong&gt;not independent&lt;/strong&gt; events. Therefore, we will use &lt;strong&gt;conditional probability&lt;/strong&gt; to express their joint outcomes.&lt;/p&gt;
&lt;p&gt;The intuitive visual to illustrate this is the &lt;strong&gt;tree diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./initial_tree.png&#34; alt=&#34;initial_tree&#34;&gt;&lt;/p&gt;
&lt;p&gt;The initial given information contains the information in the tree.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;P(D): Probability of having the disease (covid-19)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P(P): Probability of testing positive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;*P(D|P): Our objective is to find the probability of having the disease, given a positive test&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1 in 1,000 actively have covid-19, P(D), this implies&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;999 in 1,000 do &lt;strong&gt;not&lt;/strong&gt; actively have covid-19, P(not D)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1% or 0.01 false positive (given)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10% or 0.1 false negative (given)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;false positive&lt;/strong&gt; is when you &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; have the disease, but your test (in error) shows up positive. &lt;strong&gt;False negative&lt;/strong&gt; is when you &lt;em&gt;have&lt;/em&gt; the disease, but your test (in error) shows up negative. We are provided this information and have to calculate other values to fill in the tree.&lt;/p&gt;
&lt;p&gt;We know that all possible events have to add up to 1, so if 1 in 1,000 actively have the disease, we know that 999 in 1,000 do not have it. If the false negative is 10%, then the &lt;strong&gt;true positive&lt;/strong&gt; is 90%. If the false positive is 1%, then the &lt;strong&gt;true negative&lt;/strong&gt; is 99%. From our calculations, the tree can be updated:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./second_tree.png&#34; alt=&#34;second_tree&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now that we&amp;rsquo;ve filled out the tree, we can use &lt;strong&gt;Bayes&#39; Theorem&lt;/strong&gt; to find &lt;code&gt;P(D|P)&lt;/code&gt;. Here&amp;rsquo;s Bayes&#39; Theorem that we discussed in the previous section. We have Bayes&#39; Theorem, the denominator, probability of testing positive &lt;code&gt;P(P)&lt;/code&gt; and the &lt;em&gt;second&lt;/em&gt; version of Bayes Theorem in cases were we &lt;em&gt;do not know&lt;/em&gt; the probability of testing positive (as in the present case):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./bayes1.png&#34; alt=&#34;bayes1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then we can plug-in the denominator to get the alternative version of Bayes&#39; Theorem:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./bayes2.png&#34; alt=&#34;bayes2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how the numbers add up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(D|P) = P(P|D) * P(D) / P(P|D) * P(D) + P(P|not D) * P(not D)&lt;/li&gt;
&lt;li&gt;P(D|P) = 0.9 * 0.001 / 0.9 * 0.001 + 0.01 * 0.999&lt;/li&gt;
&lt;li&gt;P(D|P) = 0.0009 / 0.0009 + 0.00999&lt;/li&gt;
&lt;li&gt;P(D|P) = 0.0009 / 0.01089&lt;/li&gt;
&lt;li&gt;P(D|P) ~ 0.08264 or 8.26%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Interestingly, 
&lt;a href=&#34;https://twitter.com/karpathy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Andrej Karpathy&lt;/a&gt; actually 
&lt;a href=&#34;https://twitter.com/karpathy/status/1333217287155847169?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;responded in the thread&lt;/a&gt; and provided an intuitive way to arrive at the same result using Python.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s his code (with added comments):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from random import random, seed
seed(0)

pop = 10000000 # 10M people
counts = {}

for i in range(pop):
    has_covid = i % 1000 == 0 # one in 1,000 people have covid (priors or prevalence of disease)
    # The major assumption is that every person gets tested regardless of any symptoms
    if has_covid:                  # Has disease
        tests_positive = True      # True positive
        if random() &amp;lt; 0.1:     
            tests_positive = False # False negative
    else:                          # Does not have disease
        tests_positive = False     # True negative
        if random() &amp;lt; 0.01:    
            tests_positive = True  # False positive
    outcome = (has_covid, tests_positive)
    counts[outcome] = counts.get(outcome, 0) + 1
    
for (has_covid, tested_positive), n in counts.items():
    print(&#39;has covid: %6s, tests positive: %6s, count: %d&#39; % (has_covid, tested_positive, n))
    
n_positive = counts[(True, True)] + counts[(False, True)]

print(&#39;number of people who tested positive:&#39;, n_positive)
print(&#39;probability that a test-positive person actually has covid: %.2f&#39; % (100.0 * counts[(True, True)] / n_positive), )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We first build a hypothetical population of 10 million. If the &lt;strong&gt;prior&lt;/strong&gt; or &lt;strong&gt;prevalence&lt;/strong&gt; of disease is 1 in 1,000, a population of 10 million should find 10000 people with covid. You can see how this works with this short snippet:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pop = 10000000
counts = 0

for i in range(pop):
    has_covid = i % 1000 == 0
    if has_covid:
        counts = counts + 1
print(counts, &amp;quot;people have the disease in a population of 10 million&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nested in the &lt;code&gt;for-loop&lt;/code&gt; are &lt;code&gt;if-statements&lt;/code&gt; that segment the population (10M) into one of four categories True Positive, False Negative, True Negative, False Positive. Each category is counted and stored in a &lt;code&gt;dict&lt;/code&gt; called &lt;code&gt;counts&lt;/code&gt;. Then another &lt;code&gt;for-loop&lt;/code&gt; is used to loop through this dictionary to print out all the categories:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;has covid:   True, tests positive:   True, count: 9033
has covid:  False, tests positive:  False, count: 9890133
has covid:  False, tests positive:   True, count: 99867
has covid:   True, tests positive:  False, count: 967

number of people who tested positive: 108900
probability that a test-positive person actually has covid: 8.29
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we want the number of people who &lt;em&gt;have&lt;/em&gt; the disease &lt;em&gt;and&lt;/em&gt; tested positive (True Positive, 9033) divided by the number of people who tested positive, regardless of whether they actually have the disease (True Positive (9033) + False Positive (99867) = 108,900) and this comes out to approximately 8.29.&lt;/p&gt;
&lt;p&gt;Although the 
&lt;a href=&#34;https://twitter.com/karpathy/status/1333217287155847169?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code&lt;/a&gt; was billed as &amp;ldquo;simple code to build intuition&amp;rdquo;, I found that Bayes&#39; Theorem &lt;em&gt;is&lt;/em&gt; the intuition.&lt;/p&gt;
&lt;h3 id=&#34;what-about-symptoms&#34;&gt;What about symptoms?&lt;/h3&gt;
&lt;p&gt;The key to Bayes&#39; Theorem is that it encourages us to update our beliefs when presented with new evidence. But what if there&amp;rsquo;s evidence we missed in the first place?&lt;/p&gt;
&lt;p&gt;If you look back at the 
&lt;a href=&#34;https://twitter.com/3blue1brown/status/1333121058824613889?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;original tweet&lt;/a&gt;, there are important details about symptoms that, if we wanted to be more realistic, should be accounted for.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You feel fatigued and have a slight sore throat.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here, instead of assuming that prevalence of the disease (1 in 1,000 people have covid-19) is the prior, we might ask what probability that someone who is symptomatic has the disease?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s suppose we change from 1 in 1,000 to 1 in 100. We could change just one line of code (while everything else remains the same):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(pop):
    has_covid = i % 100 == 0 # update info: 1/1000 have covid, but 1/100 with symptoms have covid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The probability that someone with a positive test actually has the disease jumps from 8.29% to 47.61%&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;has covid:   True, tests positive:   True, count: 180224
has covid:  False, tests positive:  False, count: 19601715
has covid:  False, tests positive:   True, count: 198285
has covid:   True, tests positive:  False, count: 19776
number of people who tested positive: 378509
probability that a test-positive person with symptoms actually has covid: 47.61
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thus, being symptomatic means our &lt;strong&gt;priors&lt;/strong&gt; should be adjusted and our &lt;strong&gt;beliefs&lt;/strong&gt; about the likelihood that a positive test means we have the disease (&lt;code&gt;P(D|P)&lt;/code&gt;) should be updated accordingly (in this case, it goes way up).&lt;/p&gt;
&lt;h3 id=&#34;take-aways&#34;&gt;Take Aways&lt;/h3&gt;
&lt;p&gt;Hypothetically, if we have family or friends living in an area where 1 in 1,000 people have covid-19 and they (god forbid) got tested and got a positive result, you could tell them that their probability of actually having the disease, given a positive test was around 8.26â8.29%.&lt;/p&gt;
&lt;p&gt;However, whatâs useful about the Bayesian approach is that it encourages us to incorporate new information and update our beliefs accordingly. So if we find out our family or friend is also &lt;em&gt;symptomatic&lt;/em&gt;, we could advise them of the higher probability (~47.61%).&lt;/p&gt;
&lt;p&gt;Finally, we may also advise our family/friends to get tested &lt;strong&gt;again&lt;/strong&gt;, because as much as test-positive person would hope they got a âfalse positiveâ, chances are low. And even lower, is getting a false positive &lt;em&gt;twice&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./second_test.png&#34; alt=&#34;second_test&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;distributions&#34;&gt;Distributions&lt;/h2&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll cover various distributions. This is a broad topic so we&amp;rsquo;ll sample a few concepts to get a feel for it. Borrowing from the previous post, we&amp;rsquo;ll chart our medical diagnostic outcomes.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll recall that each outcome is the combination of whether someone has a disease, &lt;code&gt;P(D)&lt;/code&gt;, or not, &lt;code&gt;P(not D)&lt;/code&gt;. Then, they&amp;rsquo;re given a diagnostic test that returns positive, &lt;code&gt;P(P)&lt;/code&gt; or negative, &lt;code&gt;P(not P)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These are discrete outcomes so they can be represented with the &lt;strong&gt;probability mass function&lt;/strong&gt;, as opposed to a &lt;strong&gt;probability density function&lt;/strong&gt;, which represent a continuous distribution.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take another &lt;em&gt;hypothetical&lt;/em&gt; scenario of a city where 1 in 10 people have a disease and a diagnostic test has a True Positive of 95% and True Negative of 90%. The probability that a test-positive person &lt;em&gt;actually&lt;/em&gt; having the disease is 46.50%.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from random import random, seed

seed(0)
pop = 1000  # 1000 people
counts = {}
for i in range(pop):
    has_disease = i % 10 == 0  # one in 10 people have disease
    # assuming that every person gets tested regardless of any symptoms
    if has_disease:
        tests_positive = True       # True Positive  95%
        if random() &amp;lt; 0.05:
            tests_positive = False  # False Negative 5%
    else:
        tests_positive = False      # True Negative  90%
        if random() &amp;lt; 0.1:
            tests_positive = True   # False Positive 10%
    outcome = (has_disease, tests_positive)
    counts[outcome] = counts.get(outcome, 0) + 1

for (has_disease, tested_positive), n in counts.items():
    print(&#39;Has Disease: %6s, Test Positive: %6s, count: %d&#39; %
          (has_disease, tested_positive, n))

n_positive = counts[(True, True)] + counts[(False, True)]
print(&#39;Number of people who tested positive:&#39;, n_positive)
print(&#39;Probability that a test-positive person actually has disease: %.2f&#39; %
      (100.0 * counts[(True, True)] / n_positive),)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given the probability that someone has the disease (1 in 10), also called the &amp;lsquo;prior&amp;rsquo; in Bayesian terms. We modeled four scenarios where people were given a diagnostic test. Again, the big assumption here is that people get randomly tested. With the true positive and true negative rates stated above, here are the outcomes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./hypothetical_outcome.png&#34; alt=&#34;hypothetical_outcome&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;probability-mass-function&#34;&gt;Probability Mass Function&lt;/h3&gt;
&lt;p&gt;Given these discrete events, we can chart a &lt;strong&gt;probability mass function&lt;/strong&gt;, also known as 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Probability_mass_function&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;discrete density function&lt;/a&gt;. We&amp;rsquo;ll import &lt;code&gt;pandas&lt;/code&gt; to help us create &lt;code&gt;DataFrames&lt;/code&gt; and &lt;code&gt;matplotlib&lt;/code&gt; to chart the &lt;strong&gt;probability mass function&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We first need to turn the counts of events into a &lt;code&gt;DataFrame&lt;/code&gt; and change the column to &lt;code&gt;item_counts&lt;/code&gt;. Then, we&amp;rsquo;ll calculate the probability of each event by dividing the count by the total number of people in our hypothetical city (i.e., population: 1000).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt;: Create another column with abbreviations for test outcome (i.e., &amp;ldquo;True True&amp;rdquo; becomes &amp;ldquo;TT&amp;rdquo;). We&amp;rsquo;ll call this column &lt;code&gt;item2&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import matplotlib.pyplot as plt

df = pd.DataFrame.from_dict(counts, orient=&#39;index&#39;)
df = df.rename(columns={0: &#39;item_counts&#39;})
df[&#39;probability&#39;] = df[&#39;item_counts&#39;]/1000
df[&#39;item2&#39;] = [&#39;TT&#39;, &#39;FF&#39;, &#39;FT&#39;, &#39;TF&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the &lt;code&gt;DataFrame&lt;/code&gt; we have so far:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./pmf_df.png&#34; alt=&#34;pmf_df&#34;&gt;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll note that the numbers in the &lt;code&gt;probability&lt;/code&gt; column adds up to 1.0 and that the &lt;code&gt;item_counts&lt;/code&gt; numbers are the same as the count above when we had calculated the probability of a test-positive person actually having the disease.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use a simple bar chart to chart out the diagnostic probabilities and this is how we&amp;rsquo;d visually represent the probability mass function - probabilities of each discrete event; each &amp;lsquo;discrete event&amp;rsquo; is a conditional (e.g., probability that someone has a positive test, given that they &lt;em&gt;have&lt;/em&gt; the disease - TT or probability that someone has a negative test, given that they &lt;em&gt;don&amp;rsquo;t have&lt;/em&gt; the disease - FF, and so on).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./prob_mass_function.png&#34; alt=&#34;prob_mass_function.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.DataFrame.from_dict(counts, orient=&#39;index&#39;)
df = df.rename(columns={0: &#39;item_counts&#39;})
df[&#39;probability&#39;] = df[&#39;item_counts&#39;]/1000
df[&#39;item2&#39;] = [&#39;TT&#39;, &#39;FF&#39;, &#39;FT&#39;, &#39;TF&#39;]
plt.bar(df[&#39;item2&#39;], df[&#39;probability&#39;])
plt.title(&amp;quot;Probability Mass Function&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cumulative-distribution-function&#34;&gt;Cumulative Distribution Function&lt;/h3&gt;
&lt;p&gt;While the probability mass function can tell us the probability of each discrete event (i.e., TT, FF, FT, and TF) we can also represent the same information as a &lt;strong&gt;cumulative distribution function&lt;/strong&gt; which allows us to see how the probability changes as we add events together.&lt;/p&gt;
&lt;p&gt;The cumulative distribution function simply adds the probability from the previous row in a &lt;code&gt;DataFrame&lt;/code&gt; in a cumulative fashion, like in the column &lt;code&gt;probability2&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./cdf_df.png&#34; alt=&#34;cdf_df.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;cumsum()&lt;/code&gt; function to create the &lt;code&gt;cumsum&lt;/code&gt; column which is simply adding the &lt;code&gt;item_counts&lt;/code&gt;, with each successive row. When we create the corresponding probability column, &lt;code&gt;probability2&lt;/code&gt;, it gets larger until we reach 1.0.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the chart:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./cum_distri_function.png&#34; alt=&#34;cum_distri_function&#34;&gt;&lt;/p&gt;
&lt;p&gt;This chart tells us that the probability of getting both TT and FF (True, True = True Positive, and False, False = True Negative) is 88.6% which indicates that 11.4% (100 - 88.6) of the time, the diagnostic test will let us down.&lt;/p&gt;
&lt;h3 id=&#34;normal-distribution&#34;&gt;Normal Distribution&lt;/h3&gt;
&lt;p&gt;More often than not, you&amp;rsquo;ll be interested in &lt;em&gt;continuous&lt;/em&gt; distributions and you can see better see how the &lt;strong&gt;cumulative distribution function&lt;/strong&gt; works.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re probably familiar with the bell shaped curve or the &lt;em&gt;normal distribution&lt;/em&gt;, defined solely by its mean (mu) and standard deviation (sigma). If you have a &lt;strong&gt;standard normal distribution&lt;/strong&gt; of probability values, the average would be 0 and the standard deviation would be 1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./1_normal.png&#34; alt=&#34;1_normal&#34;&gt;&lt;/p&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math
SQRT_TWO_PI = math.sqrt(2 * math.pi)

def normal_pdf(x: float, mu: float = 0, sigma: float = 1) -&amp;gt; float:
    return (math.exp(-(x-mu) ** 2 / 2 / sigma ** 2) / (SQRT_TWO_PI * sigma))
    
# plot
xs = [x / 10.0 for x in range(-50, 50)]
plt.plot(xs, [normal_pdf(x, sigma=1) for x in xs], &#39;-&#39;, label=&#39;mu=0, sigma=1&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the &lt;strong&gt;standard normal distribution&lt;/strong&gt; curve, you see the average probability is around 0.4. But if you add up the area under the curve (i.e., all probabilities of every possible outcome), you would get 1.0, just like with the medical diagnostic example.&lt;/p&gt;
&lt;p&gt;And if you split the bell in half, then flip over the left half, you&amp;rsquo;ll (visually) get the &lt;strong&gt;cumulative distribution function&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./1_cumu.png&#34; alt=&#34;1_cumu&#34;&gt;&lt;/p&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math

def normal_cdf(x: float, mu: float = 0, sigma: float = 1) -&amp;gt; float:
    return (1 + math.erf((x - mu) / math.sqrt(2) / sigma)) / 2
    
# plot
xs = [x / 10.0 for x in range(-50, 50)]
plt.plot(xs, [normal_cdf(x, sigma=1) for x in xs], &#39;-&#39;, label=&#39;mu=0,sigma=1&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In both cases, the area under the curve for the &lt;strong&gt;standard normal distribution&lt;/strong&gt; and the &lt;strong&gt;cumulative distribution function&lt;/strong&gt; is 1.0, thus summing the probabilities of all events is one.&lt;/p&gt;
&lt;p&gt;For more content on data science, machine learning, R, Python, SQL and more, 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>End-to-End Projects</title>
      <link>/post/end_to_end/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/post/end_to_end/</guid>
      <description>&lt;h2 id=&#34;2021-goals&#34;&gt;2021 Goals&lt;/h2&gt;
&lt;p&gt;One of my goals for 2021 is to build up a portfolio of end-to-end machine learning projects. In this post, I&amp;rsquo;ll keep a running list of resources for inspiration:&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.kdnuggets.com/2020/10/guide-authentic-data-science-portfolio-project.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Data Science Portfolio Projects: A Step-by-Step Guide&lt;/a&gt; (by 
&lt;a href=&#34;https://www.linkedin.com/in/felix-vemmer/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Felix Vemmer&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This is a clear step-by-step guide. I like the emphasis on web scraping which is where I need to focus my skills on next.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;bit.ly/berkeleyfsdl&#34;&gt;Full Stack Deep Learning (at Berkeley)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This looks to be a promising course that covers: &amp;ldquo;a promising experiment to a shipped product: project structure, useful tooling, data management, best practices for deployment, social responsibility, and finding a job or starting a venture&amp;rdquo;. The course is &lt;strong&gt;entirely online&lt;/strong&gt;. See this 
&lt;a href=&#34;https://twitter.com/full_stack_dl/status/1329477077733609480&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tweet thread&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://madewithml.com/courses/applied-ml-in-production/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Applied ML in Production&lt;/a&gt; by 
&lt;a href=&#34;https://twitter.com/GokuMohandas&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Goku Mohandas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This aims to be a &amp;ldquo;guide and code-driven case study on MLOps for software engineers, data scientists and product managers&amp;hellip;developing an end-to-end ML feature, from product &amp;ndash;&amp;gt; ML &amp;ndash;&amp;gt; production, with open source tools&amp;rdquo;. Sounds very promising.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://end-to-end-machine-learning.teachable.com/p/complete-course-library-full-end-to-end-machine-learning-catalog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;End-to-End Machine Learning Course Catalog&lt;/a&gt; by 
&lt;a href=&#34;https://twitter.com/_brohrer_&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Brandon Rohrer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://twitter.com/PrasoonPratham/status/1330372876134912000&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;First 30 days of Machine Learning&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This tweet thread by 
&lt;a href=&#34;https://twitter.com/PrasoonPratham&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pratham Prasoon&lt;/a&gt;, as the title suggests, is for newcomers to ML, but I think by the end of the sequence (doesn&amp;rsquo;t have to be 30 days) there&amp;rsquo;s a Kaggle project to complete. &lt;em&gt;note&lt;/em&gt;: this is not ML-in-production like some of the other resources, but Kaggle projects are great for learning.&lt;/p&gt;
&lt;p&gt;He has another thread 
&lt;a href=&#34;https://twitter.com/PrasoonPratham/status/1325331515090219008&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;worth checking out&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://twitter.com/jangiacomelli/status/1331170945738760192&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Suggested Project from Jan Giacomelli&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a pretty ð¥ thread. He suggests:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build an expense tracker CLI app:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each expensee should have the following: title (string), amount(float), created_at(date), tags(list of strings)&lt;/p&gt;
&lt;p&gt;2 Add Database&lt;/p&gt;
&lt;p&gt;Instead of storing/reading in/from TXT file, start using SQLite. Write script to copy all of the existing expenses from TXT file to database. Don&amp;rsquo;t use ORM at this point.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Start using Classes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Represent expense with class Expense having attributes: title(string), amount(float), created_at(date), tags(list of strings).&lt;/p&gt;
&lt;p&gt;Represent Database with class ExpenseRepository with methods: save, get_by_id, list, delete&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Re-write App to use Commands and Queries&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each command/query is a class with method execute.
At initialization you need to provide all required data for execution.&lt;/p&gt;
&lt;p&gt;Commands: AddExpense, EditExpense
Queries: GetById, ListAll&lt;/p&gt;
&lt;p&gt;See this post on 
&lt;a href=&#34;https://testdriven.io/blog/modern-tdd/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Modern Test-Driven Development in Python&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Add Tests&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Add tests for commands and queries&lt;/p&gt;
&lt;p&gt;Example:
GIVEN Valid data
WHEN execute method is called on AddExpense command
THEN record is created in database with same attributes as provided&lt;/p&gt;
&lt;p&gt;See this post on 
&lt;a href=&#34;https://testdriven.io/blog/modern-tdd/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Modern Test-Driven Development in Python&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Use Flask to build the web application for your expense tracker.
Reuse commands and queries inside views
Use Jinja2 for HTML templating
Add integration tests for endpoints&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Start using PostgreSQL instead of SQLite.
You should only edit ExpenseRepository.
Create script to copy all existing data from SQLite to Postgres&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Add sign up and login to your Flask application
Protect endpoints for expenses to allow only logged in users to use them
Allow user to only see own expenses.&lt;/p&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;Dockerize and Deploy&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Dockerize your Flask application
Deploy to Heroku (don&amp;rsquo;t use DB in docker, use it on Heroku)&lt;/p&gt;
&lt;p&gt;See this post on 
&lt;a href=&#34;https://testdriven.io/blog/dockerizing-flask-with-postgres-gunicorn-and-nginx/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dockerizing Flask with Postgres, Gunicorn and Nginx&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;Start using your application for real&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Start tracking your expenses
Even the most little ones
Don&amp;rsquo;t forget to add them daily&lt;/p&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;Data Analysis&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Use Pandas and Matplotlib to analyze your expenses
Check frequency, check biggest amount, smallest amount, average amount, most frequent amount and most used tags&amp;hellip;&lt;/p&gt;
&lt;p&gt;Draw plots: Number of expenses per day, amount spent per day&lt;/p&gt;
&lt;ol start=&#34;12&#34;&gt;
&lt;li&gt;ML&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Build model which will predict tags based on the title of expense
Use your existing records
Although your data set is small, try to build model as precise as possible&lt;/p&gt;
&lt;ol start=&#34;13&#34;&gt;
&lt;li&gt;Congratulate yourself&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Don&amp;rsquo;t forget to write a blog post for each of these steps.
Don&amp;rsquo;t forget to share your code in a public git repository (GitHub)
Don&amp;rsquo;t forget to tweet it out
Don&amp;rsquo;t forget to add all the skills to LinkedIn&lt;/p&gt;
&lt;p&gt;For more content on data science, machine learning, R, Python, SQL and more, 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data Science from Scratch (ch5) - Statistics</title>
      <link>/post/dsfs_5/</link>
      <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/post/dsfs_5/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#describing&#34;&gt;Describing Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#correlation&#34;&gt;Finding Relationships in Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This post is chapter 5 in continuation of my coverage of 
&lt;a href=&#34;https://joelgrus.com/2019/05/13/data-science-from-scratch-second-edition/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Data Science from Scratch by Joel Grus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It should be noted upfront that everything covered in this post can be done more expediently and efficiently in libraries like 
&lt;a href=&#34;https://numpy.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NumPy&lt;/a&gt; as well as the 
&lt;a href=&#34;https://github.com/python/cpython/blob/3.9/Lib/statistics.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;statistics module in Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The primary value of this book, and by extension this post, in my opinion, is the emphasis on &lt;strong&gt;learning&lt;/strong&gt; how Python primitives can be used to build tools from the ground up.&lt;/p&gt;
&lt;p&gt;Specifically, we&amp;rsquo;ll examine how specific features of the Python language as well as functions we built in a previous post on 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;linear algebra&lt;/a&gt; can be used to build tools used to &lt;em&gt;describe&lt;/em&gt; data and relationships within data (aka &lt;strong&gt;statistics&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;I think this is pretty cool. Hopefully you agree.&lt;/p&gt;
&lt;h4 id=&#34;example-data&#34;&gt;Example Data&lt;/h4&gt;
&lt;p&gt;This chapter continues the narrative of you as a newly hired data scientist at DataScienster, the social network for data scientists, and your job is to &lt;em&gt;describe&lt;/em&gt; how many friends members in this social network has. We have two &lt;code&gt;lists&lt;/code&gt; of &lt;code&gt;float&lt;/code&gt; to work with. We&amp;rsquo;ll work with &lt;code&gt;num_friends&lt;/code&gt; first, then &lt;code&gt;daily_minutes&lt;/code&gt; later.&lt;/p&gt;
&lt;p&gt;I wanted this post to be self-contained, and in order to do that we&amp;rsquo;ll have to read in a larger than average &lt;code&gt;list&lt;/code&gt; of &lt;code&gt;floats&lt;/code&gt;. The alternative would be to get the data directly from the book&amp;rsquo;s 
&lt;a href=&#34;https://github.com/joelgrus/data-science-from-scratch/blob/master/scratch/statistics.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github repo (statistics.py)&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;num_friends = [100.0,49,41,40,25,21,21,19,19,18,18,16,15,15,15,15,14,14,13,13,13,13,12,12,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]

daily_minutes = [1,68.77,51.25,52.08,38.36,44.54,57.13,51.4,41.42,31.22,34.76,54.01,38.79,47.59,49.1,27.66,41.03,36.73,48.65,28.12,46.62,35.57,32.98,35,26.07,23.77,39.73,40.57,31.65,31.21,36.32,20.45,21.93,26.02,27.34,23.49,46.94,30.5,33.8,24.23,21.4,27.94,32.24,40.57,25.07,19.42,22.39,18.42,46.96,23.72,26.41,26.97,36.76,40.32,35.02,29.47,30.2,31,38.11,38.18,36.31,21.03,30.86,36.07,28.66,29.08,37.28,15.28,24.17,22.31,30.17,25.53,19.85,35.37,44.6,17.23,13.47,26.33,35.02,32.09,24.81,19.33,28.77,24.26,31.98,25.73,24.86,16.28,34.51,15.23,39.72,40.8,26.06,35.76,34.76,16.13,44.04,18.03,19.65,32.62,35.59,39.43,14.18,35.24,40.13,41.82,35.45,36.07,43.67,24.61,20.9,21.9,18.79,27.61,27.21,26.61,29.77,20.59,27.53,13.82,33.2,25,33.1,36.65,18.63,14.87,22.2,36.81,25.53,24.62,26.25,18.21,28.08,19.42,29.79,32.8,35.99,28.32,27.79,35.88,29.06,36.28,14.1,36.63,37.49,26.9,18.58,38.48,24.48,18.95,33.55,14.24,29.04,32.51,25.63,22.22,19,32.73,15.16,13.9,27.2,32.01,29.27,33,13.74,20.42,27.32,18.23,35.35,28.48,9.08,24.62,20.12,35.26,19.92,31.02,16.49,12.16,30.7,31.22,34.65,13.13,27.51,33.2,31.57,14.1,33.42,17.44,10.12,24.42,9.82,23.39,30.93,15.03,21.67,31.09,33.29,22.61,26.89,23.48,8.38,27.81,32.35,23.84]

daily_hours = [dm / 60 for dm in daily_minutes]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;describing&#34;&gt;Describing&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;num_friends&lt;/code&gt; list is a list of numbers representing &amp;ldquo;number of friends&amp;rdquo; a person has, so for example, one person has 100 friends. The first thing we do to describe the data is to create a bar chart plotting the number of people who have 100 friends, 49 friends, 41 friends, and so on.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll import &lt;code&gt;Counter&lt;/code&gt; from &lt;code&gt;collections&lt;/code&gt; and import &lt;code&gt;matplotlib.pyplot&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use &lt;code&gt;Counter&lt;/code&gt; to turn &lt;code&gt;num_friends&lt;/code&gt; list into a &lt;code&gt;defaultdict(int)&lt;/code&gt;-like object mapping keys to counts. For more info, please refer to this 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_2/#counters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous post&lt;/a&gt; on the Counters.&lt;/p&gt;
&lt;p&gt;Once we use the &lt;code&gt;Counter&lt;/code&gt; collection, a 
&lt;a href=&#34;https://docs.python.org/2/library/collections.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;high-performance container datatype&lt;/a&gt;, we can use methods like &lt;code&gt;most_common&lt;/code&gt; to find the keys with the most common values. Here we see that the five most common &lt;em&gt;number of friends&lt;/em&gt; are 6, 1, 4, 3 and 9, respectively.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import Counter

import matplotlib.pyplot as plt

friend_counts = Counter(num_friends)

# the five most common values are: 6, 1, 4, 3 and 9 friends
# [(6, 22), (1, 22), (4, 20), (3, 20), (9, 18)]
friend_counts.most_common(5) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To proceed with plotting, we&amp;rsquo;ll use &lt;code&gt;friend_counts&lt;/code&gt; to create a &lt;code&gt;list comprehension&lt;/code&gt; that will loop through &lt;code&gt;friends_count&lt;/code&gt; and for all &lt;strong&gt;keys&lt;/strong&gt; from 0-101 (xs) and print a corresponding &lt;strong&gt;value&lt;/strong&gt; (if it exists). This becomes the y-axis to &lt;code&gt;num_friends&lt;/code&gt;, which is the x-axis:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;xs = range(101)                     # x-axis: largest num_friend value is 100
ys = [friend_counts[x] for x in xs] # y-axis
plt.bar(xs, ys)
plt.axis([0, 101, 0, 25])
plt.title(&amp;quot;Histogram of Friend Counts&amp;quot;)
plt.xlabel(&amp;quot;# of friends&amp;quot;)
plt.ylabel(&amp;quot;# of people&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the plot below. You can see one person with 100 friends.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./histo_friend_counts.png&#34; alt=&#34;histo_friend_counts.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can also read more about data visualization 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_3/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Alternatively, we could generate simple statistics to describe the data using built-in Python methods: &lt;code&gt;len&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;sorted&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;num_points = len(num_friends) # number of data points in num_friends: 204
largest_value = max(num_friends) # largest value in num_friends: 100
smallest_value = min(num_friends) # smallest value in num_friends: 1

sorted_values = sorted(num_friends) # sort the values in ascending order
second_largest_value = sorted_values[-2] # second largest value from the back: 49
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;central-tendencies&#34;&gt;Central Tendencies&lt;/h3&gt;
&lt;p&gt;The most common way of describing a set of data is to find it&amp;rsquo;s &lt;strong&gt;mean&lt;/strong&gt;, which is the sum of all the values, divided by the number of values. &lt;em&gt;note&lt;/em&gt; : we&amp;rsquo;ll continue to use type annotations. In my opinion, it helps you be a more deliberate and mindful Python programmer.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import List

def mean(xs: List[float]) -&amp;gt; float:
    return sum(xs) / len(xs)
    
assert 7.3333 &amp;lt; mean(num_friends) &amp;lt; 7.3334
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, the mean is &lt;strong&gt;notoriously sensitive to outliers&lt;/strong&gt; so statisticians often supplement with other measures of central tendencies like &lt;strong&gt;median&lt;/strong&gt;. Because the median is the &lt;em&gt;middle-most value&lt;/em&gt;, it matters whether there is an &lt;em&gt;even&lt;/em&gt; or &lt;em&gt;odd&lt;/em&gt; number of data points.&lt;/p&gt;
&lt;p&gt;Here, we&amp;rsquo;ll create two private functions for both situations - even and odd number of data points - in calculating the median. First, we&amp;rsquo;ll sort the data values. Then, for &lt;em&gt;even number&lt;/em&gt; values, we&amp;rsquo;ll find the two middle values and split them. For &lt;em&gt;odd number&lt;/em&gt; of values, we&amp;rsquo;ll divide the &lt;em&gt;length&lt;/em&gt; of the dataset by 2 (i.e., 50).&lt;/p&gt;
&lt;p&gt;Our median function will return either of the private function &lt;code&gt;_median_even&lt;/code&gt; or &lt;code&gt;_median_odd&lt;/code&gt; conditionally depending on if the length of a list of numbers is divisible (%2==0) by 2.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def _median_even(xs: List[float]) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;If len(xs) is even, it&#39;s the average of the middle two elements&amp;quot;&amp;quot;&amp;quot;
    sorted_xs = sorted(xs)
    hi_midpoint = len(xs) // 2   # e.g. length 4 =&amp;gt; hi_midpoint 2
    return (sorted_xs[hi_midpoint - 1] + sorted_xs[hi_midpoint]) / 2
    
def _median_odd(xs: List[float]) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;If len(xs) is odd, its the middle element&amp;quot;&amp;quot;&amp;quot;
    return sorted(xs)[len(xs) // 2]
    
def median(v: List[float]) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;Finds the &#39;middle-most&#39; value of v&amp;quot;&amp;quot;&amp;quot;
    return _median_even(v) if len(v) % 2 == 0 else _median_odd(v)
    
assert median([1,10,2,9,5]) == 5
assert median([1, 9, 2, 10]) == (2 + 9) / 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because the median is the &lt;em&gt;middle-most value&lt;/em&gt;, it does not fully depend on every value in the data. For illustration, hypothetically if we have a another list &lt;code&gt;num_friends2&lt;/code&gt; where one person had 10,000 friends, the &lt;strong&gt;mean&lt;/strong&gt; would be much more sensitive to that change than the &lt;strong&gt;median&lt;/strong&gt; would be.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;num_friends2 = [10000.0,49,41,40,25,21,21,19,19,18,18,16,15,15,15,15,14,14
    ,13,13,13,13,12,12,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9
    ,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7
    ,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5
    ,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3
    ,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1
    ,1,1,1,1,1,1,1,1,1,1,1,1]
    
mean(num_friends2)   # more sensitive to outliers: 7.333 =&amp;gt; 55.86274509803921
median(num_friends2) # less sensitive to outliers: 6.0 =&amp;gt; 6.0

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may also used &lt;code&gt;quantiles&lt;/code&gt; to describe your data. Whenever you&amp;rsquo;ve heard &amp;ldquo;X percentile&amp;rdquo;, that is a description of quantiles relative to 100. In fact, the median is the 50th percentile (where 50% of the data lies below this point and 50% lies above).&lt;/p&gt;
&lt;p&gt;Because &lt;code&gt;quantile&lt;/code&gt; is a position from 0-100, the second argument is a float from 0.0 to 1.0. We&amp;rsquo;ll use that float to multiply with the length of the list. Then we&amp;rsquo;ll wrap in &lt;code&gt;int&lt;/code&gt; to create an integer index which we&amp;rsquo;ll use on a sorted xs to find the quantile.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def quantile(xs: List[float], p: float) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;Returns the pth-percentile value in x&amp;quot;&amp;quot;&amp;quot;
    p_index = int(p * len(xs))  
    return sorted(xs)[p_index]
    
assert quantile(num_friends, 0.10) == 1
assert quantile(num_friends, 0.25) == 3
assert quantile(num_friends, 0.75) == 9
assert quantile(num_friends, 0.90) == 13
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we have the &lt;strong&gt;mode&lt;/strong&gt;, which looks at the most common values. First, we use the &lt;code&gt;Counter&lt;/code&gt; method on our list parameter and since Counter is a subclass of &lt;code&gt;dict&lt;/code&gt; we have access to methods like &lt;code&gt;values()&lt;/code&gt; to find all the values and &lt;code&gt;items()&lt;/code&gt; to find key value pairs.&lt;/p&gt;
&lt;p&gt;We define &lt;code&gt;max_count&lt;/code&gt; to find the max value (22), then the function returns a list comprehension which loops through &lt;code&gt;counts.items()&lt;/code&gt; to find the key associated with the max_count (22). That is 1 and 6, meaning twenty-two people (the &lt;strong&gt;mode&lt;/strong&gt;) had one or six friends.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def mode(x: List[float]) -&amp;gt; List[float]:
    &amp;quot;&amp;quot;&amp;quot;Returns a list, since there might be more than one mode&amp;quot;&amp;quot;&amp;quot;
    counts = Counter(x)
    max_count = max(counts.values())
    return [x_i for x_i, count in counts.items() if count == max_count]
    

assert set(mode(num_friends)) == {1, 6}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because we had already used Counter on &lt;code&gt;num_friends&lt;/code&gt; previously (see &lt;code&gt;friend_counts&lt;/code&gt;), we could have just called the &lt;code&gt;most_common(2)&lt;/code&gt; method to get the same results:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mode(num_friends) # [6, 1]
friend_counts.most_common(2) # [(6, 22), (1, 22)]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dispersion&#34;&gt;Dispersion&lt;/h3&gt;
&lt;p&gt;Aside from our data&amp;rsquo;s central tendencies, we&amp;rsquo;ll also want to understand it&amp;rsquo;s spread or dispersion. The tools to do this are &lt;code&gt;data_range&lt;/code&gt;, &lt;code&gt;variance&lt;/code&gt;, &lt;code&gt;standard deviation&lt;/code&gt; and &lt;code&gt;interquartile range&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Range is a straightforward max value minus min value.&lt;/p&gt;
&lt;p&gt;Variance measures how far a 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Variance&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;set of numbers is from their average value&lt;/a&gt;. What&amp;rsquo;s more interesting, for our purpose, is how we need to borrow the functions we had previously built in the 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;linear algebra&lt;/a&gt; post to create the variance function.&lt;/p&gt;
&lt;p&gt;If you look at its wikipedia page, &lt;strong&gt;variance&lt;/strong&gt; is the &lt;em&gt;squared deviation&lt;/em&gt; of a variable from its mean.&lt;/p&gt;
&lt;p&gt;First, we&amp;rsquo;ll need to create the &lt;code&gt;de_mean&lt;/code&gt; function that takes a list of numbers and subtract from all numbers in the list, the mean value (this gives us the deviation from the mean).&lt;/p&gt;
&lt;p&gt;Then, we&amp;rsquo;ll &lt;code&gt;sum_of_squares&lt;/code&gt; all those deviations, which means we&amp;rsquo;ll take all the values, multiply them with itself (square it), then add the values (and divide by length of the list minus one) to get the variance.&lt;/p&gt;
&lt;p&gt;Recall that the &lt;code&gt;sum_of_squares&lt;/code&gt; is a special case of the &lt;code&gt;dot&lt;/code&gt; product function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# variance

from typing import List

Vector = List[float]

# see vectors.py in chapter 4 for dot and sum_of_squares

def dot(v: Vector, w: Vector) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;Computes v_1 * w_1 + ... + v_n * w_n&amp;quot;&amp;quot;&amp;quot;
    assert len(v) == len(w), &amp;quot;vectors must be the same length&amp;quot;
    return sum(v_i * w_i for v_i, w_i in zip(v,w))
    
def sum_of_squares(v: Vector) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;Returns v_1 * v_1 + ... + v_n * v_n&amp;quot;&amp;quot;&amp;quot;
    return dot(v,v)
    
def de_mean(xs: List[float]) -&amp;gt; List[float]:
    &amp;quot;&amp;quot;&amp;quot;Translate xs by subtracting its mean (so the result has mean 0)&amp;quot;&amp;quot;&amp;quot;
    x_bar = mean(xs)
    return [x - x_bar for x in xs]
    
def variance(xs: List[float]) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;Almost the average squared deviation from the mean&amp;quot;&amp;quot;&amp;quot;
    assert len(xs) &amp;gt;= 2, &amp;quot;variance requires at least two elements&amp;quot;
    n = len(xs)
    deviations = de_mean(xs)
    return sum_of_squares(deviations) / (n - 1)
    
assert 81.54 &amp;lt; variance(num_friends) &amp;lt; 81.55
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;variance&lt;/strong&gt; is &lt;code&gt;sum_of_squares&lt;/code&gt; deviations, which can be tricky to interpret. For example, we have a &lt;code&gt;num_friends&lt;/code&gt; with values ranging from 0 to 100.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What does a variance of 81.54 mean?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A more common alternative is the &lt;strong&gt;standard deviation&lt;/strong&gt;. Here we take the square root of the variance using Python&amp;rsquo;s &lt;code&gt;math&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;With a standard deviation of 9.03, and we know the mean of &lt;code&gt;num_friends&lt;/code&gt; is 7.3, anything below 7 + 9 = 16 or 7 - 9 (0 friends) friends is still &lt;em&gt;within a standard deviation of the mean&lt;/em&gt;. And we can check by running &lt;code&gt;friend_counts&lt;/code&gt; that most people are within a standard deviation of the mean.&lt;/p&gt;
&lt;p&gt;On the other hand, we know that someone with 20 friends is &lt;strong&gt;more than one standard deviation&lt;/strong&gt; away from the mean.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math

def standard_deviation(xs: List[float]) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;The standard deviation is the square root of the variance&amp;quot;&amp;quot;&amp;quot;
    return math.sqrt(variance(xs))
    
assert 9.02 &amp;lt; standard_deviation(num_friends) &amp;lt; 9.04
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, because the &lt;strong&gt;standard deviation&lt;/strong&gt; builds on the &lt;strong&gt;variance&lt;/strong&gt;, which is dependent on the &lt;strong&gt;mean&lt;/strong&gt;, we know that just like the mean, it can be sensitive to outliers, we can use an alternative called the &lt;strong&gt;interquartile range&lt;/strong&gt;, which is based on the &lt;strong&gt;median&lt;/strong&gt; and less sensitive to outliers.&lt;/p&gt;
&lt;p&gt;Specifically, the interquartile range can be used to examine &lt;code&gt;num_friends&lt;/code&gt; between the 25th and 75th percentile. A large chunk of people are going to have &lt;em&gt;around 6 friends&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def interquartile_range(xs: List[float]) -&amp;gt; float: 
    &amp;quot;&amp;quot;&amp;quot;Returns the difference between the 75%-ile and the 25%-ile&amp;quot;&amp;quot;&amp;quot;
    return quantile(xs, 0.75) - quantile(xs, 0.25)
    
assert interquartile_range(num_friends) == 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we describe a single list of data, we&amp;rsquo;ll also want to look at potential relationship between two data sources. For example, we may have a hypothesis that the amount of time spent on the DataScienster social network is somehow related to the number of friends someone has.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll examine covariance and correlations next.&lt;/p&gt;
&lt;h2 id=&#34;correlation&#34;&gt;Correlation&lt;/h2&gt;
&lt;p&gt;If variance is how much a &lt;em&gt;single&lt;/em&gt; set of numbers deviates from its mean (i.e., see &lt;code&gt;de_mean&lt;/code&gt; above), then &lt;strong&gt;covariance&lt;/strong&gt; measures how two sets of numbers vary from &lt;em&gt;their&lt;/em&gt; means. With the idea that if they co-vary the same amount, then they could be related.&lt;/p&gt;
&lt;p&gt;Here we&amp;rsquo;ll borrow the &lt;code&gt;dot&lt;/code&gt; production function we developed in the 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;linear algebra&lt;/a&gt; post.&lt;/p&gt;
&lt;p&gt;Moreover, we&amp;rsquo;ll examine if there&amp;rsquo;s a relationship between &lt;code&gt;num_friends&lt;/code&gt; and &lt;code&gt;daily_minutes&lt;/code&gt; and &lt;code&gt;daily_hours&lt;/code&gt; (see above).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def covariance(xs: List[float], ys: List[float]) -&amp;gt; float:
    assert len(xs) == len(ys), &amp;quot;xs and ys must have same number of elements&amp;quot;
    return dot(de_mean(xs), de_mean(ys)) / (len(xs) - 1)

assert 22.42 &amp;lt; covariance(num_friends, daily_minutes) &amp;lt; 22.43
assert 22.42 / 60 &amp;lt; covariance(num_friends, daily_hours) &amp;lt; 22.43 / 60
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with variance, a similar critique can be made of &lt;strong&gt;covariance&lt;/strong&gt;, you have to do extra steps to interpret it. For example, the covariance of &lt;code&gt;num_friends&lt;/code&gt; and &lt;code&gt;daily_minutes&lt;/code&gt; is 22.43.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What does that mean? Is that considered a strong relationship?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A more intuitive measure would be a &lt;strong&gt;correlation&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def correlation(xs: List[float], ys: List[float]) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;Measures how much xs and ys vary in tandem about their means&amp;quot;&amp;quot;&amp;quot;
    stdev_x = standard_deviation(xs)
    stdev_y = standard_deviation(ys)
    if stdev_x &amp;gt; 0 and stdev_y &amp;gt; 0:
        return covariance(xs,ys) / stdev_x / stdev_y
    else:
        return 0 # if no variation, correlation is zero

assert 0.24 &amp;lt; correlation(num_friends, daily_minutes) &amp;lt; 0.25
assert 0.24 &amp;lt; correlation(num_friends, daily_hours) &amp;lt; 0.25
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By dividing out the standard deviation of both input variables, correlation is always between -1 (perfect (anti) correlation) and 1 (perfect correlation). A correlation of 0.24 is relatively weak correlation (although what is considered weak, moderate, strong depends on the context of the data).&lt;/p&gt;
&lt;p&gt;One thing to keep in mind is &lt;strong&gt;simpson&amp;rsquo;s paradox&lt;/strong&gt; or when the relationship between two variables change when accounting for a third, &lt;strong&gt;confounding&lt;/strong&gt; variable. Moreover, we should keep this clichÃ© in mind (it&amp;rsquo;s a clichÃ© for a reason): &lt;strong&gt;correlation does not imply causation&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;We are just five chapters in and we can begin to see how we&amp;rsquo;re building the tools &lt;em&gt;now&lt;/em&gt;, that we&amp;rsquo;ll use later on. Here&amp;rsquo;s a visual summary of what we&amp;rsquo;ve covered in this post and how it connects to previous posts, namely 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;linear algebra&lt;/a&gt; and the 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;python crash course&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./summary.png&#34; alt=&#34;summary&#34;&gt;&lt;/p&gt;
&lt;p&gt;For more content on data science, machine learning, R, Python, SQL and more, 
&lt;a href=&#34;https://twitter.com/paulapivat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Going beyond summary statistics</title>
      <link>/post/datasaurus/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/post/datasaurus/</guid>
      <description>


&lt;div id=&#34;datasaurus-introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Datasaurus Introduction&lt;/h2&gt;
&lt;p&gt;I recently came across the &lt;strong&gt;Datasaurus&lt;/strong&gt; dataset by Alberto Cairo on &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-10-13/readme.md&#34;&gt;#TidyTuesday&lt;/a&gt; and wanted to create a series of charts illustrating the lessons associated with this dataset, primarily to: &lt;a href=&#34;http://www.thefunctionalart.com/2016/08/download-datasaurus-never-trust-summary.html&#34;&gt;never trust summary statistics alone&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, some context. Hereâs Albertoâs &lt;a href=&#34;https://twitter.com/albertocairo/status/765167969139765250&#34;&gt;original tweet&lt;/a&gt; from years ago when he created this dataset:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;png/alberto_cairo.png&#34; alt=&#34;png&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;png&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This tweet alone doesnât communicate why we shouldnât trust summary statistics alone, so letâs unpack this. First weâll load the various packages and data weâll use.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;load-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load Packages&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ââ Attaching packages âââââââââââââââââââââââââââ tidyverse 1.3.0 ââ&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## â ggplot2 3.3.2     â purrr   0.3.4
## â tibble  3.0.3     â dplyr   1.0.1
## â tidyr   1.1.1     â stringr 1.4.0
## â readr   1.3.1     â forcats 0.5.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ââ Conflicts ââââââââââââââââââââââââââââââ tidyverse_conflicts() ââ
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggcorrplot)
library(ggridges)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;load-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load Data&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt; : &lt;code&gt;datasaurus&lt;/code&gt; and &lt;code&gt;datasaurus_dozen&lt;/code&gt; are identical. The former is provided via #TidyTuesday, the latter from &lt;a href=&#34;https://www.autodesk.com/research/publications/same-stats-different-graphs&#34;&gt;this research paper&lt;/a&gt; discussing more advanced concepts beyond the scope of this document (i.e., simulated annealing).&lt;/p&gt;
&lt;p&gt;Youâll also note that &lt;code&gt;datasaurus_dozen&lt;/code&gt; and &lt;code&gt;datasaurus_wide&lt;/code&gt; are the same data, organized differently. The former in &lt;em&gt;long&lt;/em&gt; format and the latter, in &lt;em&gt;wide&lt;/em&gt; format - see here for &lt;a href=&#34;http://www.cookbook-r.com/Manipulating_data/Converting_data_between_wide_and_long_format/&#34;&gt;details&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the most part, weâll use &lt;code&gt;datasaurus_dozen&lt;/code&gt; throughout this document. Weâll use &lt;code&gt;datasaurus_wide&lt;/code&gt; when we get to the correlation section.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;datasaurus &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-10-13/datasaurus.csv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   dataset = col_character(),
##   x = col_double(),
##   y = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;datasaurus_dozen &amp;lt;- read_tsv(&amp;#39;./data/DatasaurusDozen.tsv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   dataset = col_character(),
##   x = col_double(),
##   y = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;datasaurus_wide &amp;lt;- read_tsv(&amp;#39;./data/DatasaurusDozen-wide.tsv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Duplicated column names deduplicated: &amp;#39;away&amp;#39; =&amp;gt; &amp;#39;away_1&amp;#39; [2],
## &amp;#39;bullseye&amp;#39; =&amp;gt; &amp;#39;bullseye_1&amp;#39; [4], &amp;#39;circle&amp;#39; =&amp;gt; &amp;#39;circle_1&amp;#39; [6], &amp;#39;dino&amp;#39; =&amp;gt;
## &amp;#39;dino_1&amp;#39; [8], &amp;#39;dots&amp;#39; =&amp;gt; &amp;#39;dots_1&amp;#39; [10], &amp;#39;h_lines&amp;#39; =&amp;gt; &amp;#39;h_lines_1&amp;#39; [12],
## &amp;#39;high_lines&amp;#39; =&amp;gt; &amp;#39;high_lines_1&amp;#39; [14], &amp;#39;slant_down&amp;#39; =&amp;gt; &amp;#39;slant_down_1&amp;#39; [16],
## &amp;#39;slant_up&amp;#39; =&amp;gt; &amp;#39;slant_up_1&amp;#39; [18], &amp;#39;star&amp;#39; =&amp;gt; &amp;#39;star_1&amp;#39; [20], &amp;#39;v_lines&amp;#39;
## =&amp;gt; &amp;#39;v_lines_1&amp;#39; [22], &amp;#39;wide_lines&amp;#39; =&amp;gt; &amp;#39;wide_lines_1&amp;#39; [24], &amp;#39;x_shape&amp;#39; =&amp;gt;
## &amp;#39;x_shape_1&amp;#39; [26]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   .default = col_character()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## See spec(...) for full column specifications.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;eyeballing-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Eyeballing the data&lt;/h2&gt;
&lt;p&gt;Here are the first six rows of &lt;code&gt;datasaurus_dozen&lt;/code&gt; (long):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   dataset     x     y
##   &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 dino     55.4  97.2
## 2 dino     51.5  96.0
## 3 dino     46.2  94.5
## 4 dino     42.8  91.4
## 5 dino     40.8  88.3
## 6 dino     38.7  84.9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are the first six rows of &lt;code&gt;datasaurus_wide&lt;/code&gt; (wide):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 26
##   away  away_1 bullseye bullseye_1 circle circle_1 dino  dino_1 dots  dots_1
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; 
## 1 x     y      x        y          x      y        x     y      x     y     
## 2 32.3â¦ 61.41â¦ 51.2038â¦ 83.339776â¦ 55.99â¦ 79.2772â¦ 55.3â¦ 97.17â¦ 51.1â¦ 90.86â¦
## 3 53.4â¦ 26.18â¦ 58.9744â¦ 85.499817â¦ 50.03â¦ 79.0130â¦ 51.5â¦ 96.02â¦ 50.5â¦ 89.10â¦
## 4 63.9â¦ 30.83â¦ 51.8720â¦ 85.829737â¦ 51.28â¦ 82.4359â¦ 46.1â¦ 94.48â¦ 50.2â¦ 85.46â¦
## 5 70.2â¦ 82.53â¦ 48.1799â¦ 85.045116â¦ 51.17â¦ 79.1652â¦ 42.8â¦ 91.41â¦ 50.0â¦ 83.05â¦
## 6 34.1â¦ 45.73â¦ 41.6832â¦ 84.017940â¦ 44.37â¦ 78.1646â¦ 40.7â¦ 88.33â¦ 50.5â¦ 82.93â¦
## # â¦ with 16 more variables: h_lines &amp;lt;chr&amp;gt;, h_lines_1 &amp;lt;chr&amp;gt;, high_lines &amp;lt;chr&amp;gt;,
## #   high_lines_1 &amp;lt;chr&amp;gt;, slant_down &amp;lt;chr&amp;gt;, slant_down_1 &amp;lt;chr&amp;gt;, slant_up &amp;lt;chr&amp;gt;,
## #   slant_up_1 &amp;lt;chr&amp;gt;, star &amp;lt;chr&amp;gt;, star_1 &amp;lt;chr&amp;gt;, v_lines &amp;lt;chr&amp;gt;, v_lines_1 &amp;lt;chr&amp;gt;,
## #   wide_lines &amp;lt;chr&amp;gt;, wide_lines_1 &amp;lt;chr&amp;gt;, x_shape &amp;lt;chr&amp;gt;, x_shape_1 &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are 13 variables, each with X- and Y- axes.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary-statistics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary Statistics&lt;/h2&gt;
&lt;p&gt;First, weâll note that if we just look at summary statistics (i.e., &lt;strong&gt;mean&lt;/strong&gt; and &lt;strong&gt;standard deviation&lt;/strong&gt;), we might conclude that these variables are all the &lt;em&gt;same&lt;/em&gt;. Moreover, within each variable, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values have very &lt;strong&gt;similarly low correlations&lt;/strong&gt; at ranging from -0.06 to -0.07.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;datasaurus_dozen %&amp;gt;%
    group_by(dataset) %&amp;gt;%
    summarize(
        x_mean = mean(x),
        x_sd = sd(x),
        y_mean = mean(y),
        y_sd = sd(y),
        corr = cor(x,y)
    )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `summarise()` ungrouping output (override with `.groups` argument)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 13 x 6
##    dataset    x_mean  x_sd y_mean  y_sd    corr
##    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1 away         54.3  16.8   47.8  26.9 -0.0641
##  2 bullseye     54.3  16.8   47.8  26.9 -0.0686
##  3 circle       54.3  16.8   47.8  26.9 -0.0683
##  4 dino         54.3  16.8   47.8  26.9 -0.0645
##  5 dots         54.3  16.8   47.8  26.9 -0.0603
##  6 h_lines      54.3  16.8   47.8  26.9 -0.0617
##  7 high_lines   54.3  16.8   47.8  26.9 -0.0685
##  8 slant_down   54.3  16.8   47.8  26.9 -0.0690
##  9 slant_up     54.3  16.8   47.8  26.9 -0.0686
## 10 star         54.3  16.8   47.8  26.9 -0.0630
## 11 v_lines      54.3  16.8   47.8  26.9 -0.0694
## 12 wide_lines   54.3  16.8   47.8  26.9 -0.0666
## 13 x_shape      54.3  16.8   47.8  26.9 -0.0656&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;boxplots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Boxplots&lt;/h2&gt;
&lt;p&gt;You could use &lt;code&gt;boxplots&lt;/code&gt; to show &lt;em&gt;slight&lt;/em&gt; variation in the distribution and &lt;strong&gt;median&lt;/strong&gt; values of these 13 variables. However, the &lt;strong&gt;mean&lt;/strong&gt; values, indicated with the red circles, are identical.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;datasaurus_dozen %&amp;gt;%
    ggplot(aes(x = dataset, y = x, fill = dataset)) +
    geom_boxplot(alpha = 0.6) +
    stat_summary(fun = mean, geom = &amp;quot;point&amp;quot;, shape = 20, size = 6, color = &amp;quot;red&amp;quot;, fill = &amp;quot;red&amp;quot;) +
    scale_fill_brewer(palette = &amp;quot;Set3&amp;quot;) +
    theme_classic() +
    theme(legend.position = &amp;#39;none&amp;#39;) +
    labs(
        y = &amp;#39;13 variables&amp;#39;,
        x = &amp;#39;X-values&amp;#39;,
        title = &amp;quot;Boxplots: Slight differences in the distribution and median values (X-axis)&amp;quot;,
        subtitle = &amp;quot;Identical mean values&amp;quot;
    )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in RColorBrewer::brewer.pal(n, pal): n too large, allowed maximum for palette Set3 is 12
## Returning the palette you asked for with that many colors&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-11-16-datasaurus_files/figure-html/boxplot_x-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Hereâs the same plot for &lt;code&gt;y&lt;/code&gt; values:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;datasaurus_dozen %&amp;gt;%
    ggplot(aes(x = dataset, y = y, fill = dataset)) +
    geom_boxplot(alpha = 0.6) +
    stat_summary(fun = mean, geom = &amp;quot;point&amp;quot;, shape = 20, size = 6, color = &amp;quot;red&amp;quot;, fill = &amp;quot;red&amp;quot;) +
    scale_fill_brewer(palette = &amp;quot;Paired&amp;quot;) +
    theme_classic() +
    theme(legend.position = &amp;#39;none&amp;#39;) +
    labs(
        y = &amp;#39;13 variables&amp;#39;,
        x = &amp;#39;Y-values&amp;#39;,
        title = &amp;quot;Boxplots: Slight differences in the distribution and median values (Y-axis)&amp;quot;,
        subtitle = &amp;quot;Identical mean values&amp;quot;
    )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in RColorBrewer::brewer.pal(n, pal): n too large, allowed maximum for palette Paired is 12
## Returning the palette you asked for with that many colors&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-11-16-datasaurus_files/figure-html/boxplot_y-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ridgeline-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Ridgeline Plot&lt;/h2&gt;
&lt;p&gt;We can begin to get a sense for how these variables are different if we plot the distribution in different ways. The ridgeline plot begins to reveal aspects of the data that were hidden before.&lt;/p&gt;
&lt;p&gt;We can begin to see that certain variables have markedly different distribution shapes (i.e., &lt;code&gt;v_lines&lt;/code&gt;, &lt;code&gt;dots&lt;/code&gt;, &lt;code&gt;x_shape&lt;/code&gt;, &lt;code&gt;wide_lines&lt;/code&gt;), while having the same &lt;strong&gt;mean&lt;/strong&gt; value.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;datasaurus_dozen %&amp;gt;%
    ggplot(aes(x = x, y = dataset, fill = dataset)) +
    geom_density_ridges_gradient(scale = 3, quantile_lines = T, quantile_fun = mean) +
    scale_fill_manual(values = c(&amp;#39;#a6cee3&amp;#39;, &amp;#39;#1f78b4&amp;#39;, &amp;#39;#b2df8a&amp;#39;, &amp;#39;#33a02c&amp;#39;, &amp;#39;#fb9a99&amp;#39;, &amp;#39;#e31a1c&amp;#39;, &amp;#39;#fdbf6f&amp;#39;, &amp;#39;#ff7f00&amp;#39;, &amp;#39;#cab2d6&amp;#39;, &amp;#39;#6a3d9a&amp;#39;, &amp;#39;#ffff99&amp;#39;, &amp;#39;#b15928&amp;#39;, &amp;#39;grey&amp;#39;)) +
    theme_classic() +
    theme(legend.position = &amp;#39;none&amp;#39;) +
    labs(
        x = &amp;quot;X-values&amp;quot;,
        y = &amp;quot;13 variables&amp;quot;,
        title = &amp;quot;Ridgeline Plot: More variation in the distribution (X-axis)&amp;quot;,
        subtitle = &amp;quot;Identical mean values&amp;quot;
    )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Picking joint bandwidth of 5.46&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-11-16-datasaurus_files/figure-html/ridgeline_x-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;y&lt;/code&gt; values, &lt;code&gt;high_lines&lt;/code&gt;, &lt;code&gt;dots&lt;/code&gt;, &lt;code&gt;circle&lt;/code&gt; and &lt;code&gt;star&lt;/code&gt; have obviously different distributions from the rest. Again, the &lt;strong&gt;mean&lt;/strong&gt; values are identical across variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;datasaurus_dozen %&amp;gt;%
    ggplot(aes(x = y, y = dataset, fill = dataset)) +
    geom_density_ridges_gradient(scale = 3, quantile_lines = T, quantile_fun = mean) +
    scale_fill_manual(values = c(&amp;#39;#a6cee3&amp;#39;, &amp;#39;#1f78b4&amp;#39;, &amp;#39;#b2df8a&amp;#39;, &amp;#39;#33a02c&amp;#39;, &amp;#39;#fb9a99&amp;#39;, &amp;#39;#e31a1c&amp;#39;, &amp;#39;#fdbf6f&amp;#39;, &amp;#39;#ff7f00&amp;#39;, &amp;#39;#cab2d6&amp;#39;, &amp;#39;#6a3d9a&amp;#39;, &amp;#39;#ffff99&amp;#39;, &amp;#39;#b15928&amp;#39;, &amp;#39;grey&amp;#39;)) +
    theme_classic() +
    theme(legend.position = &amp;#39;none&amp;#39;) +
    labs(
        x = &amp;quot;Y-values&amp;quot;,
        y = &amp;quot;13 variables&amp;quot;,
        title = &amp;quot;Ridgeline Plot: More variation in the distribution (Y-axis)&amp;quot;,
        subtitle = &amp;quot;Identical mean values&amp;quot;
    )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Picking joint bandwidth of 9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-11-16-datasaurus_files/figure-html/ridgeline_y-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;correlations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Correlations&lt;/h2&gt;
&lt;p&gt;If you skip visualizing the distribution and central tendencies and go straight to seeing how the variables correlate with each other, you could also miss some fundamental differences in the data.&lt;/p&gt;
&lt;p&gt;In particular, the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values across all 13 variables are &lt;em&gt;highlight correlated&lt;/em&gt;. With just knowledge of the summary statistics, one could be led to believe that these variables are &lt;em&gt;highly similar&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Below is an abbreviated &lt;strong&gt;correlation matrix&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggcorrplot)

# X-values
# selecting rows 2-143 
# turning all values from character to numeric
datasaurus_wide_x &amp;lt;- datasaurus_wide %&amp;gt;%
    slice(2:143) %&amp;gt;%
    select(away, bullseye, circle, dino, dots, h_lines, high_lines, slant_down, slant_up, star, v_lines, wide_lines, x_shape) %&amp;gt;%
    mutate_if(is.character, as.numeric)
    
# Y-values
# selecting rows 2-143 
# turning all values from character to numeric
datasaurus_wide_y &amp;lt;- datasaurus_wide %&amp;gt;%
    slice(2:143) %&amp;gt;%
    select(away_1, bullseye_1, circle_1, dino_1, dots_1, h_lines_1, high_lines_1, slant_down_1, slant_up_1, star_1, v_lines_1, wide_lines_1, x_shape_1) %&amp;gt;%
    mutate_if(is.character, as.numeric)


# correlation matrix for X values
corr_x &amp;lt;- round(cor(datasaurus_wide_x), 1)

# correlation matrix for Y values
corr_y &amp;lt;- round(cor(datasaurus_wide_y), 1)

head(corr_x[, 1:6])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          away bullseye circle dino dots h_lines
## away      1.0     -0.3   -0.3 -0.3 -0.3    -0.3
## bullseye -0.3      1.0    0.9  0.9  0.9     0.9
## circle   -0.3      0.9    1.0  0.9  0.8     0.9
## dino     -0.3      0.9    0.9  1.0  0.9     1.0
## dots     -0.3      0.9    0.8  0.9  1.0     0.9
## h_lines  -0.3      0.9    0.9  1.0  0.9     1.0&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;visualizing-the-correlation-matrix&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Visualizing the correlation matrix&lt;/h3&gt;
&lt;p&gt;Here is a correlation between the &lt;code&gt;x-values&lt;/code&gt; between all 13 variables. You can see that all variables, aside from &lt;code&gt;away&lt;/code&gt;, are highly correlated with each other.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# correlation between X-values
ggcorrplot(corr_x, hc.order = TRUE, 
           type=&amp;quot;lower&amp;quot;, 
           outline.color = &amp;quot;white&amp;quot;,
           ggtheme = ggplot2::theme_gray,
           colors = c(&amp;quot;#d8b365&amp;quot;, &amp;quot;#f5f5f5&amp;quot;, &amp;quot;#5ab4ac&amp;quot;),
           lab = TRUE) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-11-16-datasaurus_files/figure-html/corr_x_viz-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here is a correlation between the ây-valuesâ between all 13 variables. Again, aside from &lt;code&gt;away&lt;/code&gt;, all the variables are highly correlated with each other.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# correlation between Y-values
ggcorrplot(corr_y, hc.order = TRUE, 
           type=&amp;quot;lower&amp;quot;, 
           outline.color = &amp;quot;white&amp;quot;,
           ggtheme = ggplot2::theme_gray,
           colors = c(&amp;quot;#ef8a62&amp;quot;, &amp;quot;#f7f7f7&amp;quot;, &amp;quot;#67a9cf&amp;quot;),
           lab = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-11-16-datasaurus_files/figure-html/corr_y_viz-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;facets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Facets&lt;/h2&gt;
&lt;p&gt;At this point, the &lt;strong&gt;boxplots&lt;/strong&gt; show us variables with &lt;em&gt;similar median&lt;/em&gt; and &lt;em&gt;identical mean&lt;/em&gt;; the &lt;strong&gt;ridgelines&lt;/strong&gt; begin to show us that some variables have different distributions. And the &lt;strong&gt;correlation matrix&lt;/strong&gt; suggests the variables are more similar than not.&lt;/p&gt;
&lt;p&gt;To really see their differences, weâll need to use &lt;code&gt;facet_wrap&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here weâll use &lt;code&gt;facet_wrap&lt;/code&gt; to examine the histogram for &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values of all 13 variables. We started to see the differences in distribution between variables from the &lt;code&gt;ridgeline&lt;/code&gt; plots, but overlapping histograms provide another perspective.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# facet histogram (both-values)
datasaurus_dozen %&amp;gt;%
    group_by(dataset) %&amp;gt;%
    ggplot() +
    geom_histogram(aes(x=x, fill=&amp;#39;red&amp;#39;), alpha = 0.5, bins = 30) +
    geom_histogram(aes(x=y, fill=&amp;#39;green&amp;#39;), alpha = 0.5, bins = 30) +
    facet_wrap(~dataset) +
    scale_fill_discrete(labels = c(&amp;#39;y&amp;#39;, &amp;#39;x&amp;#39;)) +
    theme_classic() +
    labs(
        fill = &amp;#39;Axes&amp;#39;,
        x = &amp;#39;&amp;#39;,
        y = &amp;#39;Count&amp;#39;,
        title = &amp;#39;Faceted Histogram: x- and y-values&amp;#39;
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-11-16-datasaurus_files/figure-html/facet_histo-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scatter-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Scatter Plot&lt;/h2&gt;
&lt;p&gt;However, if thereâs one thing this dataset is trying to communicate its that thereâs no subtitute for plotting the actual data points. No amount of summary statistics, central tendency or distribution is going to replace &lt;strong&gt;plotting actually data points&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Once we create the scatter plot with &lt;code&gt;geom_point&lt;/code&gt;, we see the big reveal with this dataset. That despite the similarities in central measures, for the most part similar distributions and high correlations, the 13 variables are &lt;strong&gt;wildly different&lt;/strong&gt; from each other.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;datasaurus_dozen %&amp;gt;%
    group_by(dataset) %&amp;gt;%
    ggplot(aes(x=x, y=y, color=dataset)) +
    geom_point(alpha = 0.5) +
    facet_wrap(~dataset) +
    scale_color_manual(values = c(&amp;#39;#a6cee3&amp;#39;, &amp;#39;#1f78b4&amp;#39;, &amp;#39;#b2df8a&amp;#39;, &amp;#39;#33a02c&amp;#39;, &amp;#39;#fb9a99&amp;#39;, &amp;#39;#e31a1c&amp;#39;, &amp;#39;#fdbf6f&amp;#39;, &amp;#39;#ff7f00&amp;#39;, &amp;#39;#cab2d6&amp;#39;, &amp;#39;#6a3d9a&amp;#39;, &amp;#39;#ffff99&amp;#39;, &amp;#39;#b15928&amp;#39;, &amp;#39;grey&amp;#39;)) +
    theme_classic() +
    theme(legend.position = &amp;quot;none&amp;quot;) +
    labs(
        x = &amp;#39;X-axis&amp;#39;,
        y = &amp;#39;Y-axis&amp;#39;,
        title = &amp;#39;Faceted Scatter Plot&amp;#39;
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-11-16-datasaurus_files/figure-html/facet_scatter-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are other less common alternatives to the &lt;strong&gt;scatter plot&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;geom-density-2d&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Geom Density 2D&lt;/h2&gt;
&lt;p&gt;While not as clear as the &lt;strong&gt;scatter plot&lt;/strong&gt;, plotting the &lt;strong&gt;contours&lt;/strong&gt; of a 2D density estimate does show how very different the variables are from each other, despite similar summary statistics.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# contours of a 2D Density estimate
datasaurus_dozen %&amp;gt;%
    ggplot(aes(x=x, y=y)) +
    geom_density_2d() +
    theme_classic() +
    facet_wrap(~dataset) +
    labs(
        x = &amp;#39;X-axis&amp;#39;,
        y = &amp;#39;Y-axis&amp;#39;,
        title = &amp;#39;Contours of a 2D density estimate&amp;#39;
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-11-16-datasaurus_files/figure-html/geom_density_contour-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is a slight variation using &lt;code&gt;stat_density_2d&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# stat density 2d
datasaurus_dozen %&amp;gt;%
    ggplot(aes(x=x, y=y)) +
    stat_density_2d(aes(fill=y), geom = &amp;quot;polygon&amp;quot;, colour = &amp;#39;white&amp;#39;) +
    theme_classic() +
    facet_wrap(~dataset) +
    labs(
        x = &amp;#39;X-axis&amp;#39;,
        y = &amp;#39;Y-axis&amp;#39;,
        title = &amp;#39;Stat Density 2D estimate&amp;#39;
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-11-16-datasaurus_files/figure-html/stat_density-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;density_2d&lt;/code&gt; plots are quite effective in showing how different the variables are and serve as a nice alternative to the more familiar scatter plot.&lt;/p&gt;
&lt;p&gt;Hopefully this vignette illustrates the importance of never trusting summary statistics (alone). Moreover, when visualizing, we should go beyond simply visualizing the dataâs distribution or central tendency, but plotting the actually data points.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Science from Scratch (ch4) - Linear Algebra</title>
      <link>/post/dsfs_4/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/post/dsfs_4/</guid>
      <description>&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#vectors&#34;&gt;Vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#matrices&#34;&gt;Matrices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll see the &lt;strong&gt;from scratch&lt;/strong&gt; aspect of the book play out as we implement several building block functions to help us work towards defining the &lt;strong&gt;Euclidean Distance&lt;/strong&gt; in code:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./distance_vectors.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;While we don&amp;rsquo;t see its application immediately, we can expect to see the &lt;strong&gt;Euclidean Distance&lt;/strong&gt; used for K-nearest neighbors (classication) or K-means (clustering) to find the &amp;ldquo;k closest points&amp;rdquo; (
&lt;a href=&#34;https://sebastianraschka.com/faq/docs/euclidean-distance.html#:~:text=Machine%20Learning%20FAQ&amp;amp;text=For%20example%2C%20picture%20it%20as,of%20a%20particular%20sample%20point.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;). (&lt;em&gt;note&lt;/em&gt; : there are other types of distance formulas used as well.)&lt;/p&gt;
&lt;p&gt;En route towards implementing the &lt;strong&gt;Euclidean Distance&lt;/strong&gt;, we also implement the &lt;strong&gt;sum of squares&lt;/strong&gt; which is a crucial piece for how &lt;strong&gt;regression&lt;/strong&gt; works.&lt;/p&gt;
&lt;p&gt;Thus, the &lt;strong&gt;from scratch&lt;/strong&gt; aspect of this book works on two levels. &lt;em&gt;Within&lt;/em&gt; this chapter, we&amp;rsquo;re building piece by piece up to an important &lt;strong&gt;distance&lt;/strong&gt; and &lt;strong&gt;sum of squares&lt;/strong&gt; formula. But we&amp;rsquo;re also building tools we&amp;rsquo;ll use in subsequent chapters.&lt;/p&gt;
&lt;h2 id=&#34;vectors&#34;&gt;Vectors&lt;/h2&gt;
&lt;p&gt;We start off with implementing functions to &lt;strong&gt;add&lt;/strong&gt; and &lt;strong&gt;subtract&lt;/strong&gt; two vectors. We also create a function for &lt;em&gt;component wise sum&lt;/em&gt; of a list of vectors, where a new vector is created whose first element is the sum of all the first elements in the list and so on.&lt;/p&gt;
&lt;p&gt;We then create a function to &lt;strong&gt;multiply&lt;/strong&gt; a vector by  scalar, which we use to compute the &lt;em&gt;component wise mean&lt;/em&gt; of a list of vectors.&lt;/p&gt;
&lt;p&gt;We also create the &lt;strong&gt;dot product&lt;/strong&gt; of two vectors or the &lt;em&gt;sum of their component wise product&lt;/em&gt;, and this is is the generalize version of the &lt;strong&gt;sum of squares&lt;/strong&gt;. At this point, we have enough to implement the &lt;strong&gt;Euclidean distance&lt;/strong&gt;. Let&amp;rsquo;s take a look at the code:&lt;/p&gt;
&lt;h4 id=&#34;example-vectors&#34;&gt;Example Vectors&lt;/h4&gt;
&lt;p&gt;Vectors are simply a list of numbers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;height_weight_age = [70,170,40]

grades = [95,80,75,62]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;add&#34;&gt;Add&lt;/h3&gt;
&lt;p&gt;You&amp;rsquo;ll &lt;em&gt;note&lt;/em&gt; that we do &lt;strong&gt;type annotation&lt;/strong&gt; on our code throughout. This is a convention advocated by the author (and as a newcomer to Python, I like the idea of being explicit about data type for a function&amp;rsquo;s input and output).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import List

Vector = List[float]

def add(v: Vector, w: Vector) -&amp;gt; Vector:
    &amp;quot;&amp;quot;&amp;quot;Adds corresponding elements&amp;quot;&amp;quot;&amp;quot;
    assert len(v) == len(w), &amp;quot;vectors must be the same length&amp;quot;
    return [v_i + w_i for v_i, w_i in zip(v,w)]
    
assert add([1,2,3], [4,5,6]) == [5,7,9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s another view of what&amp;rsquo;s going on with the &lt;code&gt;add&lt;/code&gt; function:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./add.png&#34; alt=&#34;add&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;subtract&#34;&gt;Subtract&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def subtract(v: Vector, w: Vector) -&amp;gt; Vector:
    &amp;quot;&amp;quot;&amp;quot;Subtracts corresponding elements&amp;quot;&amp;quot;&amp;quot;
    assert len(v) == len(w), &amp;quot;vectors must be the same length&amp;quot;
    return [v_i - w_i for v_i, w_i in zip(v,w)]
    
assert subtract([5,7,9], [4,5,6]) == [1,2,3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is pretty much the same as the previous:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./subtract.png&#34; alt=&#34;subtract&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;componentwise-sum&#34;&gt;Componentwise Sum&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def vector_sum(vectors: List[Vector]) -&amp;gt; Vector:
    &amp;quot;&amp;quot;&amp;quot;Sum all corresponding elements (componentwise sum)&amp;quot;&amp;quot;&amp;quot;
    # Check that vectors is not empty
    assert vectors, &amp;quot;no vectors provided!&amp;quot;
    # Check the vectorss are all the same size
    num_elements = len(vectors[0])
    assert all(len(v) == num_elements for v in vectors), &amp;quot;different sizes!&amp;quot;
    # the i-th element of the result is the sum of every vector[i]
    return [sum(vector[i] for vector in vectors)
            for i in range(num_elements)]
            
assert vector_sum([[1,2], [3,4], [5,6], [7,8]]) == [16,20]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, a &lt;code&gt;list&lt;/code&gt; of vectors becomes &lt;em&gt;one&lt;/em&gt; vector. If you go back to the &lt;code&gt;add&lt;/code&gt; function, it takes &lt;strong&gt;two&lt;/strong&gt; vectors, so if we tried to give it four vectors, we&amp;rsquo;d get a &lt;code&gt;TypeError&lt;/code&gt;. So we wrap four vectors in a &lt;code&gt;list&lt;/code&gt; and provide &lt;em&gt;that&lt;/em&gt; as the argument for &lt;code&gt;vector_sum&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./vector_sum.png&#34; alt=&#34;vector_sum&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;multiply-vector-with-a-number&#34;&gt;Multiply Vector with a Number&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def scalar_multiply(c: float, v: Vector) -&amp;gt; Vector:
    &amp;quot;&amp;quot;&amp;quot;Multiplies every element by c&amp;quot;&amp;quot;&amp;quot;
    return [c * v_i for v_i in v]
    
assert scalar_multiply(2, [2,4,6]) == [4,8,12]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One number is multiplied with &lt;em&gt;all&lt;/em&gt; numbers in the vector, with the vector retaining its length:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./multiply.png&#34; alt=&#34;multiply&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;componentwise-mean&#34;&gt;Componentwise Mean&lt;/h3&gt;
&lt;p&gt;This is similar to componentwise sum (see above); a list of vectors becomes one vector.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def vector_mean(vectors: List[Vector]) -&amp;gt; Vector: 
    &amp;quot;&amp;quot;&amp;quot;Computes the element-wise average&amp;quot;&amp;quot;&amp;quot;
    n = len(vectors)
    return scalar_multiply(1/n, vector_sum(vectors))
    
assert vector_mean([ [1,2], [3,4], [5,6] ]) == [3,4]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dot-product&#34;&gt;Dot Product&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def dot(v: Vector, w: Vector) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;Computes v_1 * w_1 + ... + v_n * w_n&amp;quot;&amp;quot;&amp;quot;
    assert len(v) == len(w), &amp;quot;vectors must be the same length&amp;quot;
    return sum(v_i * w_i for v_i, w_i in zip(v,w))
    
assert dot([1,2,3], [4,5,6]) == 32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we multiply the elements, then sum their results. Two vectors becomes a single number (&lt;code&gt;float&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./dot_product.png&#34; alt=&#34;dot_product&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;sum-of-squares&#34;&gt;Sum of Squares&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sum_of_squares(v: Vector) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;Returns v_1 * v_1 + ... + v_n * v_n&amp;quot;&amp;quot;&amp;quot;
    return dot(v,v)
    
assert sum_of_squares([1,2,3]) == 14
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In fact, &lt;code&gt;sum_of_squares&lt;/code&gt; is a special case of &lt;strong&gt;dot product&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./sum_of_squares.png&#34; alt=&#34;sum_of_squares&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;magnitude&#34;&gt;Magnitude&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def magnitude(v: Vector) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;Returns  the magnitude (or length) of v&amp;quot;&amp;quot;&amp;quot;
    return math.sqrt(sum_of_squares(v)) # math.sqrt is the square root function
    
assert magnitude([3,4]) == 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;magnitude&lt;/code&gt; we square root the &lt;code&gt;sum_of_squares&lt;/code&gt;. This is none other than the 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Pythagorean_theorem&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pythagorean theorem&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./magnitude.png&#34; alt=&#34;magnitude&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;squared-distance&#34;&gt;Squared Distance&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def squared_distance(v: Vector, w: Vector) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;Computes (v_1 - w_1) ** 2 + ... + (v_n - w_n) ** 2&amp;quot;&amp;quot;&amp;quot;
    return sum_of_squares(subtract(v,w))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the distance &lt;em&gt;between&lt;/em&gt; two vectors, &lt;em&gt;squared&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./squared_distance.png&#34; alt=&#34;squared_distance&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;euclidean-distance&#34;&gt;(Euclidean) Distance&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math

def distance(v: Vector, w: Vector) -&amp;gt; float:
    &amp;quot;&amp;quot;&amp;quot;Also computes the distance between v and w&amp;quot;&amp;quot;&amp;quot;
    return math.sqrt(squared_distance(v,w))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we square root the &lt;code&gt;squared_distance&lt;/code&gt; to get the (euclidean) distance:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./distance_vectors.png&#34; alt=&#34;distance_vectors&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;We literally built from scratch, albeit with some help from Python&amp;rsquo;s &lt;code&gt;math&lt;/code&gt; module, the blocks needed for essential functions that we&amp;rsquo;ll expect to use later, namely: the &lt;code&gt;sum_of_squares&lt;/code&gt; and &lt;code&gt;distance&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s pretty cool to see these foundational concepts set us up to understand more complex machine learning algorithms like &lt;strong&gt;regression&lt;/strong&gt;, &lt;strong&gt;k-nearest neighbors (classification)&lt;/strong&gt;, &lt;strong&gt;k-means (clustering)&lt;/strong&gt; and even touch on the &lt;strong&gt;pythagorean theorem&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll examine matrices next.&lt;/p&gt;
&lt;h2 id=&#34;matrices&#34;&gt;Matrices&lt;/h2&gt;
&lt;p&gt;The first thing to note is that &lt;code&gt;matrices&lt;/code&gt; are represented as &lt;code&gt;lists&lt;/code&gt; of &lt;code&gt;lists&lt;/code&gt; which is explicit with type annotation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import List

Matrix = List[List[float]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might bet wondering if a &lt;code&gt;list&lt;/code&gt; of &lt;code&gt;lists&lt;/code&gt; is somehow different from a &lt;code&gt;list&lt;/code&gt; of &lt;code&gt;vectors&lt;/code&gt; we saw previously with the &lt;code&gt;vector_sum&lt;/code&gt; function. To see, I used &lt;strong&gt;type annotation&lt;/strong&gt; to try to define the arguments &lt;em&gt;differently&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the &lt;code&gt;vector_sum&lt;/code&gt; function we defined previously:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def vector_sum(vectors: List[Vector]) -&amp;gt; Vector:
    &amp;quot;&amp;quot;&amp;quot;Sum all corresponding elements (componentwise sum)&amp;quot;&amp;quot;&amp;quot;
    # Check that vectors is not empty
    assert vectors, &amp;quot;no vectors provided!&amp;quot;
    # Check the vectorss are all the same size
    num_elements = len(vectors[0])
    assert all(len(v) == num_elements for v in vectors), &amp;quot;different sizes!&amp;quot;
    # the i-th element of the result is the sum of every vector[i]
    return [sum(vector[i] for vector in vectors)
            for i in range(num_elements)]
            
assert vector_sum([[1,2], [3,4], [5,6], [7,8]]) == [16,20]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s a &lt;strong&gt;new&lt;/strong&gt; function, &lt;code&gt;vector_sum2&lt;/code&gt; defined differently with type annotation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def vector_sum2(lists: List[List[float]]) -&amp;gt; List:
   &amp;quot;&amp;quot;&amp;quot;Sum all corresponding list (componentwise sum?)&amp;quot;&amp;quot;&amp;quot;
   assert lists, &amp;quot;this list is empty!&amp;quot;
   # check that lists are the same size
   num_lists = len(lists[0])
   assert all(len(l) == num_lists for l in lists), &amp;quot;different sizes!&amp;quot;
   # the i-th list is the sum of every list[i]
   return [sum(l[i] for l in lists)
           for i in range(num_lists)]

assert vector_sum2([[1,2], [3,4], [5,6], [7,8]]) == [16,20]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I did a variety of things to see if &lt;code&gt;vector_sum&lt;/code&gt; and &lt;code&gt;vector_sum2&lt;/code&gt; behaved differently, but they appear to be identical:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# both are functions
assert callable(vector_sum) == True
assert callable(vector_sum2) == True

# when taking the same argument, they both return a list
type(vector_sum([[1,2], [3,4], [5,6], [7,8]])) #list
type(vector_sum2([[1,2], [3,4], [5,6], [7,8]])) #list

# the same input yields the same output
vector_sum([[1,2],[3,4]])    # [4,6]
vector_sum2([[1,2],[3,4]])   # [4,6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To keep it simple, in the context of &lt;strong&gt;matrices&lt;/strong&gt;, you can think of &lt;strong&gt;vectors&lt;/strong&gt; as the &lt;em&gt;rows of the matrix&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For example, if we represent the small dataset below as a &lt;strong&gt;matrix&lt;/strong&gt;, we can think of &lt;em&gt;columns&lt;/em&gt; as variables like: height, weight, age; and &lt;em&gt;each row&lt;/em&gt; as a person:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sample_data = [[70, 170, 40],
               [65, 120, 26],
               [77, 250, 19]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By extension of &lt;strong&gt;rows&lt;/strong&gt; and &lt;strong&gt;columns&lt;/strong&gt;, we can write a function for the shape of a matrix. This below &lt;code&gt;shape&lt;/code&gt; function takes in a matrix and returns a &lt;code&gt;tuple&lt;/code&gt; with two integers, number of rows and number of columns:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import Tuple
  
def shape(A: Matrix) -&amp;gt; Tuple[int, int]:
    &amp;quot;&amp;quot;&amp;quot;Returns (# of rows of A, # of columns of A)&amp;quot;&amp;quot;&amp;quot;
    num_rows = len(A)
    num_cols = len(A[0]) if A else 0  # number of elements in first row
    return num_rows, num_cols
    
assert shape([[1,2,3], [4,5,6]]) == (2,3) # 2 rows, 3 columns
assert shape(sample_data) == (3,3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can actually write functions to grab either a specific &lt;em&gt;row&lt;/em&gt; or a specific &lt;em&gt;columns&lt;/em&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Vector = List[float]

# rows
def get_row(A: Matrix, i: int) -&amp;gt; Vector:
    &amp;quot;&amp;quot;&amp;quot;Returns the i-th row of A (as a Vector)&amp;quot;&amp;quot;&amp;quot;
    return A[i]  # A[i] is already the ith row

# column
def get_column(A: Matrix, i: int) -&amp;gt; Vector:
    &amp;quot;&amp;quot;&amp;quot;Returns the j-th column of A (as a Vector)&amp;quot;&amp;quot;&amp;quot;
    return [A_i[j]
            for A_i in A]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, going beyond finding the shape, rows and columns of an existing matrix, we&amp;rsquo;ll also want to &lt;strong&gt;create&lt;/strong&gt; matrices and we&amp;rsquo;ll do that using &lt;strong&gt;nested list comprehensions&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import Callable

def make_matrix(num_rows: int,
                num_cols: int,
                entry_fn: Callable[[int, int], float]) -&amp;gt; Matrix:
    &amp;quot;&amp;quot;&amp;quot;
    Returns a num_rows x num_cols matrix
    whose (i,j)-th entry is entry_fn(i, j)
    &amp;quot;&amp;quot;&amp;quot;
    return [[entry_fn(i,j)            # given i, create a list
            for j in range(num_cols)] # [entry_fn(i, 0), ...]
            for i in range(num_rows)] # create one list for each i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we&amp;rsquo;ll actually &lt;em&gt;use&lt;/em&gt; the &lt;code&gt;make_matrix&lt;/code&gt; function to create a special type of matrix called the &lt;code&gt;identity matrix&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def identity_matrix(n: int) -&amp;gt; Matrix:
    &amp;quot;&amp;quot;&amp;quot;Returns the n x n identity matrix&amp;quot;&amp;quot;&amp;quot;
    return make_matrix(n, n, lambda i, j: 1 if i == j else 0)

assert identity_matrix(5) == [[1, 0, 0, 0, 0],
                              [0, 1, 0, 0, 0],
                              [0, 0, 1, 0, 0],
                              [0, 0, 0, 1, 0],
                              [0, 0, 0, 0, 1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;summary-1&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;To be sure there are 
&lt;a href=&#34;https://machinelearningmastery.com/introduction-to-types-of-matrices-in-linear-algebra/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;other types of matrices&lt;/a&gt;, but in this chapter we&amp;rsquo;re only briefly exploring its construction to prime us.&lt;/p&gt;
&lt;p&gt;We know matrices can be used to represent data, each &lt;em&gt;row&lt;/em&gt; in the dataset being a &lt;strong&gt;vector&lt;/strong&gt;. Because we can also know a matrices&#39; &lt;em&gt;column&lt;/em&gt;, we&amp;rsquo;ll use it to represent linear functions that &lt;strong&gt;map k-dimensional vectors to n-dimensional vectors&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Finally, matrices can also be used to map &lt;em&gt;binary relationships&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;flashback-to-ch1&#34;&gt;Flashback to Ch.1&lt;/h3&gt;
&lt;p&gt;On our first day at DataSciensterâ¢ we were given &lt;code&gt;friendship_pairs&lt;/code&gt; data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;friendship_pairs = [(0,1), (0,2), (1,2), (1,3), (2,3), (3,4),
                    (4,5), (5,6), (5,7), (6,8), (7,8), (8,9)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These &lt;code&gt;friendship_pairs&lt;/code&gt; can also be represented in matrix form:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#            user 0  1  2  3  4  5  6  7  8  9
friend_matrix = [[0, 1, 1, 0, 0, 0, 0, 0, 0, 0], # user 0
                 [1, 0, 1, 1, 0, 0, 0, 0, 0, 0], # user 1
                 [1, 1, 0, 1, 0, 0, 0, 0, 0, 0], # user 2
                 [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], # user 3
                 [0, 0, 0, 1, 0, 1, 0, 0, 0, 0], # user 4
                 [0, 0, 0, 0, 1, 0, 1, 1, 0, 0], # user 5
                 [0, 0, 0, 0, 0, 1, 0, 0, 1, 0], # user 6
                 [0, 0, 0, 0, 0, 1, 0, 0, 1, 0], # user 7
                 [0, 0, 0, 0, 0, 0, 1, 1, 0, 1], # user 8
                 [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]] # user 9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This allows us to check very quickly whether two users are friends or not:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;assert friend_matrix[0][2] == 1, &amp;quot;0 and 2 are friends&amp;quot;
assert friend_matrix[0][8] == 0, &amp;quot;0 and 8 are not friends&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if we wanted to check for each user&amp;rsquo;s friend, we could:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;friends_of_five = [i
                  for i, is_friend in enumerate(friend_matrix[5])
                  if is_friend]
                  
friends_of_zero = [i
                   for i, is_friend in enumerate(friend_matrix[0])
                   if is_friend]
                   
assert friends_of_five == [4,6,7]
assert friends_of_zero == [1,2]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Supplementing lists with data frames</title>
      <link>/post/list-to-df/</link>
      <pubDate>Sat, 07 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/post/list-to-df/</guid>
      <description>&lt;h2 id=&#34;beyond-collections-and-comprehensions&#34;&gt;Beyond Collections and Comprehensions&lt;/h2&gt;
&lt;p&gt;A couple days back I wrote a post summarizing how much Collections and Comprehension were used. Data was provided in the form of &lt;code&gt;lists&lt;/code&gt;, either lists of &lt;code&gt;dictionaries&lt;/code&gt; or &lt;code&gt;tuples&lt;/code&gt;. And to answer questions &lt;em&gt;about&lt;/em&gt; the data, the author often used &lt;code&gt;list comprehensions&lt;/code&gt; - iterating through lists with a for-loop. I am beginning to see this as a very Python-centric way of approaching problems.&lt;/p&gt;
&lt;p&gt;While &lt;strong&gt;not&lt;/strong&gt; all data is tabular, so much of it &lt;em&gt;is&lt;/em&gt; so its reasonable to assume that, more often that not, you&amp;rsquo;ll be dealing with spreadsheet-like tabular data (&lt;strong&gt;note&lt;/strong&gt;: I&amp;rsquo;m open to other perspectives here, feel free to leave a comment below!).&lt;/p&gt;
&lt;p&gt;In any case, I had this &lt;strong&gt;itch&lt;/strong&gt; to go back to that chapter and ask:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How would I approach the same problem using data frames?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So that&amp;rsquo;s what this post is about. You can reference these 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous post&lt;/a&gt; for context; also keep in mind, this is a brief detour and deviation from Joel Grus&#39; book (for example, I&amp;rsquo;ll be using 
&lt;a href=&#34;https://pandas.pydata.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pandas&lt;/a&gt; here and a 
&lt;a href=&#34;https://jupyter.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jupyter notebook&lt;/a&gt; here, both of which are not covered in the book).&lt;/p&gt;
&lt;p&gt;For review, here&amp;rsquo;s the data you are given as a newly hired data scientist at Data Sciensterâ¢&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# users in the network
# stored as a list of dictionaries
users = [
    {&amp;quot;id&amp;quot;: 0, &amp;quot;name&amp;quot;: &amp;quot;Hero&amp;quot;},
    {&amp;quot;id&amp;quot;: 1, &amp;quot;name&amp;quot;: &amp;quot;Dunn&amp;quot;},
    {&amp;quot;id&amp;quot;: 2, &amp;quot;name&amp;quot;: &amp;quot;Sue&amp;quot;},
    {&amp;quot;id&amp;quot;: 3, &amp;quot;name&amp;quot;: &amp;quot;Chi&amp;quot;},
    {&amp;quot;id&amp;quot;: 4, &amp;quot;name&amp;quot;: &amp;quot;Thor&amp;quot;},
    {&amp;quot;id&amp;quot;: 5, &amp;quot;name&amp;quot;: &amp;quot;Clive&amp;quot;},
    {&amp;quot;id&amp;quot;: 6, &amp;quot;name&amp;quot;: &amp;quot;Hicks&amp;quot;},
    {&amp;quot;id&amp;quot;: 7, &amp;quot;name&amp;quot;: &amp;quot;Devin&amp;quot;},
    {&amp;quot;id&amp;quot;: 8, &amp;quot;name&amp;quot;: &amp;quot;Kate&amp;quot;},
    {&amp;quot;id&amp;quot;: 9, &amp;quot;name&amp;quot;: &amp;quot;Klein&amp;quot;}
]

# friendship pairings in the network
# stored as a list of tuples
friendship_pairs = [(0,1), (0,2), (1,2), (1,3), (2,3), (3,4),
                    (4,5), (5,6), (5,7), (6,8), (7,8), (8,9)]
                    
# interests data
# stored as another list of tuples
interests = [
    (0, &amp;quot;Hadoop&amp;quot;), (0, &amp;quot;Big Data&amp;quot;), (0, &amp;quot;HBase&amp;quot;), (0, &amp;quot;Java&amp;quot;),
    (0, &amp;quot;Spark&amp;quot;), (0, &amp;quot;Storm&amp;quot;), (0, &amp;quot;Cassandra&amp;quot;),
    (1, &amp;quot;NoSQL&amp;quot;), (1, &amp;quot;MongoDB&amp;quot;), (1, &amp;quot;Cassandra&amp;quot;), (1, &amp;quot;HBase&amp;quot;),
    (1, &amp;quot;Postgres&amp;quot;), (2, &amp;quot;Python&amp;quot;), (2, &amp;quot;scikit-learn&amp;quot;), (2, &amp;quot;scipy&amp;quot;),
    (2, &amp;quot;numpy&amp;quot;), (2, &amp;quot;statsmodels&amp;quot;), (2, &amp;quot;pandas&amp;quot;), (3, &amp;quot;R&amp;quot;), (3, &amp;quot;Python&amp;quot;),
    (3, &amp;quot;statistics&amp;quot;), (3, &amp;quot;regression&amp;quot;), (3, &amp;quot;probability&amp;quot;),
    (4, &amp;quot;machine learning&amp;quot;), (4, &amp;quot;regression&amp;quot;), (4, &amp;quot;decision trees&amp;quot;),
    (4, &amp;quot;libsvm&amp;quot;), (5, &amp;quot;Python&amp;quot;), (5, &amp;quot;R&amp;quot;), (5, &amp;quot;Java&amp;quot;), (5, &amp;quot;C++&amp;quot;),
    (5, &amp;quot;Haskell&amp;quot;), (5, &amp;quot;programming langauges&amp;quot;), (6, &amp;quot;statistics&amp;quot;),
    (6, &amp;quot;probability&amp;quot;), (6, &amp;quot;mathematics&amp;quot;), (6, &amp;quot;theory&amp;quot;),
    (7, &amp;quot;machine learning&amp;quot;), (7, &amp;quot;scikit-learn&amp;quot;), (7, &amp;quot;Mahout&amp;quot;),
    (7, &amp;quot;neural networks&amp;quot;), (8, &amp;quot;neural networks&amp;quot;), (8, &amp;quot;deep learning&amp;quot;),
    (8, &amp;quot;Big Data&amp;quot;), (8, &amp;quot;artificial intelligence&amp;quot;), (9, &amp;quot;Hadoop&amp;quot;),
    (9, &amp;quot;Java&amp;quot;), (9, &amp;quot;MapReduce&amp;quot;), (9, &amp;quot;Big Data&amp;quot;)
    ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given just these pieces of data, we can create &lt;strong&gt;functions&lt;/strong&gt;, use &lt;strong&gt;for-loops&lt;/strong&gt; and &lt;strong&gt;list comprehensions&lt;/strong&gt; to answer some questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Who are each user friends with?&lt;/li&gt;
&lt;li&gt;What are the total and average number of connections?&lt;/li&gt;
&lt;li&gt;Which users share the same interest?&lt;/li&gt;
&lt;li&gt;What are the most popular topics in this network?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, the chapter ends with lists, functions and comprehension. What about &lt;strong&gt;storing data in data frames?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First we&amp;rsquo;ll store &lt;code&gt;users&lt;/code&gt; as a data frame:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

# convert list of dict into dataframe
users_df = pd.DataFrame(users)
users_df
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just visually, a &lt;code&gt;data frame&lt;/code&gt; looks different from a &lt;code&gt;list of dictionaries&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./list_to_df.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Your mileage may vary, but &lt;em&gt;I make sense of the data&lt;/em&gt; very differently when I&amp;rsquo;m looking at a list vs a data frame. &lt;strong&gt;Rows and columns&lt;/strong&gt; are ingrained in how I think about data.&lt;/p&gt;
&lt;p&gt;Next, we&amp;rsquo;re given a &lt;code&gt;list of tuples&lt;/code&gt; representing friendship pairs and we proceed to turn that into a &lt;code&gt;dictionary&lt;/code&gt; by using a &lt;code&gt;dictionary comprehension&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# list of tuples
friendship_pairs = [(0,1), (0,2), (1,2), (1,3), (2,3), (3,4),
                    (4,5), (5,6), (5,7), (6,8), (7,8), (8,9)]
                    
# create a dict, where keys are users id, 
# dictionary comprehension
friendships = {user[&amp;quot;id&amp;quot;]: [] for user in users}

for i, j in friendship_pairs:
    friendships[i].append(j)
    friendships[j].append(i)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar to the previous example, I find that viewing the data as a &lt;code&gt;data frame&lt;/code&gt; is &lt;em&gt;different&lt;/em&gt; from viewing it as a &lt;code&gt;dictionary&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./dict_to_df.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;From this point, I&amp;rsquo;m doing several operations in 
&lt;a href=&#34;https://pandas.pydata.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pandas&lt;/a&gt; to &lt;strong&gt;join&lt;/strong&gt; the first two tables, such that I have a column with the user&amp;rsquo;s id, user&amp;rsquo;s name and the id of their first, second or, in some cases, third friends (at most people in this network have 3 direct connections).&lt;/p&gt;
&lt;p&gt;If you want to know the specific 
&lt;a href=&#34;https://pandas.pydata.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pandas&lt;/a&gt; operation, here&amp;rsquo;s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# The users_df is fine as is with two columns: id and name (see above)

# We&#39;ll transform the friendships_df

# reset_index allows us to add an index column
friendships_df.reset_index(inplace=True)
# add index column
friendships_df = friendships_df.rename(columns = {&amp;quot;id&amp;quot;:&amp;quot;new column name&amp;quot;})
# change index column to &#39;id&#39;
friendships_df = friendships_df.rename(columns = {&#39;index&#39;:&#39;id&#39;})
# join with users_df so we get each person&#39;s name
users_friendships = pd.merge(users_df, friendships_df, on=&#39;id&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we&amp;rsquo;ve joined &lt;code&gt;users_df&lt;/code&gt; and &lt;code&gt;friendships_df&lt;/code&gt;, we have:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./users_friendships.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since we have &lt;code&gt;users&lt;/code&gt; and &lt;code&gt;friendships&lt;/code&gt; data, we could write a function to help us answer &amp;ldquo;how many friends does each user have?&amp;rdquo;. In addition, we&amp;rsquo;ll have to create a &lt;code&gt;list comprehension&lt;/code&gt; so we loop through each &lt;code&gt;user&lt;/code&gt; within &lt;code&gt;users&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# function to count how many friend each user has
def number_of_friends(user):
    &amp;quot;&amp;quot;&amp;quot;How many friends does _user_ have?&amp;quot;&amp;quot;&amp;quot;
    user_id = user[&amp;quot;id&amp;quot;]
    friend_ids = friendships[user_id]
    return len(friend_ids)

# list comprehension to apply the function for each user
num_friends_by_id = [(user[&amp;quot;id&amp;quot;], number_of_friends(user)) for user in users]

# this gives us a list of tuples
num_friends_by_id

[(0, 2),
 (1, 3),
 (2, 3),
 (3, 3),
 (4, 2),
 (5, 3),
 (6, 2),
 (7, 2),
 (8, 3),
 (9, 1)]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, viewing the data as a  &lt;code&gt;list of tuples&lt;/code&gt; is different from a &lt;code&gt;data frame&lt;/code&gt;, so let&amp;rsquo;s go ahead and turn that into a pandas data frame:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# when converting to data frame, we can set the name of the columns to id and num_friends; this sets us up for another join
num_friends_by_id = pd.DataFrame(num_friends_by_id, columns = [&#39;id&#39;, &#39;num_friends&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because we have an &amp;lsquo;id&amp;rsquo; column, we can join this with our previously created &lt;code&gt;users_friendships&lt;/code&gt; data frame:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./num_friends_by_id.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once joined with &lt;code&gt;users_friendships&lt;/code&gt; using the &lt;code&gt;merge&lt;/code&gt; function, we get (&lt;code&gt;users_friendships2&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./users_friendships2.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;By now you&amp;rsquo;re familiar with the process. We have a Python &lt;strong&gt;collection&lt;/strong&gt;, generally a &lt;code&gt;list&lt;/code&gt; of &lt;code&gt;dictionaries&lt;/code&gt; or &lt;code&gt;tuples&lt;/code&gt; and we want to convert them to a &lt;code&gt;data frame&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll repeat this process for the &lt;code&gt;interests&lt;/code&gt; variable which is a long &lt;code&gt;list of tuples&lt;/code&gt; (see above). We&amp;rsquo;ll convert to data frame, then join with &lt;code&gt;users_friendships_2&lt;/code&gt; to get a longer data frame with &lt;code&gt;interests&lt;/code&gt; as one of the columns (&lt;em&gt;note&lt;/em&gt; : picture is cut for space):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./interests.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The nice thing about &lt;strong&gt;pandas&lt;/strong&gt; is that once you have all your data &lt;strong&gt;joined&lt;/strong&gt; together in a data frame, you can &lt;strong&gt;query&lt;/strong&gt; the data.&lt;/p&gt;
&lt;p&gt;For example, I may want to see all users have an interest in &amp;ldquo;Big Data&amp;rdquo;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./big_data.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Previously, we would have had to create a function that returns a &lt;code&gt;list comprehension&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def data_scientists_who_like(target_interest):
    &amp;quot;&amp;quot;&amp;quot;Find the ids of all users who like the target interests.&amp;quot;&amp;quot;&amp;quot;
    return [user_id
            for user_id, user_interest in interests
            if user_interest == target_interest]
            
data_scientists_who_like(&amp;quot;Big Data&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data frame has other advantages, you could also query columns on multiple conditions, here are two ways to query multiple topics:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# Option One: Use .query()
user_friendship_topics.query(&#39;topic == &amp;quot;machine learning&amp;quot; | topic == &amp;quot;regression&amp;quot; | topic == &amp;quot;decision trees&amp;quot; | topic == &amp;quot;libsvm&amp;quot;&#39;)

# Option Two: Use .isin()
user_friendship_topics[user_friendship_topics[&#39;topic&#39;].isin([&amp;quot;machine learning&amp;quot;, &amp;quot;regression&amp;quot;, &amp;quot;decision trees&amp;quot;, &amp;quot;libsvm&amp;quot;])]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both options return this data frame:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./multi_condition.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;By querying the data frame, we learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all users interested in these four topics&lt;/li&gt;
&lt;li&gt;users that have interests in common with Thor&lt;/li&gt;
&lt;li&gt;(if needed) the &lt;code&gt;num_friends&lt;/code&gt; that each user has&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also find out the most popular topics within this network:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# groupby topic, tally(count), then reset_index(), then sort
user_friendship_topics.groupby([&#39;topic&#39;]).count().reset_index().sort_values(&#39;id&#39;, ascending=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can even &lt;code&gt;groupby&lt;/code&gt; two columns (name &amp;amp; topic) to see topic of interests listed by each user:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;user_friendship_topics.groupby([&#39;name&#39;, &#39;topic&#39;]).count()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./user_by_topic.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Hopefully you&amp;rsquo;re convinced that &lt;strong&gt;data frames&lt;/strong&gt; are a powerful supplement to the more familiar operations in Python like &lt;strong&gt;for-loops&lt;/strong&gt; and/or &lt;strong&gt;list comprehensions&lt;/strong&gt;; that both are worth knowing well to manipulate data in a variety of formats. (e.g., to access JSON data, Python dictionaries are 
&lt;a href=&#34;https://www.freecodecamp.org/news/python-read-json-file-how-to-load-json-from-a-file-and-parse-dumps/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ideal&lt;/a&gt;).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making sense of matplotlib</title>
      <link>/post/dsfs_3/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/post/dsfs_3/</guid>
      <description>&lt;h2 id=&#34;data-visualization&#34;&gt;Data Visualization&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./viz_cover.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Chapter 3 of Data Science from Scratch introduces us to visualizing data using 
&lt;a href=&#34;https://matplotlib.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;matplotlib&lt;/a&gt;. This is widely used in the Python ecosystem, although my sense is that people are &lt;em&gt;just as happy, if not more&lt;/em&gt;, to use other libraries like 
&lt;a href=&#34;https://seaborn.pydata.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;seaborn&lt;/a&gt;, 
&lt;a href=&#34;https://altair-viz.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Altair&lt;/a&gt; and 
&lt;a href=&#34;https://bokeh.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bokeh&lt;/a&gt;. (&lt;strong&gt;note&lt;/strong&gt;: seaborn is built on top of matplotlib).&lt;/p&gt;
&lt;p&gt;This chapter is fairly brief and is meant as a quick introduction to matplotlib - to get readers familiar with basic charts. Whole books can be written on &lt;strong&gt;data visualization&lt;/strong&gt; alone, so this is meant more as an appetizer, rather than a full-course.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a fair amount of detail involved in using matplotlib, so we&amp;rsquo;ll break it down to demystify it.&lt;/p&gt;
&lt;h4 id=&#34;basic-plotting&#34;&gt;Basic Plotting&lt;/h4&gt;
&lt;p&gt;This chapter goes through the main basic charts including Line, Bar, Histograms, and Scatter Plots. &lt;strong&gt;At first glance&lt;/strong&gt;, they follow a similar pattern. Data is provided as a &lt;code&gt;list&lt;/code&gt; of numbers (usually more than one list). &lt;code&gt;pyplot&lt;/code&gt; is imported from &lt;code&gt;matplotlib&lt;/code&gt; as &lt;code&gt;plt&lt;/code&gt;. The &lt;code&gt;plt&lt;/code&gt; module has several &lt;strong&gt;functions&lt;/strong&gt; which are accessed to create the plot.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example line chart visualizing growth in GDP over time:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./line_gdp.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
from matplotlib import pyplot as plt

# the data
years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]
gdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]

# the plot
plt.plot(years, gdp, color=&amp;quot;green&amp;quot;, marker=&#39;o&#39;, linestyle=&#39;solid&#39;)
plt.title(&amp;quot;Nominal GDP&amp;quot;)
plt.ylabel(&amp;quot;Billions of $&amp;quot;)
plt.xlabel(&amp;quot;Years&amp;quot;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can somewhat get by with just knowing this. Briefly consulting the documentation will let you see some other &lt;em&gt;chart types&lt;/em&gt; like so:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./plot_doc.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we wanted to convert our &lt;strong&gt;line chart&lt;/strong&gt; into a &lt;strong&gt;stacked area chart&lt;/strong&gt;, we can just change one line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from matplotlib import pyplot as plt

years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]
gdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]

plt.stackplot(years, gdp, color=&amp;quot;green&amp;quot;) # this is the only line we changed

plt.title(&amp;quot;Nominal GDP&amp;quot;)
plt.ylabel(&amp;quot;Billions of $&amp;quot;)
plt.xlabel(&amp;quot;Years&amp;quot;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s what the &lt;strong&gt;stacked area chart&lt;/strong&gt; version of the previous graph looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./stack_gdp.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;To keep things simple, we can change the chart type with just one line and we just need to remember that when converting from chart to chart, we have to be mindful of the parameters that each chart type takes. For example, a &lt;strong&gt;stacked area chart&lt;/strong&gt; takes in different parameters than &lt;strong&gt;line charts&lt;/strong&gt; (for example, you&amp;rsquo;ll get an &lt;code&gt;AttributionError&lt;/code&gt; if you try to use &lt;code&gt;marker&lt;/code&gt; in a stacked area chart.)&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example bar chart comparing movies by the number of Academy awards they&amp;rsquo;ve won:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./bar_movies.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a &lt;strong&gt;stem plot&lt;/strong&gt; version:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./stem_movies.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;As with the previous example, changing just one &lt;strong&gt;function&lt;/strong&gt; from &lt;code&gt;plt.bar&lt;/code&gt; to &lt;code&gt;plt.stem&lt;/code&gt; gave us a different plot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#---- Original Bar Chart ----#

movies = [&amp;quot;Annie Hall&amp;quot;, &amp;quot;Ben-Hur&amp;quot;, &amp;quot;Casablanca&amp;quot;, &amp;quot;Gandhi&amp;quot;, &amp;quot;West Side Story&amp;quot;]
num_oscars = [5,11,3,8,10]

plt.bar(range(len(movies)), num_oscars)
plt.title(&amp;quot;My Favorite Movies&amp;quot;)
plt.ylabel(&amp;quot;# of Academy Awards&amp;quot;)
plt.xticks(range(len(movies)), movies)
plt.show()

# ---- Stem Chart ---- #

movies = [&amp;quot;Annie Hall&amp;quot;, &amp;quot;Ben-Hur&amp;quot;, &amp;quot;Casablanca&amp;quot;, &amp;quot;Gandhi&amp;quot;, &amp;quot;West Side Story&amp;quot;]
num_oscars = [5,11,3,8,10]

plt.stem(range(len(movies)), num_oscars) # the only change
plt.title(&amp;quot;My Favorite Movies&amp;quot;)
plt.ylabel(&amp;quot;# of Academy Awards&amp;quot;)
plt.xticks(range(len(movies)), movies)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;there-are-levels-to-this-hierarchy&#34;&gt;There are levels to this: Hierarchy&lt;/h4&gt;
&lt;p&gt;I&amp;rsquo;m all for keeping &lt;strong&gt;matplotlib&lt;/strong&gt; as simple as possible but one thing the above examples gloss over is the &lt;strong&gt;matplotlib object hierarchy&lt;/strong&gt;, which is something worth understanding to get a feel for how the various functions operate.&lt;/p&gt;
&lt;p&gt;This next figure is borrowed from 
&lt;a href=&#34;https://realpython.com/python-matplotlib-guide/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Real Python&lt;/a&gt; and it nicely highlights the hierarchy inherent in &lt;em&gt;every&lt;/em&gt; plot:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./hierarchy.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll note the levels: Figure, Axes and Axis. When digging into 
&lt;a href=&#34;https://matplotlib.org/api/axes_api.html?&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;matplotlib documentation on axes&lt;/a&gt;, these levels are brought to the foreground.&lt;/p&gt;
&lt;p&gt;To really see this in action, we&amp;rsquo;ll need to code our plot &lt;em&gt;slightly&lt;/em&gt; differently. For the last chart this chapter examines the &lt;strong&gt;bias-variance tradeoff&lt;/strong&gt; which is something we&amp;rsquo;ll learn more about in future chapters, but it highlights the 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Bias%E2%80%93variance_tradeoff&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;trade-off&lt;/a&gt; in trying to simultanenously minimize two sources of error so our algorithm generalizes to new situations.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# BOOK version
variance = [1,2,4,8,16,32,64,128,256]
bias_squared = [256, 128, 64, 32, 16, 8, 4, 2, 1]
total_error = [x + y for x,y in zip(variance, bias_squared)]
xs = [i for i, _ in enumerate(variance)]

plt.plot(xs, variance, &#39;g-&#39;, label=&#39;variance&#39;)
plt.plot(xs, bias_squared, &#39;r-&#39;, label=&#39;bias^2&#39;)
plt.plot(xs, total_error, &#39;b:&#39;, label=&#39;total error&#39;)
plt.legend(loc=9)
plt.xlabel(&amp;quot;model complexity&amp;quot;)
plt.xticks([])
plt.title(&amp;quot;The Bias-Variance Tradeoff&amp;quot;)
plt.show()

# ALTERNATE version
variance = [1,2,4,8,16,32,64,128,256]
bias_squared = [256, 128, 64, 32, 16, 8, 4, 2, 1]
total_error = [x + y for x,y in zip(variance, bias_squared)]
xs = [i for i, _ in enumerate(variance)]

fig, ax = plt.subplots(figsize=(8,5))
ax.plot(xs, variance, &#39;g-&#39;, label=&#39;variance&#39;)
ax.plot(xs, bias_squared, &#39;r-&#39;, label=&#39;bias^2&#39;)
ax.plot(xs, total_error, &#39;b:&#39;, label=&#39;total error&#39;)
ax.legend(loc=&#39;upper center&#39;)
ax.set_xlabel(&amp;quot;model complexity&amp;quot;)
ax.set_title(&amp;quot;The Bias-Variance Tradeoff: Alt Version&amp;quot;)
fig.tight_layout()
fig.show()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead using the &lt;code&gt;plt&lt;/code&gt; module, we use &lt;code&gt;fig&lt;/code&gt; and &lt;code&gt;ax&lt;/code&gt;, here are their data types:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(fig) # matplotlib.figure.Figure
type(ax)  # matplotlib.axes._subplots.AxesSubplot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes &lt;em&gt;explicit&lt;/em&gt; the &lt;strong&gt;matplotlib object hierarchy&lt;/strong&gt;, particularly as we see how we access function at the &lt;code&gt;axes._subplits.AxesSubplot&lt;/code&gt; level (the 
&lt;a href=&#34;https://matplotlib.org/api/axes_api.html?&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation has much more detail&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the chart:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./bias_var_alt.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;In summary, we learned that matplotlib &lt;em&gt;can&lt;/em&gt; be fairly simple to use for static, simple plots, but we&amp;rsquo;re better served having &lt;em&gt;some&lt;/em&gt; understanding of &lt;strong&gt;matplotlib&amp;rsquo;s object hierarchy&lt;/strong&gt;. We&amp;rsquo;ll examine more chart types as we proceed with the rest of the chapters.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data Science from Scratch (ch1)</title>
      <link>/post/dsfs_1/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      <guid>/post/dsfs_1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Table of Content:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#datascienster_pt1&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#datascienster_pt2&#34;&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;datascienster_pt1&#34;&gt;DataScienster_pt1&lt;/h2&gt;
&lt;h4 id=&#34;collections-and-comprehensions&#34;&gt;Collections and Comprehensions&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://joelgrus.com/2019/05/13/data-science-from-scratch-second-edition/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Data Science from Scratch&lt;/a&gt; opens with a narrative motivating example where you, dear reader, are newly hired to lead data science at &lt;em&gt;DataSciencester&lt;/em&gt;, a social network exclusively for data scientists.&lt;/p&gt;
&lt;p&gt;Joel Grus, the author, explains:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Throughout the book, we&amp;rsquo;ll be learning about data science concepts by solving problems that you encounter at work. Sometimes we&amp;rsquo;ll look at data explicitly supplied by users, sometimes we&amp;rsquo;ll look at data generated through their interactions with the site, and sometimes we&amp;rsquo;ll even look at data from experiments that we&amp;rsquo;ll design&amp;hellip;we&amp;rsquo;ll be building our tools from scratch.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This chapter is meant as a teaser for the rest of the book, but I wanted to revisit this chapter with our 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;python crash course&lt;/a&gt; fresh on our minds to highlight some &lt;em&gt;frequently&lt;/em&gt; used concepts we can expect to see for the rest of the book.&lt;/p&gt;
&lt;p&gt;You are just hired as &amp;ldquo;VP of Networking&amp;rdquo; and are tasked with finding out which data scientist is the most well connected in the DataSciencster network, you&amp;rsquo;re giving a data dump ð. It&amp;rsquo;s a list of users, each with a unique id.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;users = [
    {&amp;quot;id&amp;quot;: 0, &amp;quot;name&amp;quot;: &amp;quot;Hero&amp;quot;},
    {&amp;quot;id&amp;quot;: 1, &amp;quot;name&amp;quot;: &amp;quot;Dunn&amp;quot;},
    {&amp;quot;id&amp;quot;: 2, &amp;quot;name&amp;quot;: &amp;quot;Sue&amp;quot;},
    {&amp;quot;id&amp;quot;: 3, &amp;quot;name&amp;quot;: &amp;quot;Chi&amp;quot;},
    {&amp;quot;id&amp;quot;: 4, &amp;quot;name&amp;quot;: &amp;quot;Thor&amp;quot;},
    {&amp;quot;id&amp;quot;: 5, &amp;quot;name&amp;quot;: &amp;quot;Clive&amp;quot;},
    {&amp;quot;id&amp;quot;: 6, &amp;quot;name&amp;quot;: &amp;quot;Hicks&amp;quot;},
    {&amp;quot;id&amp;quot;: 7, &amp;quot;name&amp;quot;: &amp;quot;Devin&amp;quot;},
    {&amp;quot;id&amp;quot;: 8, &amp;quot;name&amp;quot;: &amp;quot;Kate&amp;quot;},
    {&amp;quot;id&amp;quot;: 9, &amp;quot;name&amp;quot;: &amp;quot;Klein&amp;quot;}
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of &lt;strong&gt;note&lt;/strong&gt; here is that the &lt;code&gt;users&lt;/code&gt; variable is a &lt;code&gt;list&lt;/code&gt; of &lt;code&gt;dict&lt;/code&gt; (dictionaries).&lt;/p&gt;
&lt;p&gt;Moving along, we also receive &amp;ldquo;friendship&amp;rdquo; data. Of &lt;strong&gt;note&lt;/strong&gt; here that this is a &lt;code&gt;list&lt;/code&gt; of &lt;code&gt;tuples&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;friendship_pairs = [(0,1), (0,2), (1,2), (1,3), (2,3), (3,4),
                    (4,5), (5,6), (5,7), (6,8), (7,8), (8,9)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I had initially (and erroneously) thought of &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt; and &lt;code&gt;tuple&lt;/code&gt; as &lt;strong&gt;data types&lt;/strong&gt; (like &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;They&amp;rsquo;re rather &lt;strong&gt;collections&lt;/strong&gt;, and somewhat unique to Python and more importantly, &lt;em&gt;informs the way Pythonistas approach and solve problems&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You may feel that having &amp;ldquo;friendship&amp;rdquo; data in a &lt;code&gt;list&lt;/code&gt; of &lt;code&gt;tuple&lt;/code&gt; is not the easiest way to work with data (nor may it be the best way to represent data, but we&amp;rsquo;ll suspend those thoughts for now). Our first task is to convert this &lt;code&gt;list&lt;/code&gt; of &lt;code&gt;tuple&lt;/code&gt; into a form that&amp;rsquo;s more workable; the author proposes we turn it into a &lt;code&gt;dict&lt;/code&gt; where the &lt;code&gt;keys&lt;/code&gt; are user_ids and the &lt;code&gt;values&lt;/code&gt; are &lt;code&gt;list&lt;/code&gt; of friends.&lt;/p&gt;
&lt;p&gt;The argument is that its faster to look things up in a &lt;code&gt;dict&lt;/code&gt; rather than a &lt;code&gt;list&lt;/code&gt; of &lt;code&gt;tuple&lt;/code&gt; (where we&amp;rsquo;d have to iterate over every &lt;code&gt;tuple&lt;/code&gt;). Here&amp;rsquo;s how we&amp;rsquo;d do that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Initialize the dict with an empty list for each user id
friendships = { user[&amp;quot;id&amp;quot;]: [] for user in users }

# Loop over friendship pairs 
# This operation grabs the first, then second integer in each tuple
# It then appends each integer to the newly initialized friendships dict
for i, j in friendship_pairs:
    friendships[i].append(j)
    friendships[j].append(i)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;re &lt;em&gt;initializing&lt;/em&gt; a &lt;code&gt;dict&lt;/code&gt; (called &lt;code&gt;friendships&lt;/code&gt;), then looping over &lt;code&gt;friendship_pairs&lt;/code&gt; to populate &lt;code&gt;friendships&lt;/code&gt;. This is the outcome:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;friendships

{
 0: [1, 2],
 1: [0, 2, 3],
 2: [0, 1, 3],
 3: [1, 2, 4],
 4: [3, 5],
 5: [4, 6, 7],
 6: [5, 8],
 7: [5, 8],
 8: [6, 7, 9],
 9: [8]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each &lt;code&gt;key&lt;/code&gt; in friendships is matched with a &lt;code&gt;value&lt;/code&gt; that is initially an empty list, which then gets populated as we loop over &lt;code&gt;friendship_pairs&lt;/code&gt; and systematically append the user_id that is paired together.&lt;/p&gt;
&lt;p&gt;To understand how the looping happends and, specifically how each &lt;strong&gt;pair&lt;/strong&gt; of user_ids are connected to each other, I created my own mini-toy example. Let&amp;rsquo;s say we&amp;rsquo;re just going to focus on looping through &lt;code&gt;friendship_pairs&lt;/code&gt; for the user &lt;strong&gt;Hero&lt;/strong&gt; whose id is 0.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# we&#39;ll set hero to an empty list
hero = []

# for every friendship_pair, if the first integer is 0, which is Hero&#39;s id,
# then append the second integer
for x, y in friendship_pairs:
    if x == 0:
        hero.append(y)
        
# outcome: we can confirm that Hero is connected to  Dunn and Sue
hero # [1,2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above gave me better intuition for how this works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i, j in friendship_pairs:
    friendships[i].append(j)  # Add j as a friend of user i
    friendships[j].append(i)  # Add i as a friend of user j
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are some other questions we may be interested in:&lt;/p&gt;
&lt;h4 id=&#34;what-is-the-total-number-of-connections&#34;&gt;What is the total number of connections?&lt;/h4&gt;
&lt;p&gt;Look at how the problem is solved. What&amp;rsquo;s notable to me is how we first define a function &lt;code&gt;number_of_friends(user)&lt;/code&gt; that returns the number of friends for a particular user.&lt;/p&gt;
&lt;p&gt;Then, &lt;code&gt;total_connections&lt;/code&gt; is calculated using a &lt;strong&gt;comprehension&lt;/strong&gt; (tuple?):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def number_of_friends(user):
    &amp;quot;&amp;quot;&amp;quot;How many friends does _user_ have?&amp;quot;&amp;quot;&amp;quot;
    user_id = user[&amp;quot;id&amp;quot;]
    friend_ids = friendships[user_id]
    return len(friend_ids)

total_connections = sum(number_of_friends(user) for user in users)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To be clear, the &lt;strong&gt;(tuple) comprehension&lt;/strong&gt; is a pattern where a function is applied over a for-loop, in one line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# (2, 3, 3, 3, 2, 3, 2, 2, 3, 1)
tuple((number_of_friends(user) for user in users))

# you can double check by calling friendships dict and counting the number of friends each user has
friendships

{
 0: [1, 2],
 1: [0, 2, 3],
 2: [0, 1, 3],
 3: [1, 2, 4],
 4: [3, 5],
 5: [4, 6, 7],
 6: [5, 8],
 7: [5, 8],
 8: [6, 7, 9],
 9: [8]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This pattern of using a one-line for-loop (aka comprehension) will come up often. If we add up all the connections, we get 24 and to find the average, we simply divide by the number of users (10) for 2.4, this part is straight-forward.&lt;/p&gt;
&lt;h4 id=&#34;can-we-sort-who-has-most-to-least-friends-to-find-the-most-connected-individuals&#34;&gt;Can we sort who has most-to-least friends to find the most connected individuals?&lt;/h4&gt;
&lt;p&gt;To answer this question, again, a &lt;strong&gt;list comprehension&lt;/strong&gt; is used. The cool thing is that we re-use functions we had previously created (&lt;code&gt;number_of_friends(user)&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a list that loops over users dict, applying a previously defined function
num_friends_by_id = [(user[&amp;quot;id&amp;quot;], number_of_friends(user)) for user in users]

# Then sort
num_friends_by_id.sort(                                 # Sort the list
    key=lambda id_and_friends: id_and_friends[1],       # by number friends
    reverse=True)                                       # descending order
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have just identified how &lt;em&gt;central&lt;/em&gt; an individual is to the network, and we can expect to explore &lt;strong&gt;degree centrality&lt;/strong&gt; and &lt;strong&gt;networks&lt;/strong&gt; more in future chapters, but for the purposes of &lt;em&gt;this&lt;/em&gt; post, we have identified the central role that &lt;strong&gt;collections&lt;/strong&gt; (lists, dictionaries, tuples) as well as &lt;strong&gt;comprehensions&lt;/strong&gt; play in Python operations.&lt;/p&gt;
&lt;p&gt;In the next post, we&amp;rsquo;ll examing how friendship connections may or may not overlap with interests.&lt;/p&gt;
&lt;h2 id=&#34;datascienster_pt2&#34;&gt;DataScienster_pt2&lt;/h2&gt;
&lt;p&gt;In the previous section, we began examining a toy data set see what kind of Python concepts from the crash course we&amp;rsquo;d see in action.&lt;/p&gt;
&lt;p&gt;What stands out is the use of collections and comprehension. We&amp;rsquo;ll see this trend continue as data is given to us in the form of a list of dict or tuples.&lt;/p&gt;
&lt;p&gt;Often time, we&amp;rsquo;re manipulating the data to make it faster and more efficient to iterate through the data. The tool that comes up quite often is using defaultdict to initialize an empty list. Followed by list comprehensions to iterate through data.&lt;/p&gt;
&lt;p&gt;Indeed, either we&amp;rsquo;re seeing how the author, specifically, approaches problem or how problems are approached in Python, in general.&lt;/p&gt;
&lt;p&gt;What I&amp;rsquo;m keeping in mind is that there are more than one way to approach data science problems and this is one of them.&lt;/p&gt;
&lt;p&gt;With that said, let&amp;rsquo;s pick up where the previous section left off.&lt;/p&gt;
&lt;h4 id=&#34;friends-you-may-know&#34;&gt;Friends you may know&lt;/h4&gt;
&lt;p&gt;We have a sense of the &lt;em&gt;total number of connections&lt;/em&gt; and a sorting of the &lt;em&gt;most connected&lt;/em&gt; individuals. Now, we may want to design a &amp;ldquo;people you may know&amp;rdquo; suggester.&lt;/p&gt;
&lt;p&gt;Quick recap, here&amp;rsquo;s what the friendship dictionary looks like.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;friendships

{
 0: [1, 2],
 1: [0, 2, 3],
 2: [0, 1, 3],
 3: [1, 2, 4],
 4: [3, 5],
 5: [4, 6, 7],
 6: [5, 8],
 7: [5, 8],
 8: [6, 7, 9],
 9: [8]
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, the first step is to &lt;em&gt;iterate&lt;/em&gt; over friends and collect friends&#39; friend. The following function returns a &lt;strong&gt;list comprehension&lt;/strong&gt;. Let&amp;rsquo;s examine this function line-by-line to understand how it works. It returns friend_of_a_friend (foaf) id for each of the  individuals&#39; id, then grabing the id of &lt;em&gt;their&lt;/em&gt; friends.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll break it down in code below this function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def foaf_ids_bad(user):
    &amp;quot;&amp;quot;&amp;quot;foaf is short for &#39;friend of a friend&#39; &amp;quot;&amp;quot;&amp;quot;
    return [foaf_id
            for friend_id in friendships[user[&amp;quot;id&amp;quot;]]
            for foaf_id in friendships[friend_id]]

# Let&#39;s take Hero, to see Hero&#39;s friends 
# we&#39;ll call the first key of the friendships dict
# Hero has two friends with ids 1 and 2
friendships[0]  # [1,2]

# then we&#39;ll loop over *each* of the friends
friendships[1]  # [0, 2, 3]
friendships[2]  # [0, 1, 3]

# assert that function works
assert foaf_ids_bad(users[0]) == [0, 2, 3, 0, 1, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;can-we-count-mutual-friends&#34;&gt;Can we count mutual friends?&lt;/h4&gt;
&lt;p&gt;To answer this we&amp;rsquo;ll use a &lt;code&gt;Counter&lt;/code&gt;, which we 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_2/#counters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;learned&lt;/a&gt; is a &lt;code&gt;dict&lt;/code&gt; subclass. Moreover, the function &lt;code&gt;friends_of_friends(user)&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import Counter

def friends_of_friends(user):
    user_id = user[&amp;quot;id&amp;quot;]
    return Counter(
        foaf_id
        for friend_id in friendships[user_id]    # for each of my friends,
        for foaf_id in friendships[friend_id]    # find their friends
        if foaf_id != user_id                    # who aren&#39;t me
        and foaf_id not in friendships[user_id]  # and aren&#39;t my friends
    )

# lets look at Hero
# he has two common friends with Chi 
# Chi is neither Hero nor his direct friends
friends_of_friends(users[0])  # Counter({3: 2})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition to friendship data, we also have &lt;strong&gt;interest&lt;/strong&gt; data. Here we see a &lt;code&gt;list&lt;/code&gt; of &lt;code&gt;tuples&lt;/code&gt;, containing a user_id and a string representing a specific of technology.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;interests = [
    (0, &amp;quot;Hadoop&amp;quot;), (0, &amp;quot;Big Data&amp;quot;), (0, &amp;quot;HBase&amp;quot;), (0, &amp;quot;Java&amp;quot;),
    (0, &amp;quot;Spark&amp;quot;), (0, &amp;quot;Storm&amp;quot;), (0, &amp;quot;Cassandra&amp;quot;),
    (1, &amp;quot;NoSQL&amp;quot;), (1, &amp;quot;MongoDB&amp;quot;), (1, &amp;quot;Cassandra&amp;quot;), (1, &amp;quot;HBase&amp;quot;),
    (1, &amp;quot;Postgres&amp;quot;), (2, &amp;quot;Python&amp;quot;), (2, &amp;quot;scikit-learn&amp;quot;), (2, &amp;quot;scipy&amp;quot;),
    (2, &amp;quot;numpy&amp;quot;), (2, &amp;quot;statsmodels&amp;quot;), (2, &amp;quot;pandas&amp;quot;), (3, &amp;quot;R&amp;quot;), (3, &amp;quot;Python&amp;quot;),
    (3, &amp;quot;statistics&amp;quot;), (3, &amp;quot;regression&amp;quot;), (3, &amp;quot;probability&amp;quot;),
    (4, &amp;quot;machine learning&amp;quot;), (4, &amp;quot;regression&amp;quot;), (4, &amp;quot;decision trees&amp;quot;),
    (4, &amp;quot;libsvm&amp;quot;), (5, &amp;quot;Python&amp;quot;), (5, &amp;quot;R&amp;quot;), (5, &amp;quot;Java&amp;quot;), (5, &amp;quot;C++&amp;quot;),
    (5, &amp;quot;Haskell&amp;quot;), (5, &amp;quot;programming langauges&amp;quot;), (6, &amp;quot;statistics&amp;quot;),
    (6, &amp;quot;probability&amp;quot;), (6, &amp;quot;mathematics&amp;quot;), (6, &amp;quot;theory&amp;quot;),
    (7, &amp;quot;machine learning&amp;quot;), (7, &amp;quot;scikit-learn&amp;quot;), (7, &amp;quot;Mahout&amp;quot;),
    (7, &amp;quot;neural networks&amp;quot;), (8, &amp;quot;neural networks&amp;quot;), (8, &amp;quot;deep learning&amp;quot;),
    (8, &amp;quot;Big Data&amp;quot;), (8, &amp;quot;artificial intelligence&amp;quot;), (9, &amp;quot;Hadoop&amp;quot;),
    (9, &amp;quot;Java&amp;quot;), (9, &amp;quot;MapReduce&amp;quot;), (9, &amp;quot;Big Data&amp;quot;)
    ]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First thing we&amp;rsquo;ll do is find users with a specific interest. This is function returns a &lt;strong&gt;list comprehension&lt;/strong&gt;. It first split each &lt;code&gt;tuple&lt;/code&gt; into &lt;code&gt;user_id&lt;/code&gt; (integer) and &lt;code&gt;user_interest&lt;/code&gt; (string), then conditionally check if the &lt;code&gt;string&lt;/code&gt; in the &lt;code&gt;tuple&lt;/code&gt; matches the input parameter.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def data_scientists_who_like(target_interest):
    &amp;quot;&amp;quot;&amp;quot;Find the ids of all users who like the target interests.&amp;quot;&amp;quot;&amp;quot;
    return [user_id
            for user_id, user_interest in interests
            if user_interest == target_interest]
            
# let&#39;s see all user_id who likes &amp;quot;statistics&amp;quot;
data_scientists_who_like(&amp;quot;statistics&amp;quot;)   # [3, 6]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We may also want to count the number of times a specific interest comes up. Here&amp;rsquo;s a function for that. We use a basic for-loop and if-statement to check 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_2/#truthiness&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;truthiness&lt;/a&gt; of &lt;code&gt;user_interest == target_interest&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def num_user_with_interest_in(target_interest):
    interest_count = 0
    for user_id, user_interest in interests:
        if user_interest == target_interest:
            interest_count += 1
    return interest_count
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A concern is having to examine a whole list of interests for every search. The author proposes building an index from interests to users. Here, a 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_2/#defaultdict&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;defaultdict&lt;/a&gt; is imported, then populated with user_id&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import defaultdict

# user_ids matched to specific interest
user_ids_by_interest = defaultdict(list)

for user_id, interest in interests:
    user_ids_by_interest[interest].append(user_id)

# three users interested in Python
assert user_ids_by_interest[&amp;quot;Python&amp;quot;] == [2,3,5]

# list of interests by user_id
interests_by_user_id = defaultdict(list)

for user_id, interest in interests:
    interests_by_user_id[user_id].append(interest)

# check all of Hero&#39;s interests
assert interests_by_user_id[0] == [&#39;Hadoop&#39;, &#39;Big Data&#39;, &#39;HBase&#39;, &#39;Java&#39;, &#39;Spark&#39;, &#39;Storm&#39;, &#39;Cassandra&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can find who has the most interests in common with a given user. Looks like Klein (#9) has the most common interests with Hero (#0). Here we return a Counter with for-loops and an if-statement.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def most_common_interests_with(user):
    return Counter(
        interested_user_id
        for interest in interests_by_user_id[user[&amp;quot;id&amp;quot;]]
        for interested_user_id in user_ids_by_interest[interest]
        if interested_user_id != user[&amp;quot;id&amp;quot;]
        )
        
# let&#39;s check to see who has the most common interest with Hero
most_common_interests_with(users[0]) # Counter({9: 3, 8: 1, 1: 2, 5: 1})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can also find which topics are most popular among the network. Previously, we calculated the number of users interested in a particular topic, but now we want to compare the whole list.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;words_and_counts = Counter(word
                           for user, interest in interests
                           for word in interest.lower().split())
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;salaries-and-experience-data&#34;&gt;Salaries and Experience Data&lt;/h4&gt;
&lt;p&gt;We&amp;rsquo;re also given anonymous salary and tenure (number of years work experience) data, let&amp;rsquo;s see what we can do with that information. First we&amp;rsquo;ll find the average salary. Again, we&amp;rsquo;ll start by creating a list (defaultdict), then loop through &lt;code&gt;salaries_and_tenures&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;salaries_and_tenures = [(83000, 8.7), (88000, 8.1),
                        (48000, 0.7), (76000, 6),
                        (69000, 6.5), (76000, 7.5),
                        (60000, 2.5), (83000, 10),
                        (48000, 1.9), (63000, 4.2)]
                        
salary_by_tenure = defaultdict(list)

for salary, tenure in salaries_and_tenures:
    salary_by_tenure[tenure].append(salary)

# find average salary by tenure
average_salary_by_tenure = {
    tenure: sum(salaries) / len(salaries)
    for tenure, salaries in salary_by_tenure.items()
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem is that this is not terribly informative as each tenure value has a different salary. Not even the &lt;code&gt;average_salary_by_tenure&lt;/code&gt; is informative, so our next move is to group similar tenure values together.&lt;/p&gt;
&lt;p&gt;First, we&amp;rsquo;ll create the groupings/categories using a 
&lt;a href=&#34;https://paulapivat.com/post/dsfs_2/#controlflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;control-flow&lt;/a&gt;, then we&amp;rsquo;ll create a &lt;code&gt;list&lt;/code&gt;(&lt;code&gt;defaultdict&lt;/code&gt;), and loop through &lt;code&gt;salaries_and_tenures&lt;/code&gt; to populate the newly created &lt;code&gt;salary_by_tenure_bucket&lt;/code&gt;. Finally calculate the average.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def tenure_bucket(tenure):
    if tenure &amp;lt; 2:
        return &amp;quot;less than two&amp;quot;
    elif tenure &amp;lt; 5:
        return &amp;quot;between two and five&amp;quot;
    else:
        return &amp;quot;more than five&amp;quot;
        
salary_by_tenure_bucket = defaultdict(list)

for salary, tenure in salaries_and_tenures:
    bucket = tenure_bucket(tenure)
    salary_by_tenure_bucket[bucket].append(salary)
    
# finally calculate average
average_salary_by_bucket = {
    tenure_bucket: sum(salaries) / len(salaries)
    for tenure_bucket, salaries in salary_by_tenure_bucket.items()
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One thing to note is that the &amp;ldquo;given&amp;rdquo; data, in this hypothetical toy example is either in a list of dictionaries or tuples, which may be atypical if we&amp;rsquo;re used to working with tabular data in dataFrame (pandas) or native data.frame in R.&lt;/p&gt;
&lt;p&gt;Again, we are reminded that the higher purpose of this book - Data Science from Scratch (by Joel Grus; 2nd Ed) is to eschew libraries in favor of plain python to build everything from the ground up.&lt;/p&gt;
&lt;p&gt;Should your goal be to learn how various algorithms work by building them up from scratch, and in the process learn how data problems can be solved with python and minimal libraries, this is your book.&lt;/p&gt;
&lt;p&gt;Joel Grus does make clear that you would use libraries and frameworks (pandas, scikit-learn, matplotlib etc), rather than coded-from-scratch algorithms when working in production environments and will point out resource for further reading at the end of the chapters.&lt;/p&gt;
&lt;p&gt;In the next post, we&amp;rsquo;ll get into visualizing data.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vintage NBA Seasons</title>
      <link>/post/vintage-nba/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      <guid>/post/vintage-nba/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/core-js/shim.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/react/react.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/react/react-dom.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/reactwidget/react-tools.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/reactable-binding/reactable.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;preparing-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Preparing the Data&lt;/h2&gt;
&lt;p&gt;Weâll start off with the raw data from 538. The data accompanies this Rmarkdown file or, alternatively, can be downloaded directly from their &lt;a href=&#34;https://github.com/fivethirtyeight/data/tree/master/nba-raptor&#34;&gt;github repository&lt;/a&gt;. The file weâre using is called âhistorical_RAPTOR_by_player.csvâ. Background information on the RAPTOR metric can be found &lt;a href=&#34;https://fivethirtyeight.com/features/how-our-raptor-metric-works/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Weâll load the libraries, then the raw data.&lt;/p&gt;
&lt;p&gt;We are primarily using the &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;readr&lt;/code&gt; packages from the Tidyverse. Weâll create our table with the &lt;code&gt;reactable&lt;/code&gt; package and use &lt;code&gt;htmltools&lt;/code&gt; for when we need to use &lt;code&gt;html&lt;/code&gt; elements for table customization.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ââ Attaching packages âââââââââââââââââââââââââââ tidyverse 1.3.0 ââ&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## â ggplot2 3.3.2     â purrr   0.3.4
## â tibble  3.0.3     â dplyr   1.0.1
## â tidyr   1.1.1     â stringr 1.4.0
## â readr   1.3.1     â forcats 0.5.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ââ Conflicts ââââââââââââââââââââââââââââââ tidyverse_conflicts() ââ
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reactable)
library(htmltools)

# read data
df &amp;lt;- read_csv(&amp;quot;./data/historical_RAPTOR_by_player.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   player_name = col_character(),
##   player_id = col_character(),
##   season = col_double(),
##   poss = col_double(),
##   mp = col_double(),
##   raptor_offense = col_double(),
##   raptor_defense = col_double(),
##   raptor_total = col_double(),
##   war_total = col_double(),
##   war_reg_season = col_double(),
##   war_playoffs = col_double(),
##   predator_offense = col_double(),
##   predator_defense = col_double(),
##   predator_total = col_double(),
##   pace_impact = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 15
##   player_name player_id season  poss    mp raptor_offense raptor_defense
##   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;          &amp;lt;dbl&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 Alaa Abdelâ¦ abdelal01   1991   640   303          -3.94         -0.510
## 2 Alaa Abdelâ¦ abdelal01   1992  1998   959          -2.55         -0.198
## 3 Alaa Abdelâ¦ abdelal01   1993  2754  1379          -2.37         -2.07 
## 4 Alaa Abdelâ¦ abdelal01   1994   320   159          -6.14         -2.75 
## 5 Alaa Abdelâ¦ abdelal01   1995   984   506          -3.85         -1.27 
## 6 Kareem Abdâ¦ abdulka01   1977  7674  3483           4.54          3.10 
## # â¦ with 8 more variables: raptor_total &amp;lt;dbl&amp;gt;, war_total &amp;lt;dbl&amp;gt;,
## #   war_reg_season &amp;lt;dbl&amp;gt;, war_playoffs &amp;lt;dbl&amp;gt;, predator_offense &amp;lt;dbl&amp;gt;,
## #   predator_defense &amp;lt;dbl&amp;gt;, predator_total &amp;lt;dbl&amp;gt;, pace_impact &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;objective&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Objective&lt;/h2&gt;
&lt;p&gt;Hereâs what the original 538 table looks like (&lt;strong&gt;note&lt;/strong&gt;: weâll add an extra column not shown in this picture.) This table features 538âs most updated NBA statistic, RAPTOR, which stands for Robust Algorithm (using) Player Tracking (and) On/Off Ratings.&lt;/p&gt;
&lt;p&gt;It attempts to rank indiviual (playerâs) seasons, rather than individual players &lt;em&gt;themselves&lt;/em&gt;, because a playerâs career, like any career, has ebbs and flows.&lt;/p&gt;
&lt;p&gt;Our objective is to re-create this table and give it a fresh makeover.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./538_raptor.png&#34; alt=&#34;538 Raptor Table&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;538 Raptor Table&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-wrangling&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Wrangling&lt;/h2&gt;
&lt;p&gt;We will wrangle the data to be close to what we need &lt;em&gt;before&lt;/em&gt; using the &lt;code&gt;reactable&lt;/code&gt; package. Weâll first select the columns weâre interested in. Then weâll filter for players who played for more than 1000 minutes (mp), as done in the original. Weâll arrange the data in descending order by WAR - wins above replacement.&lt;/p&gt;
&lt;p&gt;Next, weâll rename the columns to match the names used by 538. Then weâll format all columns with decimal numbers to be rounded to one decimal place. Finally, weâll choose the top 100 rows (after filtering) to keep our data manageable.&lt;/p&gt;
&lt;p&gt;Weâll save this to a variable called &lt;code&gt;raptor_table&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;raptor_table &amp;lt;- df %&amp;gt;%
    select(player_name, season, mp, raptor_offense, raptor_defense, raptor_total, war_total, war_playoffs) %&amp;gt;%
    filter(mp &amp;gt; 1000) %&amp;gt;%
    arrange(desc(war_total)) %&amp;gt;%
    rename(
        NAME = player_name,
        SEASON = season,
        MIN_PLAYED = mp,
        OFF = raptor_offense,
        DEF = raptor_defense,
        TOTAL = raptor_total,
        WAR = war_total,
        PLAYOFF_WAR = war_playoffs
    ) %&amp;gt;%
    mutate_at(4:8, funs(round(., 1))) %&amp;gt;% 
    head(100) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: `funs()` is deprecated as of dplyr 0.8.0.
## Please use a list of either functions or lambdas: 
## 
##   # Simple named list: 
##   list(mean = mean, median = median)
## 
##   # Auto named with `tibble::lst()`: 
##   tibble::lst(mean, median)
## 
##   # Using lambdas
##   list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))
## This warning is displayed once every 8 hours.
## Call `lifecycle::last_warnings()` to see where this warning was generated.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction-to-reactable&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction to {reactable}&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;reactable&lt;/code&gt; package has a set of major functions for creating beautiful tables.&lt;/p&gt;
&lt;p&gt;The primary function is &lt;code&gt;reactable()&lt;/code&gt; which weâll use the wrap our &lt;code&gt;raptor_table&lt;/code&gt; variable. This function immediately provides base features for the table. In addition, weâll use several parameters that come with this function to create our table. For example, weâll define the table &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;minRows&lt;/code&gt; for number of rows in one view and &lt;code&gt;pagination&lt;/code&gt; behavior for longer tables that do not fit on one view, as well as several other parameters.&lt;/p&gt;
&lt;p&gt;Next, weâll use a set of functions to customize columns including: &lt;code&gt;colDef()&lt;/code&gt; for individual columns and &lt;code&gt;colGroup()&lt;/code&gt; for grouping columns together.&lt;/p&gt;
&lt;p&gt;Finally, weâll use &lt;code&gt;reactableTheme()&lt;/code&gt; for overall table styling. Thatâs all there is to creating beautiful tables with &lt;code&gt;reactable&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-basic-table&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating a Basic Table&lt;/h2&gt;
&lt;p&gt;First, weâll wrap our &lt;code&gt;raptor_table&lt;/code&gt; within the &lt;code&gt;reactable()&lt;/code&gt; function to create a basic table. Just doing this gives us individual column sorting, which is neat. Youâll note in the original table that OFF, DEF and TOTAL are &lt;em&gt;grouped&lt;/em&gt; under RAPTOR; this is achieved using &lt;code&gt;colGroup()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reactable(
    raptor_table,
    columns = list(
        OFF = colDef(name = &amp;quot;OFF.&amp;quot;),
        DEF = colDef(name = &amp;quot;DEF.&amp;quot;),
        TOTAL = colDef(name = &amp;quot;TOTAL&amp;quot;)
    ),
    columnGroups = list(
        colGroup(name = &amp;quot;RAPTOR&amp;quot;, columns = c(&amp;quot;OFF&amp;quot;, &amp;quot;DEF&amp;quot;, &amp;quot;TOTAL&amp;quot;))
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:auto;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;NAME&#34;:[&#34;Michael Jordan&#34;,&#34;LeBron James&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;Chris Paul&#34;,&#34;Kevin Garnett&#34;,&#34;Dwyane Wade&#34;,&#34;Draymond Green&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;Tim Duncan&#34;,&#34;John Stockton&#34;,&#34;James Harden&#34;,&#34;Chris Paul&#34;,&#34;Michael Jordan&#34;,&#34;Chris Paul&#34;,&#34;Larry Bird&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Shaquille O&#39;Neal&#34;,&#34;LeBron James&#34;,&#34;Magic Johnson&#34;,&#34;Magic Johnson&#34;,&#34;Kevin Garnett&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;James Harden&#34;,&#34;Kobe Bryant&#34;,&#34;Magic Johnson&#34;,&#34;Stephen Curry&#34;,&#34;Dwyane Wade&#34;,&#34;LeBron James&#34;,&#34;Larry Bird&#34;,&#34;Charles Barkley&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;Magic Johnson&#34;,&#34;Scottie Pippen&#34;,&#34;LeBron James&#34;,&#34;Hakeem Olajuwon&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;Ray Allen&#34;,&#34;Charles Barkley&#34;,&#34;Kevin Durant&#34;,&#34;Jason Kidd&#34;,&#34;Magic Johnson&#34;,&#34;Clyde Drexler&#34;,&#34;Paul George&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;James Harden&#34;,&#34;Hakeem Olajuwon&#34;,&#34;Chris Paul&#34;,&#34;David Robinson&#34;,&#34;LeBron James&#34;,&#34;Scottie Pippen&#34;,&#34;John Stockton&#34;,&#34;Kobe Bryant&#34;,&#34;Kevin Durant&#34;,&#34;Chris Paul&#34;,&#34;Dirk Nowitzki&#34;,&#34;Dirk Nowitzki&#34;,&#34;John Stockton&#34;,&#34;Mookie Blaylock&#34;,&#34;Tim Duncan&#34;,&#34;Kareem Abdul-Jabbar&#34;,&#34;Tracy McGrady&#34;,&#34;Anfernee Hardaway&#34;,&#34;Magic Johnson&#34;,&#34;Julius Erving&#34;,&#34;Scottie Pippen&#34;,&#34;Manu Ginobili&#34;,&#34;Gary Payton&#34;,&#34;Kobe Bryant&#34;,&#34;Nikola Jokic&#34;,&#34;David Robinson&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;Dwyane Wade&#34;,&#34;Kawhi Leonard&#34;,&#34;Dwyane Wade&#34;,&#34;Kevin Garnett&#34;,&#34;Jason Kidd&#34;,&#34;Karl Malone&#34;,&#34;Tim Duncan&#34;,&#34;Tim Hardaway&#34;],&#34;SEASON&#34;:[1991,2009,1989,1990,2016,1988,1993,1992,1996,2015,2010,2013,2009,2004,2006,2016,1992,1986,2003,1991,2019,2008,1997,2015,1987,1988,1989,2000,2012,1987,1991,2003,1988,2011,2007,2018,2008,1989,2017,2009,2008,1985,1990,1994,1994,1990,1992,2006,1993,1995,1990,1997,1984,2016,2001,1993,2014,2003,1982,1992,2019,1987,1996,2015,1994,2014,1996,2017,1997,1995,2009,2013,2011,2006,2003,1996,1997,2002,1977,2003,1996,1983,1982,1991,2005,1996,2003,2019,1991,2014,1998,1995,2011,2017,2010,2008,2002,1996,2007,1997],&#34;MIN_PLAYED&#34;:[3723,3634,3973,3871,3314,3738,3850,4022,3823,3439,3426,3837,3203,4014,3851,3687,3625,3883,4202,3476,3291,3492,3910,3302,4020,3320,3310,4163,3309,3570,3756,3586,3728,3985,4083,3172,4055,3404,3239,3333,3579,3976,3504,3387,3566,3313,4063,3965,3760,3697,3109,3635,3989,3531,3897,3885,3937,3841,3553,3598,3045,3409,3567,3617,4266,2643,3372,3538,3848,3060,3900,3604,3130,4072,3839,3594,3497,3709,3483,3262,3488,3550,3569,3718,2965,4073,3932,3061,3261,3142,4053,3410,3651,2903,3002,3315,3859,3838,3462,3837],&#34;OFF&#34;:[9.1,9.3,8.3,8.6,10.4,7.5,7.6,7,7.6,8.6,9.2,8.5,8.2,4.4,6.4,3.9,7.7,6.4,3.9,7.8,9.6,9,6.9,8.6,6.5,7.6,7.5,4.4,7.9,8.2,8.3,4.9,6.6,6,4.6,8.8,6.1,8.6,9.3,7.1,6.8,5.4,7.5,4.6,7,9,4.5,6.4,2,2.8,8.2,7.1,4.7,6,7.1,5.5,7.1,4.4,6.1,6.4,5.3,5.5,5.1,7.7,0.8,7.7,3.6,6.9,4.9,8,5.9,6.5,6.7,5.9,4.6,7,4.6,3.6,4.5,8,6.6,6.5,5,3.9,5.9,3.5,5.4,6.1,2.8,7.8,4.3,3.6,5.6,7.3,7.2,2.9,4.1,3.9,2.2,4.8],&#34;DEF&#34;:[3.2,3.2,2.7,2.2,2.1,3.7,2.8,2.7,2.7,2.4,2.3,1.1,3.7,4.5,2.8,5.4,2.2,2.6,4.2,2.2,1.1,1,1.8,2.1,1.7,2.8,2.8,3.2,2.1,0.8,0,4.1,1.8,1.5,2.6,1.3,1.2,0.5,-0.1,2.3,1.6,1.9,1.2,4.5,1.4,0.3,2.5,0.8,5.8,5.2,1.7,0.9,2.3,2.2,0.1,1.7,-0.3,2.9,1.9,1.4,4.2,2.8,2.7,-0.2,5.3,3.7,5,0.9,2.1,1.5,0.8,1,2.4,0.4,2.2,0.4,3.1,3.5,3.1,0.3,1,0.9,2.4,3,3.3,2.4,0.9,2.7,5.5,0.5,1.6,4,1.2,2,1.7,5,2.1,2.3,5,1.4],&#34;TOTAL&#34;:[12.3,12.6,11,10.8,12.5,11.2,10.4,9.6,10.3,11,11.4,9.6,11.8,8.8,9.2,9.4,9.9,9,8.1,10.1,10.7,10,8.6,10.7,8.2,10.4,10.2,7.6,10,9,8.4,8.9,8.4,7.6,7.3,10.1,7.2,9.2,9.2,9.4,8.4,7.3,8.6,9.1,8.4,9.3,7,7.3,7.8,7.9,9.9,8,7.1,8.2,7.2,7.2,6.8,7.3,8.1,7.8,9.5,8.4,7.8,7.5,6.1,11.4,8.5,7.8,7,9.5,6.7,7.5,9,6.3,6.8,7.5,7.7,7.1,7.6,8.4,7.6,7.4,7.3,6.8,9.2,6,6.3,8.7,8.2,8.3,6,7.6,6.8,9.3,8.9,7.8,6.2,6.2,7.2,6.2],&#34;WAR&#34;:[28.8,28.5,28,27,26.7,26.6,26,25.5,25.5,25.1,24.8,24.2,23.8,23.6,23.5,23.5,23.4,23.3,23.3,22.8,22.8,22.8,22.7,22.6,22.4,22.3,21.9,21.8,21.6,21.3,21.3,21.2,21.1,21.1,21,20.9,20.8,20.7,20.7,20.6,20.5,20.4,20.4,20.4,20.3,20.3,20.2,20.2,20.2,20.1,20.1,20,20,19.9,19.8,19.7,19.7,19.7,19.6,19.6,19.4,19.4,19.4,19.3,19.3,19.3,19.2,19.2,19.2,19,19,18.9,18.8,18.8,18.8,18.8,18.6,18.5,18.5,18.5,18.5,18.4,18.4,18.3,18.3,18.3,18.2,18.2,18.2,18.1,18.1,18,17.9,17.9,17.9,17.9,17.7,17.6,17.6,17.6],&#34;PLAYOFF_WAR&#34;:[6,5.7,4.9,5.3,3,2.3,5.7,5.4,4.5,5.2,3,5.8,0.3,3.4,6.4,5.7,3.4,5.1,6.8,2.7,2.7,3.6,4.5,3.2,4.4,3.4,0.9,4.4,7,4.4,4.6,1.4,3.5,4.6,5,3.9,4.7,3.1,5,1.4,3,3.4,1.9,0.2,2.8,2.1,4.7,2.2,3.1,2.9,0.9,4.3,5.7,5.7,4.6,5.3,3.7,4,3.7,4.8,2,0.7,4.8,3.2,4.9,4,1.6,5.8,3.2,0.7,5.8,2.3,1.7,5.4,3,3.4,2.1,2.3,3,1.7,2.7,3.3,3.9,4,5.2,4.2,1.7,5.2,0.7,2,4.7,1.8,4.4,4,1.3,5,4.1,3.3,3.6,2.6]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;NAME&#34;,&#34;name&#34;:&#34;NAME&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;SEASON&#34;,&#34;name&#34;:&#34;SEASON&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;MIN_PLAYED&#34;,&#34;name&#34;:&#34;MIN_PLAYED&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;OFF&#34;,&#34;name&#34;:&#34;OFF.&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;DEF&#34;,&#34;name&#34;:&#34;DEF.&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;TOTAL&#34;,&#34;name&#34;:&#34;TOTAL&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;WAR&#34;,&#34;name&#34;:&#34;WAR&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;PLAYOFF_WAR&#34;,&#34;name&#34;:&#34;PLAYOFF_WAR&#34;,&#34;type&#34;:&#34;numeric&#34;}],&#34;columnGroups&#34;:[{&#34;name&#34;:&#34;RAPTOR&#34;,&#34;columns&#34;:[&#34;OFF&#34;,&#34;DEF&#34;,&#34;TOTAL&#34;]}],&#34;defaultPageSize&#34;:10,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:1,&#34;dataKey&#34;:&#34;aad7a838f6c8709939555796669bc423&#34;,&#34;key&#34;:&#34;aad7a838f6c8709939555796669bc423&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;add-basic-table-features&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Add Basic Table Features&lt;/h2&gt;
&lt;p&gt;Next, weâll add basic table features including table height, mininum rows (10) and making it compact. In addition, weâll enable the sort icon, &lt;code&gt;showSortIcon&lt;/code&gt;, when any column name is clicked.&lt;/p&gt;
&lt;p&gt;We &lt;em&gt;wonât&lt;/em&gt; disable pagination because that will over write our &lt;code&gt;column grouping&lt;/code&gt; (i.e., RAPTOR).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reactable(
    raptor_table,
    height = 600,
    minRows = 10,
    showSortIcon = TRUE,
    compact = TRUE,
    pagination = TRUE,
    showPageInfo = TRUE,
    columns = list(
        OFF = colDef(name = &amp;quot;OFF.&amp;quot;),
        DEF = colDef(name = &amp;quot;DEF.&amp;quot;),
        TOTAL = colDef(name = &amp;quot;TOTAL&amp;quot;)
    ),
    columnGroups = list(
        colGroup(name = &amp;quot;RAPTOR&amp;quot;, columns = c(&amp;quot;OFF&amp;quot;, &amp;quot;DEF&amp;quot;, &amp;quot;TOTAL&amp;quot;))
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:600px;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;NAME&#34;:[&#34;Michael Jordan&#34;,&#34;LeBron James&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;Chris Paul&#34;,&#34;Kevin Garnett&#34;,&#34;Dwyane Wade&#34;,&#34;Draymond Green&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;Tim Duncan&#34;,&#34;John Stockton&#34;,&#34;James Harden&#34;,&#34;Chris Paul&#34;,&#34;Michael Jordan&#34;,&#34;Chris Paul&#34;,&#34;Larry Bird&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Shaquille O&#39;Neal&#34;,&#34;LeBron James&#34;,&#34;Magic Johnson&#34;,&#34;Magic Johnson&#34;,&#34;Kevin Garnett&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;James Harden&#34;,&#34;Kobe Bryant&#34;,&#34;Magic Johnson&#34;,&#34;Stephen Curry&#34;,&#34;Dwyane Wade&#34;,&#34;LeBron James&#34;,&#34;Larry Bird&#34;,&#34;Charles Barkley&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;Magic Johnson&#34;,&#34;Scottie Pippen&#34;,&#34;LeBron James&#34;,&#34;Hakeem Olajuwon&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;Ray Allen&#34;,&#34;Charles Barkley&#34;,&#34;Kevin Durant&#34;,&#34;Jason Kidd&#34;,&#34;Magic Johnson&#34;,&#34;Clyde Drexler&#34;,&#34;Paul George&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;James Harden&#34;,&#34;Hakeem Olajuwon&#34;,&#34;Chris Paul&#34;,&#34;David Robinson&#34;,&#34;LeBron James&#34;,&#34;Scottie Pippen&#34;,&#34;John Stockton&#34;,&#34;Kobe Bryant&#34;,&#34;Kevin Durant&#34;,&#34;Chris Paul&#34;,&#34;Dirk Nowitzki&#34;,&#34;Dirk Nowitzki&#34;,&#34;John Stockton&#34;,&#34;Mookie Blaylock&#34;,&#34;Tim Duncan&#34;,&#34;Kareem Abdul-Jabbar&#34;,&#34;Tracy McGrady&#34;,&#34;Anfernee Hardaway&#34;,&#34;Magic Johnson&#34;,&#34;Julius Erving&#34;,&#34;Scottie Pippen&#34;,&#34;Manu Ginobili&#34;,&#34;Gary Payton&#34;,&#34;Kobe Bryant&#34;,&#34;Nikola Jokic&#34;,&#34;David Robinson&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;Dwyane Wade&#34;,&#34;Kawhi Leonard&#34;,&#34;Dwyane Wade&#34;,&#34;Kevin Garnett&#34;,&#34;Jason Kidd&#34;,&#34;Karl Malone&#34;,&#34;Tim Duncan&#34;,&#34;Tim Hardaway&#34;],&#34;SEASON&#34;:[1991,2009,1989,1990,2016,1988,1993,1992,1996,2015,2010,2013,2009,2004,2006,2016,1992,1986,2003,1991,2019,2008,1997,2015,1987,1988,1989,2000,2012,1987,1991,2003,1988,2011,2007,2018,2008,1989,2017,2009,2008,1985,1990,1994,1994,1990,1992,2006,1993,1995,1990,1997,1984,2016,2001,1993,2014,2003,1982,1992,2019,1987,1996,2015,1994,2014,1996,2017,1997,1995,2009,2013,2011,2006,2003,1996,1997,2002,1977,2003,1996,1983,1982,1991,2005,1996,2003,2019,1991,2014,1998,1995,2011,2017,2010,2008,2002,1996,2007,1997],&#34;MIN_PLAYED&#34;:[3723,3634,3973,3871,3314,3738,3850,4022,3823,3439,3426,3837,3203,4014,3851,3687,3625,3883,4202,3476,3291,3492,3910,3302,4020,3320,3310,4163,3309,3570,3756,3586,3728,3985,4083,3172,4055,3404,3239,3333,3579,3976,3504,3387,3566,3313,4063,3965,3760,3697,3109,3635,3989,3531,3897,3885,3937,3841,3553,3598,3045,3409,3567,3617,4266,2643,3372,3538,3848,3060,3900,3604,3130,4072,3839,3594,3497,3709,3483,3262,3488,3550,3569,3718,2965,4073,3932,3061,3261,3142,4053,3410,3651,2903,3002,3315,3859,3838,3462,3837],&#34;OFF&#34;:[9.1,9.3,8.3,8.6,10.4,7.5,7.6,7,7.6,8.6,9.2,8.5,8.2,4.4,6.4,3.9,7.7,6.4,3.9,7.8,9.6,9,6.9,8.6,6.5,7.6,7.5,4.4,7.9,8.2,8.3,4.9,6.6,6,4.6,8.8,6.1,8.6,9.3,7.1,6.8,5.4,7.5,4.6,7,9,4.5,6.4,2,2.8,8.2,7.1,4.7,6,7.1,5.5,7.1,4.4,6.1,6.4,5.3,5.5,5.1,7.7,0.8,7.7,3.6,6.9,4.9,8,5.9,6.5,6.7,5.9,4.6,7,4.6,3.6,4.5,8,6.6,6.5,5,3.9,5.9,3.5,5.4,6.1,2.8,7.8,4.3,3.6,5.6,7.3,7.2,2.9,4.1,3.9,2.2,4.8],&#34;DEF&#34;:[3.2,3.2,2.7,2.2,2.1,3.7,2.8,2.7,2.7,2.4,2.3,1.1,3.7,4.5,2.8,5.4,2.2,2.6,4.2,2.2,1.1,1,1.8,2.1,1.7,2.8,2.8,3.2,2.1,0.8,0,4.1,1.8,1.5,2.6,1.3,1.2,0.5,-0.1,2.3,1.6,1.9,1.2,4.5,1.4,0.3,2.5,0.8,5.8,5.2,1.7,0.9,2.3,2.2,0.1,1.7,-0.3,2.9,1.9,1.4,4.2,2.8,2.7,-0.2,5.3,3.7,5,0.9,2.1,1.5,0.8,1,2.4,0.4,2.2,0.4,3.1,3.5,3.1,0.3,1,0.9,2.4,3,3.3,2.4,0.9,2.7,5.5,0.5,1.6,4,1.2,2,1.7,5,2.1,2.3,5,1.4],&#34;TOTAL&#34;:[12.3,12.6,11,10.8,12.5,11.2,10.4,9.6,10.3,11,11.4,9.6,11.8,8.8,9.2,9.4,9.9,9,8.1,10.1,10.7,10,8.6,10.7,8.2,10.4,10.2,7.6,10,9,8.4,8.9,8.4,7.6,7.3,10.1,7.2,9.2,9.2,9.4,8.4,7.3,8.6,9.1,8.4,9.3,7,7.3,7.8,7.9,9.9,8,7.1,8.2,7.2,7.2,6.8,7.3,8.1,7.8,9.5,8.4,7.8,7.5,6.1,11.4,8.5,7.8,7,9.5,6.7,7.5,9,6.3,6.8,7.5,7.7,7.1,7.6,8.4,7.6,7.4,7.3,6.8,9.2,6,6.3,8.7,8.2,8.3,6,7.6,6.8,9.3,8.9,7.8,6.2,6.2,7.2,6.2],&#34;WAR&#34;:[28.8,28.5,28,27,26.7,26.6,26,25.5,25.5,25.1,24.8,24.2,23.8,23.6,23.5,23.5,23.4,23.3,23.3,22.8,22.8,22.8,22.7,22.6,22.4,22.3,21.9,21.8,21.6,21.3,21.3,21.2,21.1,21.1,21,20.9,20.8,20.7,20.7,20.6,20.5,20.4,20.4,20.4,20.3,20.3,20.2,20.2,20.2,20.1,20.1,20,20,19.9,19.8,19.7,19.7,19.7,19.6,19.6,19.4,19.4,19.4,19.3,19.3,19.3,19.2,19.2,19.2,19,19,18.9,18.8,18.8,18.8,18.8,18.6,18.5,18.5,18.5,18.5,18.4,18.4,18.3,18.3,18.3,18.2,18.2,18.2,18.1,18.1,18,17.9,17.9,17.9,17.9,17.7,17.6,17.6,17.6],&#34;PLAYOFF_WAR&#34;:[6,5.7,4.9,5.3,3,2.3,5.7,5.4,4.5,5.2,3,5.8,0.3,3.4,6.4,5.7,3.4,5.1,6.8,2.7,2.7,3.6,4.5,3.2,4.4,3.4,0.9,4.4,7,4.4,4.6,1.4,3.5,4.6,5,3.9,4.7,3.1,5,1.4,3,3.4,1.9,0.2,2.8,2.1,4.7,2.2,3.1,2.9,0.9,4.3,5.7,5.7,4.6,5.3,3.7,4,3.7,4.8,2,0.7,4.8,3.2,4.9,4,1.6,5.8,3.2,0.7,5.8,2.3,1.7,5.4,3,3.4,2.1,2.3,3,1.7,2.7,3.3,3.9,4,5.2,4.2,1.7,5.2,0.7,2,4.7,1.8,4.4,4,1.3,5,4.1,3.3,3.6,2.6]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;NAME&#34;,&#34;name&#34;:&#34;NAME&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;SEASON&#34;,&#34;name&#34;:&#34;SEASON&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;MIN_PLAYED&#34;,&#34;name&#34;:&#34;MIN_PLAYED&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;OFF&#34;,&#34;name&#34;:&#34;OFF.&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;DEF&#34;,&#34;name&#34;:&#34;DEF.&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;TOTAL&#34;,&#34;name&#34;:&#34;TOTAL&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;WAR&#34;,&#34;name&#34;:&#34;WAR&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;PLAYOFF_WAR&#34;,&#34;name&#34;:&#34;PLAYOFF_WAR&#34;,&#34;type&#34;:&#34;numeric&#34;}],&#34;columnGroups&#34;:[{&#34;name&#34;:&#34;RAPTOR&#34;,&#34;columns&#34;:[&#34;OFF&#34;,&#34;DEF&#34;,&#34;TOTAL&#34;]}],&#34;defaultPageSize&#34;:10,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:10,&#34;compact&#34;:true,&#34;height&#34;:&#34;600px&#34;,&#34;dataKey&#34;:&#34;aad7a838f6c8709939555796669bc423&#34;,&#34;key&#34;:&#34;aad7a838f6c8709939555796669bc423&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;add-search-box&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Add Search Box&lt;/h2&gt;
&lt;p&gt;Next, weâll add a search box with the &lt;code&gt;searchable&lt;/code&gt; parameter, as well as placeholder text for readability (&lt;code&gt;langauge&lt;/code&gt;). You can type in a fake name in the search box and if there are no matches, the text will render âNo matchesâ.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reactable(
    raptor_table,
    height = 600,
    minRows = 10,
    showSortIcon = TRUE,
    compact = TRUE,
    pagination = TRUE,
    showPageInfo = TRUE,
    searchable = TRUE,
    language = reactableLang(searchPlaceholder = &amp;quot;Search...&amp;quot;, noData = &amp;quot;No matches&amp;quot;),
    columns = list(
        OFF = colDef(name = &amp;quot;OFF.&amp;quot;),
        DEF = colDef(name = &amp;quot;DEF.&amp;quot;),
        TOTAL = colDef(name = &amp;quot;TOTAL&amp;quot;)
    ),
    columnGroups = list(
        colGroup(name = &amp;quot;RAPTOR&amp;quot;, columns = c(&amp;quot;OFF&amp;quot;, &amp;quot;DEF&amp;quot;, &amp;quot;TOTAL&amp;quot;))
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-3&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:600px;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;NAME&#34;:[&#34;Michael Jordan&#34;,&#34;LeBron James&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;Chris Paul&#34;,&#34;Kevin Garnett&#34;,&#34;Dwyane Wade&#34;,&#34;Draymond Green&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;Tim Duncan&#34;,&#34;John Stockton&#34;,&#34;James Harden&#34;,&#34;Chris Paul&#34;,&#34;Michael Jordan&#34;,&#34;Chris Paul&#34;,&#34;Larry Bird&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Shaquille O&#39;Neal&#34;,&#34;LeBron James&#34;,&#34;Magic Johnson&#34;,&#34;Magic Johnson&#34;,&#34;Kevin Garnett&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;James Harden&#34;,&#34;Kobe Bryant&#34;,&#34;Magic Johnson&#34;,&#34;Stephen Curry&#34;,&#34;Dwyane Wade&#34;,&#34;LeBron James&#34;,&#34;Larry Bird&#34;,&#34;Charles Barkley&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;Magic Johnson&#34;,&#34;Scottie Pippen&#34;,&#34;LeBron James&#34;,&#34;Hakeem Olajuwon&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;Ray Allen&#34;,&#34;Charles Barkley&#34;,&#34;Kevin Durant&#34;,&#34;Jason Kidd&#34;,&#34;Magic Johnson&#34;,&#34;Clyde Drexler&#34;,&#34;Paul George&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;James Harden&#34;,&#34;Hakeem Olajuwon&#34;,&#34;Chris Paul&#34;,&#34;David Robinson&#34;,&#34;LeBron James&#34;,&#34;Scottie Pippen&#34;,&#34;John Stockton&#34;,&#34;Kobe Bryant&#34;,&#34;Kevin Durant&#34;,&#34;Chris Paul&#34;,&#34;Dirk Nowitzki&#34;,&#34;Dirk Nowitzki&#34;,&#34;John Stockton&#34;,&#34;Mookie Blaylock&#34;,&#34;Tim Duncan&#34;,&#34;Kareem Abdul-Jabbar&#34;,&#34;Tracy McGrady&#34;,&#34;Anfernee Hardaway&#34;,&#34;Magic Johnson&#34;,&#34;Julius Erving&#34;,&#34;Scottie Pippen&#34;,&#34;Manu Ginobili&#34;,&#34;Gary Payton&#34;,&#34;Kobe Bryant&#34;,&#34;Nikola Jokic&#34;,&#34;David Robinson&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;Dwyane Wade&#34;,&#34;Kawhi Leonard&#34;,&#34;Dwyane Wade&#34;,&#34;Kevin Garnett&#34;,&#34;Jason Kidd&#34;,&#34;Karl Malone&#34;,&#34;Tim Duncan&#34;,&#34;Tim Hardaway&#34;],&#34;SEASON&#34;:[1991,2009,1989,1990,2016,1988,1993,1992,1996,2015,2010,2013,2009,2004,2006,2016,1992,1986,2003,1991,2019,2008,1997,2015,1987,1988,1989,2000,2012,1987,1991,2003,1988,2011,2007,2018,2008,1989,2017,2009,2008,1985,1990,1994,1994,1990,1992,2006,1993,1995,1990,1997,1984,2016,2001,1993,2014,2003,1982,1992,2019,1987,1996,2015,1994,2014,1996,2017,1997,1995,2009,2013,2011,2006,2003,1996,1997,2002,1977,2003,1996,1983,1982,1991,2005,1996,2003,2019,1991,2014,1998,1995,2011,2017,2010,2008,2002,1996,2007,1997],&#34;MIN_PLAYED&#34;:[3723,3634,3973,3871,3314,3738,3850,4022,3823,3439,3426,3837,3203,4014,3851,3687,3625,3883,4202,3476,3291,3492,3910,3302,4020,3320,3310,4163,3309,3570,3756,3586,3728,3985,4083,3172,4055,3404,3239,3333,3579,3976,3504,3387,3566,3313,4063,3965,3760,3697,3109,3635,3989,3531,3897,3885,3937,3841,3553,3598,3045,3409,3567,3617,4266,2643,3372,3538,3848,3060,3900,3604,3130,4072,3839,3594,3497,3709,3483,3262,3488,3550,3569,3718,2965,4073,3932,3061,3261,3142,4053,3410,3651,2903,3002,3315,3859,3838,3462,3837],&#34;OFF&#34;:[9.1,9.3,8.3,8.6,10.4,7.5,7.6,7,7.6,8.6,9.2,8.5,8.2,4.4,6.4,3.9,7.7,6.4,3.9,7.8,9.6,9,6.9,8.6,6.5,7.6,7.5,4.4,7.9,8.2,8.3,4.9,6.6,6,4.6,8.8,6.1,8.6,9.3,7.1,6.8,5.4,7.5,4.6,7,9,4.5,6.4,2,2.8,8.2,7.1,4.7,6,7.1,5.5,7.1,4.4,6.1,6.4,5.3,5.5,5.1,7.7,0.8,7.7,3.6,6.9,4.9,8,5.9,6.5,6.7,5.9,4.6,7,4.6,3.6,4.5,8,6.6,6.5,5,3.9,5.9,3.5,5.4,6.1,2.8,7.8,4.3,3.6,5.6,7.3,7.2,2.9,4.1,3.9,2.2,4.8],&#34;DEF&#34;:[3.2,3.2,2.7,2.2,2.1,3.7,2.8,2.7,2.7,2.4,2.3,1.1,3.7,4.5,2.8,5.4,2.2,2.6,4.2,2.2,1.1,1,1.8,2.1,1.7,2.8,2.8,3.2,2.1,0.8,0,4.1,1.8,1.5,2.6,1.3,1.2,0.5,-0.1,2.3,1.6,1.9,1.2,4.5,1.4,0.3,2.5,0.8,5.8,5.2,1.7,0.9,2.3,2.2,0.1,1.7,-0.3,2.9,1.9,1.4,4.2,2.8,2.7,-0.2,5.3,3.7,5,0.9,2.1,1.5,0.8,1,2.4,0.4,2.2,0.4,3.1,3.5,3.1,0.3,1,0.9,2.4,3,3.3,2.4,0.9,2.7,5.5,0.5,1.6,4,1.2,2,1.7,5,2.1,2.3,5,1.4],&#34;TOTAL&#34;:[12.3,12.6,11,10.8,12.5,11.2,10.4,9.6,10.3,11,11.4,9.6,11.8,8.8,9.2,9.4,9.9,9,8.1,10.1,10.7,10,8.6,10.7,8.2,10.4,10.2,7.6,10,9,8.4,8.9,8.4,7.6,7.3,10.1,7.2,9.2,9.2,9.4,8.4,7.3,8.6,9.1,8.4,9.3,7,7.3,7.8,7.9,9.9,8,7.1,8.2,7.2,7.2,6.8,7.3,8.1,7.8,9.5,8.4,7.8,7.5,6.1,11.4,8.5,7.8,7,9.5,6.7,7.5,9,6.3,6.8,7.5,7.7,7.1,7.6,8.4,7.6,7.4,7.3,6.8,9.2,6,6.3,8.7,8.2,8.3,6,7.6,6.8,9.3,8.9,7.8,6.2,6.2,7.2,6.2],&#34;WAR&#34;:[28.8,28.5,28,27,26.7,26.6,26,25.5,25.5,25.1,24.8,24.2,23.8,23.6,23.5,23.5,23.4,23.3,23.3,22.8,22.8,22.8,22.7,22.6,22.4,22.3,21.9,21.8,21.6,21.3,21.3,21.2,21.1,21.1,21,20.9,20.8,20.7,20.7,20.6,20.5,20.4,20.4,20.4,20.3,20.3,20.2,20.2,20.2,20.1,20.1,20,20,19.9,19.8,19.7,19.7,19.7,19.6,19.6,19.4,19.4,19.4,19.3,19.3,19.3,19.2,19.2,19.2,19,19,18.9,18.8,18.8,18.8,18.8,18.6,18.5,18.5,18.5,18.5,18.4,18.4,18.3,18.3,18.3,18.2,18.2,18.2,18.1,18.1,18,17.9,17.9,17.9,17.9,17.7,17.6,17.6,17.6],&#34;PLAYOFF_WAR&#34;:[6,5.7,4.9,5.3,3,2.3,5.7,5.4,4.5,5.2,3,5.8,0.3,3.4,6.4,5.7,3.4,5.1,6.8,2.7,2.7,3.6,4.5,3.2,4.4,3.4,0.9,4.4,7,4.4,4.6,1.4,3.5,4.6,5,3.9,4.7,3.1,5,1.4,3,3.4,1.9,0.2,2.8,2.1,4.7,2.2,3.1,2.9,0.9,4.3,5.7,5.7,4.6,5.3,3.7,4,3.7,4.8,2,0.7,4.8,3.2,4.9,4,1.6,5.8,3.2,0.7,5.8,2.3,1.7,5.4,3,3.4,2.1,2.3,3,1.7,2.7,3.3,3.9,4,5.2,4.2,1.7,5.2,0.7,2,4.7,1.8,4.4,4,1.3,5,4.1,3.3,3.6,2.6]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;NAME&#34;,&#34;name&#34;:&#34;NAME&#34;,&#34;type&#34;:&#34;character&#34;},{&#34;accessor&#34;:&#34;SEASON&#34;,&#34;name&#34;:&#34;SEASON&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;MIN_PLAYED&#34;,&#34;name&#34;:&#34;MIN_PLAYED&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;OFF&#34;,&#34;name&#34;:&#34;OFF.&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;DEF&#34;,&#34;name&#34;:&#34;DEF.&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;TOTAL&#34;,&#34;name&#34;:&#34;TOTAL&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;WAR&#34;,&#34;name&#34;:&#34;WAR&#34;,&#34;type&#34;:&#34;numeric&#34;},{&#34;accessor&#34;:&#34;PLAYOFF_WAR&#34;,&#34;name&#34;:&#34;PLAYOFF_WAR&#34;,&#34;type&#34;:&#34;numeric&#34;}],&#34;columnGroups&#34;:[{&#34;name&#34;:&#34;RAPTOR&#34;,&#34;columns&#34;:[&#34;OFF&#34;,&#34;DEF&#34;,&#34;TOTAL&#34;]}],&#34;searchable&#34;:true,&#34;defaultPageSize&#34;:10,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:10,&#34;compact&#34;:true,&#34;height&#34;:&#34;600px&#34;,&#34;language&#34;:{&#34;searchPlaceholder&#34;:&#34;Search...&#34;,&#34;noData&#34;:&#34;No matches&#34;},&#34;dataKey&#34;:&#34;aad7a838f6c8709939555796669bc423&#34;,&#34;key&#34;:&#34;aad7a838f6c8709939555796669bc423&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;format-individual-columns&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Format Individual Columns&lt;/h2&gt;
&lt;p&gt;Next, weâll add some formatting and styling to each of the individual columns. This will include &lt;strong&gt;column width&lt;/strong&gt; and &lt;strong&gt;font&lt;/strong&gt; used within the columns. The bulk of this process will be within the &lt;code&gt;columns&lt;/code&gt; parameter. In addition to the &lt;code&gt;OFF&lt;/code&gt;, &lt;code&gt;DEF&lt;/code&gt; and &lt;code&gt;TOTAL&lt;/code&gt; columns, weâll add formating for the rest of the columns.&lt;/p&gt;
&lt;p&gt;This includes customizing name, customizing digits (i.e., making sure commas are placed for minutes played), font and font sizes.&lt;/p&gt;
&lt;p&gt;Weâll also add a â+â prefix for the &lt;code&gt;TOTAL&lt;/code&gt; column. Althought we had previously formatted our data to one decimal place, weâll need to re-do this with &lt;code&gt;format = colFormat(digits = 1)&lt;/code&gt; to make sure all digits line up properly. Youâll note that the &lt;code&gt;style&lt;/code&gt; for &lt;code&gt;PLAYOFF_WAR&lt;/code&gt; has a &lt;code&gt;whiteSpace&lt;/code&gt; parameter set to pre - this will be apparent why when we add visuals to this particular column below.&lt;/p&gt;
&lt;p&gt;We will style &lt;code&gt;OFF&lt;/code&gt;, &lt;code&gt;DEF&lt;/code&gt; and &lt;code&gt;TOTAL&lt;/code&gt; separately in the next section.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reactable(
    raptor_table,
    height = 600,
    minRows = 10,
    showSortIcon = TRUE,
    compact = TRUE,
    pagination = TRUE,
    showPageInfo = TRUE,
    searchable = TRUE,
    language = reactableLang(searchPlaceholder = &amp;quot;Search...&amp;quot;, noData = &amp;quot;No matches&amp;quot;),
    columns = list(
        NAME = colDef(minWidth = 120, style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, fontSize = 14)),
        SEASON = colDef(minWidth = 60, style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, fontSize = 14), align = &amp;quot;left&amp;quot;),
        MIN_PLAYED = colDef(name = &amp;#39;MIN. PLAYED&amp;#39;, format = colFormat(separators = TRUE), minWidth = 60, style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, fontSize = 14), align = &amp;#39;right&amp;#39;),
        OFF = colDef(name = &amp;quot;OFF.&amp;quot;, format = colFormat(digits = 1), minWidth = 60, align = &amp;#39;right&amp;#39;),
        DEF = colDef(name = &amp;quot;DEF.&amp;quot;, format = colFormat(digits = 1), minWidth = 60, align = &amp;#39;right&amp;#39;),
        TOTAL = colDef(name = &amp;quot;TOTAL&amp;quot;, format = colFormat(prefix = &amp;quot;+&amp;quot;, digits = 1), minWidth = 60, align = &amp;#39;right&amp;#39;),
        WAR = colDef(format = colFormat(digits = 1), minWidth = 60, style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, fontSize = 14), align = &amp;quot;right&amp;quot;),
        PLAYOFF_WAR = colDef(name = &amp;quot;P/O WAR&amp;quot;, format = colFormat(digits = 1), minWidth = 100, align = &amp;#39;center&amp;#39;, style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, whiteSpace = &amp;quot;pre&amp;quot;, fontSize = 14))
    ),
    columnGroups = list(
        colGroup(name = &amp;quot;RAPTOR&amp;quot;, columns = c(&amp;quot;OFF&amp;quot;, &amp;quot;DEF&amp;quot;, &amp;quot;TOTAL&amp;quot;))
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-4&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:600px;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;NAME&#34;:[&#34;Michael Jordan&#34;,&#34;LeBron James&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;Chris Paul&#34;,&#34;Kevin Garnett&#34;,&#34;Dwyane Wade&#34;,&#34;Draymond Green&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;Tim Duncan&#34;,&#34;John Stockton&#34;,&#34;James Harden&#34;,&#34;Chris Paul&#34;,&#34;Michael Jordan&#34;,&#34;Chris Paul&#34;,&#34;Larry Bird&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Shaquille O&#39;Neal&#34;,&#34;LeBron James&#34;,&#34;Magic Johnson&#34;,&#34;Magic Johnson&#34;,&#34;Kevin Garnett&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;James Harden&#34;,&#34;Kobe Bryant&#34;,&#34;Magic Johnson&#34;,&#34;Stephen Curry&#34;,&#34;Dwyane Wade&#34;,&#34;LeBron James&#34;,&#34;Larry Bird&#34;,&#34;Charles Barkley&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;Magic Johnson&#34;,&#34;Scottie Pippen&#34;,&#34;LeBron James&#34;,&#34;Hakeem Olajuwon&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;Ray Allen&#34;,&#34;Charles Barkley&#34;,&#34;Kevin Durant&#34;,&#34;Jason Kidd&#34;,&#34;Magic Johnson&#34;,&#34;Clyde Drexler&#34;,&#34;Paul George&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;James Harden&#34;,&#34;Hakeem Olajuwon&#34;,&#34;Chris Paul&#34;,&#34;David Robinson&#34;,&#34;LeBron James&#34;,&#34;Scottie Pippen&#34;,&#34;John Stockton&#34;,&#34;Kobe Bryant&#34;,&#34;Kevin Durant&#34;,&#34;Chris Paul&#34;,&#34;Dirk Nowitzki&#34;,&#34;Dirk Nowitzki&#34;,&#34;John Stockton&#34;,&#34;Mookie Blaylock&#34;,&#34;Tim Duncan&#34;,&#34;Kareem Abdul-Jabbar&#34;,&#34;Tracy McGrady&#34;,&#34;Anfernee Hardaway&#34;,&#34;Magic Johnson&#34;,&#34;Julius Erving&#34;,&#34;Scottie Pippen&#34;,&#34;Manu Ginobili&#34;,&#34;Gary Payton&#34;,&#34;Kobe Bryant&#34;,&#34;Nikola Jokic&#34;,&#34;David Robinson&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;Dwyane Wade&#34;,&#34;Kawhi Leonard&#34;,&#34;Dwyane Wade&#34;,&#34;Kevin Garnett&#34;,&#34;Jason Kidd&#34;,&#34;Karl Malone&#34;,&#34;Tim Duncan&#34;,&#34;Tim Hardaway&#34;],&#34;SEASON&#34;:[1991,2009,1989,1990,2016,1988,1993,1992,1996,2015,2010,2013,2009,2004,2006,2016,1992,1986,2003,1991,2019,2008,1997,2015,1987,1988,1989,2000,2012,1987,1991,2003,1988,2011,2007,2018,2008,1989,2017,2009,2008,1985,1990,1994,1994,1990,1992,2006,1993,1995,1990,1997,1984,2016,2001,1993,2014,2003,1982,1992,2019,1987,1996,2015,1994,2014,1996,2017,1997,1995,2009,2013,2011,2006,2003,1996,1997,2002,1977,2003,1996,1983,1982,1991,2005,1996,2003,2019,1991,2014,1998,1995,2011,2017,2010,2008,2002,1996,2007,1997],&#34;MIN_PLAYED&#34;:[3723,3634,3973,3871,3314,3738,3850,4022,3823,3439,3426,3837,3203,4014,3851,3687,3625,3883,4202,3476,3291,3492,3910,3302,4020,3320,3310,4163,3309,3570,3756,3586,3728,3985,4083,3172,4055,3404,3239,3333,3579,3976,3504,3387,3566,3313,4063,3965,3760,3697,3109,3635,3989,3531,3897,3885,3937,3841,3553,3598,3045,3409,3567,3617,4266,2643,3372,3538,3848,3060,3900,3604,3130,4072,3839,3594,3497,3709,3483,3262,3488,3550,3569,3718,2965,4073,3932,3061,3261,3142,4053,3410,3651,2903,3002,3315,3859,3838,3462,3837],&#34;OFF&#34;:[9.1,9.3,8.3,8.6,10.4,7.5,7.6,7,7.6,8.6,9.2,8.5,8.2,4.4,6.4,3.9,7.7,6.4,3.9,7.8,9.6,9,6.9,8.6,6.5,7.6,7.5,4.4,7.9,8.2,8.3,4.9,6.6,6,4.6,8.8,6.1,8.6,9.3,7.1,6.8,5.4,7.5,4.6,7,9,4.5,6.4,2,2.8,8.2,7.1,4.7,6,7.1,5.5,7.1,4.4,6.1,6.4,5.3,5.5,5.1,7.7,0.8,7.7,3.6,6.9,4.9,8,5.9,6.5,6.7,5.9,4.6,7,4.6,3.6,4.5,8,6.6,6.5,5,3.9,5.9,3.5,5.4,6.1,2.8,7.8,4.3,3.6,5.6,7.3,7.2,2.9,4.1,3.9,2.2,4.8],&#34;DEF&#34;:[3.2,3.2,2.7,2.2,2.1,3.7,2.8,2.7,2.7,2.4,2.3,1.1,3.7,4.5,2.8,5.4,2.2,2.6,4.2,2.2,1.1,1,1.8,2.1,1.7,2.8,2.8,3.2,2.1,0.8,0,4.1,1.8,1.5,2.6,1.3,1.2,0.5,-0.1,2.3,1.6,1.9,1.2,4.5,1.4,0.3,2.5,0.8,5.8,5.2,1.7,0.9,2.3,2.2,0.1,1.7,-0.3,2.9,1.9,1.4,4.2,2.8,2.7,-0.2,5.3,3.7,5,0.9,2.1,1.5,0.8,1,2.4,0.4,2.2,0.4,3.1,3.5,3.1,0.3,1,0.9,2.4,3,3.3,2.4,0.9,2.7,5.5,0.5,1.6,4,1.2,2,1.7,5,2.1,2.3,5,1.4],&#34;TOTAL&#34;:[12.3,12.6,11,10.8,12.5,11.2,10.4,9.6,10.3,11,11.4,9.6,11.8,8.8,9.2,9.4,9.9,9,8.1,10.1,10.7,10,8.6,10.7,8.2,10.4,10.2,7.6,10,9,8.4,8.9,8.4,7.6,7.3,10.1,7.2,9.2,9.2,9.4,8.4,7.3,8.6,9.1,8.4,9.3,7,7.3,7.8,7.9,9.9,8,7.1,8.2,7.2,7.2,6.8,7.3,8.1,7.8,9.5,8.4,7.8,7.5,6.1,11.4,8.5,7.8,7,9.5,6.7,7.5,9,6.3,6.8,7.5,7.7,7.1,7.6,8.4,7.6,7.4,7.3,6.8,9.2,6,6.3,8.7,8.2,8.3,6,7.6,6.8,9.3,8.9,7.8,6.2,6.2,7.2,6.2],&#34;WAR&#34;:[28.8,28.5,28,27,26.7,26.6,26,25.5,25.5,25.1,24.8,24.2,23.8,23.6,23.5,23.5,23.4,23.3,23.3,22.8,22.8,22.8,22.7,22.6,22.4,22.3,21.9,21.8,21.6,21.3,21.3,21.2,21.1,21.1,21,20.9,20.8,20.7,20.7,20.6,20.5,20.4,20.4,20.4,20.3,20.3,20.2,20.2,20.2,20.1,20.1,20,20,19.9,19.8,19.7,19.7,19.7,19.6,19.6,19.4,19.4,19.4,19.3,19.3,19.3,19.2,19.2,19.2,19,19,18.9,18.8,18.8,18.8,18.8,18.6,18.5,18.5,18.5,18.5,18.4,18.4,18.3,18.3,18.3,18.2,18.2,18.2,18.1,18.1,18,17.9,17.9,17.9,17.9,17.7,17.6,17.6,17.6],&#34;PLAYOFF_WAR&#34;:[6,5.7,4.9,5.3,3,2.3,5.7,5.4,4.5,5.2,3,5.8,0.3,3.4,6.4,5.7,3.4,5.1,6.8,2.7,2.7,3.6,4.5,3.2,4.4,3.4,0.9,4.4,7,4.4,4.6,1.4,3.5,4.6,5,3.9,4.7,3.1,5,1.4,3,3.4,1.9,0.2,2.8,2.1,4.7,2.2,3.1,2.9,0.9,4.3,5.7,5.7,4.6,5.3,3.7,4,3.7,4.8,2,0.7,4.8,3.2,4.9,4,1.6,5.8,3.2,0.7,5.8,2.3,1.7,5.4,3,3.4,2.1,2.3,3,1.7,2.7,3.3,3.9,4,5.2,4.2,1.7,5.2,0.7,2,4.7,1.8,4.4,4,1.3,5,4.1,3.3,3.6,2.6]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;NAME&#34;,&#34;name&#34;:&#34;NAME&#34;,&#34;type&#34;:&#34;character&#34;,&#34;minWidth&#34;:120,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;SEASON&#34;,&#34;name&#34;:&#34;SEASON&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;minWidth&#34;:60,&#34;align&#34;:&#34;left&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;MIN_PLAYED&#34;,&#34;name&#34;:&#34;MIN. PLAYED&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;separators&#34;:true},&#34;aggregated&#34;:{&#34;separators&#34;:true}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;OFF&#34;,&#34;name&#34;:&#34;OFF.&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;},{&#34;accessor&#34;:&#34;DEF&#34;,&#34;name&#34;:&#34;DEF.&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;},{&#34;accessor&#34;:&#34;TOTAL&#34;,&#34;name&#34;:&#34;TOTAL&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;prefix&#34;:&#34;+&#34;,&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;prefix&#34;:&#34;+&#34;,&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;},{&#34;accessor&#34;:&#34;WAR&#34;,&#34;name&#34;:&#34;WAR&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;PLAYOFF_WAR&#34;,&#34;name&#34;:&#34;P/O WAR&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:100,&#34;align&#34;:&#34;center&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;whiteSpace&#34;:&#34;pre&#34;,&#34;fontSize&#34;:14}}],&#34;columnGroups&#34;:[{&#34;name&#34;:&#34;RAPTOR&#34;,&#34;columns&#34;:[&#34;OFF&#34;,&#34;DEF&#34;,&#34;TOTAL&#34;]}],&#34;searchable&#34;:true,&#34;defaultPageSize&#34;:10,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:10,&#34;compact&#34;:true,&#34;height&#34;:&#34;600px&#34;,&#34;language&#34;:{&#34;searchPlaceholder&#34;:&#34;Search...&#34;,&#34;noData&#34;:&#34;No matches&#34;},&#34;dataKey&#34;:&#34;2ffde0b748400e9d77bdb1e6de47c425&#34;,&#34;key&#34;:&#34;2ffde0b748400e9d77bdb1e6de47c425&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;code-edit&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Code Edit&lt;/h2&gt;
&lt;p&gt;Letâs pause to make the code more readable by refactoring and adding comments to better structure the code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reactable(
    # data
    raptor_table,
    # styling for entire table
    height = 600,
    minRows = 10,
    showSortIcon = TRUE,
    compact = TRUE,
    pagination = TRUE,
    showPageInfo = TRUE,
    searchable = TRUE,
    language = reactableLang(searchPlaceholder = &amp;quot;Search...&amp;quot;, 
                             noData = &amp;quot;No matches&amp;quot;),
    # styling individual columns
    # columns start
    columns = list(
        NAME = colDef(minWidth = 120, 
                      style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                   fontSize = 14)),
        SEASON = colDef(minWidth = 60, 
                        align = &amp;quot;left&amp;quot;,
                        style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                     fontSize = 14)), 
        MIN_PLAYED = colDef(name = &amp;#39;MIN. PLAYED&amp;#39;, 
                            minWidth = 60, 
                            align = &amp;#39;right&amp;#39;,
                            format = colFormat(separators = TRUE), 
                            style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                         fontSize = 14)), 
        OFF = colDef(name = &amp;quot;OFF.&amp;quot;, 
                     minWidth = 60, 
                     align = &amp;#39;right&amp;#39;,
                     format = colFormat(digits = 1)), 
        DEF = colDef(name = &amp;quot;DEF.&amp;quot;, 
                      minWidth = 60, 
                     align = &amp;#39;right&amp;#39;,
                     format = colFormat(digits = 1)), 
        TOTAL = colDef(name = &amp;quot;TOTAL&amp;quot;, 
                       minWidth = 60, 
                       align = &amp;#39;right&amp;#39;,
                       format = colFormat(prefix = &amp;quot;+&amp;quot;, 
                                          digits = 1),
                       style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                         fontSize = 14)), 
        WAR = colDef(minWidth = 60, 
                     align = &amp;quot;right&amp;quot;,
                     format = colFormat(digits = 1), 
                     style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                  fontSize = 14)), 
        PLAYOFF_WAR = colDef(name = &amp;quot;P/O WAR&amp;quot;, 
                             minWidth = 100, align = &amp;#39;center&amp;#39;, 
                             format = colFormat(digits = 1), 
                             style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                          whiteSpace = &amp;quot;pre&amp;quot;, 
                                          fontSize = 14))
    ), #columns end
    # grouping OFF,DEF,TOTAL under RAPTOR
    columnGroups = list(
        colGroup(name = &amp;quot;RAPTOR&amp;quot;, 
                 columns = c(&amp;quot;OFF&amp;quot;, &amp;quot;DEF&amp;quot;, &amp;quot;TOTAL&amp;quot;))
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-5&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:600px;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-5&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;NAME&#34;:[&#34;Michael Jordan&#34;,&#34;LeBron James&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;Chris Paul&#34;,&#34;Kevin Garnett&#34;,&#34;Dwyane Wade&#34;,&#34;Draymond Green&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;Tim Duncan&#34;,&#34;John Stockton&#34;,&#34;James Harden&#34;,&#34;Chris Paul&#34;,&#34;Michael Jordan&#34;,&#34;Chris Paul&#34;,&#34;Larry Bird&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Shaquille O&#39;Neal&#34;,&#34;LeBron James&#34;,&#34;Magic Johnson&#34;,&#34;Magic Johnson&#34;,&#34;Kevin Garnett&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;James Harden&#34;,&#34;Kobe Bryant&#34;,&#34;Magic Johnson&#34;,&#34;Stephen Curry&#34;,&#34;Dwyane Wade&#34;,&#34;LeBron James&#34;,&#34;Larry Bird&#34;,&#34;Charles Barkley&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;Magic Johnson&#34;,&#34;Scottie Pippen&#34;,&#34;LeBron James&#34;,&#34;Hakeem Olajuwon&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;Ray Allen&#34;,&#34;Charles Barkley&#34;,&#34;Kevin Durant&#34;,&#34;Jason Kidd&#34;,&#34;Magic Johnson&#34;,&#34;Clyde Drexler&#34;,&#34;Paul George&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;James Harden&#34;,&#34;Hakeem Olajuwon&#34;,&#34;Chris Paul&#34;,&#34;David Robinson&#34;,&#34;LeBron James&#34;,&#34;Scottie Pippen&#34;,&#34;John Stockton&#34;,&#34;Kobe Bryant&#34;,&#34;Kevin Durant&#34;,&#34;Chris Paul&#34;,&#34;Dirk Nowitzki&#34;,&#34;Dirk Nowitzki&#34;,&#34;John Stockton&#34;,&#34;Mookie Blaylock&#34;,&#34;Tim Duncan&#34;,&#34;Kareem Abdul-Jabbar&#34;,&#34;Tracy McGrady&#34;,&#34;Anfernee Hardaway&#34;,&#34;Magic Johnson&#34;,&#34;Julius Erving&#34;,&#34;Scottie Pippen&#34;,&#34;Manu Ginobili&#34;,&#34;Gary Payton&#34;,&#34;Kobe Bryant&#34;,&#34;Nikola Jokic&#34;,&#34;David Robinson&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;Dwyane Wade&#34;,&#34;Kawhi Leonard&#34;,&#34;Dwyane Wade&#34;,&#34;Kevin Garnett&#34;,&#34;Jason Kidd&#34;,&#34;Karl Malone&#34;,&#34;Tim Duncan&#34;,&#34;Tim Hardaway&#34;],&#34;SEASON&#34;:[1991,2009,1989,1990,2016,1988,1993,1992,1996,2015,2010,2013,2009,2004,2006,2016,1992,1986,2003,1991,2019,2008,1997,2015,1987,1988,1989,2000,2012,1987,1991,2003,1988,2011,2007,2018,2008,1989,2017,2009,2008,1985,1990,1994,1994,1990,1992,2006,1993,1995,1990,1997,1984,2016,2001,1993,2014,2003,1982,1992,2019,1987,1996,2015,1994,2014,1996,2017,1997,1995,2009,2013,2011,2006,2003,1996,1997,2002,1977,2003,1996,1983,1982,1991,2005,1996,2003,2019,1991,2014,1998,1995,2011,2017,2010,2008,2002,1996,2007,1997],&#34;MIN_PLAYED&#34;:[3723,3634,3973,3871,3314,3738,3850,4022,3823,3439,3426,3837,3203,4014,3851,3687,3625,3883,4202,3476,3291,3492,3910,3302,4020,3320,3310,4163,3309,3570,3756,3586,3728,3985,4083,3172,4055,3404,3239,3333,3579,3976,3504,3387,3566,3313,4063,3965,3760,3697,3109,3635,3989,3531,3897,3885,3937,3841,3553,3598,3045,3409,3567,3617,4266,2643,3372,3538,3848,3060,3900,3604,3130,4072,3839,3594,3497,3709,3483,3262,3488,3550,3569,3718,2965,4073,3932,3061,3261,3142,4053,3410,3651,2903,3002,3315,3859,3838,3462,3837],&#34;OFF&#34;:[9.1,9.3,8.3,8.6,10.4,7.5,7.6,7,7.6,8.6,9.2,8.5,8.2,4.4,6.4,3.9,7.7,6.4,3.9,7.8,9.6,9,6.9,8.6,6.5,7.6,7.5,4.4,7.9,8.2,8.3,4.9,6.6,6,4.6,8.8,6.1,8.6,9.3,7.1,6.8,5.4,7.5,4.6,7,9,4.5,6.4,2,2.8,8.2,7.1,4.7,6,7.1,5.5,7.1,4.4,6.1,6.4,5.3,5.5,5.1,7.7,0.8,7.7,3.6,6.9,4.9,8,5.9,6.5,6.7,5.9,4.6,7,4.6,3.6,4.5,8,6.6,6.5,5,3.9,5.9,3.5,5.4,6.1,2.8,7.8,4.3,3.6,5.6,7.3,7.2,2.9,4.1,3.9,2.2,4.8],&#34;DEF&#34;:[3.2,3.2,2.7,2.2,2.1,3.7,2.8,2.7,2.7,2.4,2.3,1.1,3.7,4.5,2.8,5.4,2.2,2.6,4.2,2.2,1.1,1,1.8,2.1,1.7,2.8,2.8,3.2,2.1,0.8,0,4.1,1.8,1.5,2.6,1.3,1.2,0.5,-0.1,2.3,1.6,1.9,1.2,4.5,1.4,0.3,2.5,0.8,5.8,5.2,1.7,0.9,2.3,2.2,0.1,1.7,-0.3,2.9,1.9,1.4,4.2,2.8,2.7,-0.2,5.3,3.7,5,0.9,2.1,1.5,0.8,1,2.4,0.4,2.2,0.4,3.1,3.5,3.1,0.3,1,0.9,2.4,3,3.3,2.4,0.9,2.7,5.5,0.5,1.6,4,1.2,2,1.7,5,2.1,2.3,5,1.4],&#34;TOTAL&#34;:[12.3,12.6,11,10.8,12.5,11.2,10.4,9.6,10.3,11,11.4,9.6,11.8,8.8,9.2,9.4,9.9,9,8.1,10.1,10.7,10,8.6,10.7,8.2,10.4,10.2,7.6,10,9,8.4,8.9,8.4,7.6,7.3,10.1,7.2,9.2,9.2,9.4,8.4,7.3,8.6,9.1,8.4,9.3,7,7.3,7.8,7.9,9.9,8,7.1,8.2,7.2,7.2,6.8,7.3,8.1,7.8,9.5,8.4,7.8,7.5,6.1,11.4,8.5,7.8,7,9.5,6.7,7.5,9,6.3,6.8,7.5,7.7,7.1,7.6,8.4,7.6,7.4,7.3,6.8,9.2,6,6.3,8.7,8.2,8.3,6,7.6,6.8,9.3,8.9,7.8,6.2,6.2,7.2,6.2],&#34;WAR&#34;:[28.8,28.5,28,27,26.7,26.6,26,25.5,25.5,25.1,24.8,24.2,23.8,23.6,23.5,23.5,23.4,23.3,23.3,22.8,22.8,22.8,22.7,22.6,22.4,22.3,21.9,21.8,21.6,21.3,21.3,21.2,21.1,21.1,21,20.9,20.8,20.7,20.7,20.6,20.5,20.4,20.4,20.4,20.3,20.3,20.2,20.2,20.2,20.1,20.1,20,20,19.9,19.8,19.7,19.7,19.7,19.6,19.6,19.4,19.4,19.4,19.3,19.3,19.3,19.2,19.2,19.2,19,19,18.9,18.8,18.8,18.8,18.8,18.6,18.5,18.5,18.5,18.5,18.4,18.4,18.3,18.3,18.3,18.2,18.2,18.2,18.1,18.1,18,17.9,17.9,17.9,17.9,17.7,17.6,17.6,17.6],&#34;PLAYOFF_WAR&#34;:[6,5.7,4.9,5.3,3,2.3,5.7,5.4,4.5,5.2,3,5.8,0.3,3.4,6.4,5.7,3.4,5.1,6.8,2.7,2.7,3.6,4.5,3.2,4.4,3.4,0.9,4.4,7,4.4,4.6,1.4,3.5,4.6,5,3.9,4.7,3.1,5,1.4,3,3.4,1.9,0.2,2.8,2.1,4.7,2.2,3.1,2.9,0.9,4.3,5.7,5.7,4.6,5.3,3.7,4,3.7,4.8,2,0.7,4.8,3.2,4.9,4,1.6,5.8,3.2,0.7,5.8,2.3,1.7,5.4,3,3.4,2.1,2.3,3,1.7,2.7,3.3,3.9,4,5.2,4.2,1.7,5.2,0.7,2,4.7,1.8,4.4,4,1.3,5,4.1,3.3,3.6,2.6]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;NAME&#34;,&#34;name&#34;:&#34;NAME&#34;,&#34;type&#34;:&#34;character&#34;,&#34;minWidth&#34;:120,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;SEASON&#34;,&#34;name&#34;:&#34;SEASON&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;minWidth&#34;:60,&#34;align&#34;:&#34;left&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;MIN_PLAYED&#34;,&#34;name&#34;:&#34;MIN. PLAYED&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;separators&#34;:true},&#34;aggregated&#34;:{&#34;separators&#34;:true}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;OFF&#34;,&#34;name&#34;:&#34;OFF.&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;},{&#34;accessor&#34;:&#34;DEF&#34;,&#34;name&#34;:&#34;DEF.&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;},{&#34;accessor&#34;:&#34;TOTAL&#34;,&#34;name&#34;:&#34;TOTAL&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;prefix&#34;:&#34;+&#34;,&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;prefix&#34;:&#34;+&#34;,&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;WAR&#34;,&#34;name&#34;:&#34;WAR&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;PLAYOFF_WAR&#34;,&#34;name&#34;:&#34;P/O WAR&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:100,&#34;align&#34;:&#34;center&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;whiteSpace&#34;:&#34;pre&#34;,&#34;fontSize&#34;:14}}],&#34;columnGroups&#34;:[{&#34;name&#34;:&#34;RAPTOR&#34;,&#34;columns&#34;:[&#34;OFF&#34;,&#34;DEF&#34;,&#34;TOTAL&#34;]}],&#34;searchable&#34;:true,&#34;defaultPageSize&#34;:10,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:10,&#34;compact&#34;:true,&#34;height&#34;:&#34;600px&#34;,&#34;language&#34;:{&#34;searchPlaceholder&#34;:&#34;Search...&#34;,&#34;noData&#34;:&#34;No matches&#34;},&#34;dataKey&#34;:&#34;d6a2b2574bfd22a6b7a12870582c537e&#34;,&#34;key&#34;:&#34;d6a2b2574bfd22a6b7a12870582c537e&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;add-color-for-off-def-total&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Add Color for OFF, DEF &amp;amp; TOTAL&lt;/h2&gt;
&lt;p&gt;Weâll visualize differences in offensive (OFF) and defensive (DEF) ratings for each NBA player for the regular season and playoffs by creating a &lt;code&gt;color_palette&lt;/code&gt;, then inserting it in the style for specific columns (i.e., OFF, DEF).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# note: For contrast, we use two colors shade (blue &amp;amp; red).
# this function
color_palette &amp;lt;- function(x) rgb(colorRamp(c(&amp;quot;#edfeff&amp;quot;, &amp;quot;#ff2c0f&amp;quot;))(x), maxColorValue = 255)

# Now we&amp;#39;ll add color to the OFF and DEF columns


reactable(
    # data
    raptor_table,
    # styling for entire table
    height = 600,
    minRows = 10,
    showSortIcon = TRUE,
    compact = TRUE,
    pagination = TRUE,
    showPageInfo = TRUE,
    searchable = TRUE,
    language = reactableLang(searchPlaceholder = &amp;quot;Search...&amp;quot;, 
                             noData = &amp;quot;No matches&amp;quot;),
    # styling individual columns
    # columns start
    columns = list(
        NAME = colDef(minWidth = 120, 
                      style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                   fontSize = 14)),
        SEASON = colDef(minWidth = 60, 
                        align = &amp;quot;left&amp;quot;,
                        style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                     fontSize = 14)), 
        MIN_PLAYED = colDef(name = &amp;#39;MIN. PLAYED&amp;#39;, 
                            minWidth = 60, 
                            align = &amp;#39;right&amp;#39;,
                            format = colFormat(separators = TRUE), 
                            style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                         fontSize = 14)), 
        OFF = colDef(name = &amp;quot;OFF.&amp;quot;, 
                     minWidth = 60, 
                     align = &amp;#39;right&amp;#39;,
                     format = colFormat(digits = 1),
                     style = function(value){
                         # normalization is based on a cell&amp;#39;s value in relation to the range of values in the column
                         normalized &amp;lt;- (value - min(raptor_table$OFF)) / (max(raptor_table$OFF) - min(raptor_table$OFF))
                         color &amp;lt;- color_palette(normalized)
                         # with color set based on the color_palette function, we can feed it to the background parameter
                         list(background = color, fontWeight = &amp;quot;bold&amp;quot;, 
                              fontFamily = &amp;quot;liberation mono&amp;quot;,
                              fontSize = 14)
                     }
        ), 
        DEF = colDef(name = &amp;quot;DEF.&amp;quot;, 
                      minWidth = 60, 
                     align = &amp;#39;right&amp;#39;,
                     format = colFormat(digits = 1),
                     style = function(value){
                         # normalization is based on a cell&amp;#39;s value in relation to the range of values in the column
                         normalized &amp;lt;- (value - min(raptor_table$DEF)) / (max(raptor_table$DEF) - min(raptor_table$DEF))
                         color &amp;lt;- color_palette(normalized)
                         # with color set based on the color_palette function, we can feed it to the background parameter
                         list(background = color, fontWeight = &amp;quot;bold&amp;quot;, 
                              fontFamily = &amp;quot;liberation mono&amp;quot;,
                              fontSize = 14)
                     }
        ), 
        TOTAL = colDef(name = &amp;quot;TOTAL&amp;quot;, 
                       minWidth = 60, 
                       align = &amp;#39;right&amp;#39;,
                       format = colFormat(prefix = &amp;quot;+&amp;quot;, 
                                          digits = 1),
                       style = list(backgroundColor = &amp;#39;#F5F5F5&amp;#39;,
                                    fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                    fontSize = 14)), 
        WAR = colDef(minWidth = 60, 
                     align = &amp;quot;right&amp;quot;,
                     format = colFormat(digits = 1), 
                     style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                  fontSize = 14)), 
        PLAYOFF_WAR = colDef(name = &amp;quot;P/O WAR&amp;quot;, 
                             minWidth = 100, align = &amp;#39;center&amp;#39;, 
                             format = colFormat(digits = 1), 
                             style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                          whiteSpace = &amp;quot;pre&amp;quot;, 
                                          fontSize = 14))
    ), #columns end
    # grouping OFF,DEF,TOTAL under RAPTOR
    columnGroups = list(
        colGroup(name = &amp;quot;RAPTOR&amp;quot;, 
                 columns = c(&amp;quot;OFF&amp;quot;, &amp;quot;DEF&amp;quot;, &amp;quot;TOTAL&amp;quot;))
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-6&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:600px;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-6&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;NAME&#34;:[&#34;Michael Jordan&#34;,&#34;LeBron James&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;Chris Paul&#34;,&#34;Kevin Garnett&#34;,&#34;Dwyane Wade&#34;,&#34;Draymond Green&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;Tim Duncan&#34;,&#34;John Stockton&#34;,&#34;James Harden&#34;,&#34;Chris Paul&#34;,&#34;Michael Jordan&#34;,&#34;Chris Paul&#34;,&#34;Larry Bird&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Shaquille O&#39;Neal&#34;,&#34;LeBron James&#34;,&#34;Magic Johnson&#34;,&#34;Magic Johnson&#34;,&#34;Kevin Garnett&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;James Harden&#34;,&#34;Kobe Bryant&#34;,&#34;Magic Johnson&#34;,&#34;Stephen Curry&#34;,&#34;Dwyane Wade&#34;,&#34;LeBron James&#34;,&#34;Larry Bird&#34;,&#34;Charles Barkley&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;Magic Johnson&#34;,&#34;Scottie Pippen&#34;,&#34;LeBron James&#34;,&#34;Hakeem Olajuwon&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;Ray Allen&#34;,&#34;Charles Barkley&#34;,&#34;Kevin Durant&#34;,&#34;Jason Kidd&#34;,&#34;Magic Johnson&#34;,&#34;Clyde Drexler&#34;,&#34;Paul George&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;James Harden&#34;,&#34;Hakeem Olajuwon&#34;,&#34;Chris Paul&#34;,&#34;David Robinson&#34;,&#34;LeBron James&#34;,&#34;Scottie Pippen&#34;,&#34;John Stockton&#34;,&#34;Kobe Bryant&#34;,&#34;Kevin Durant&#34;,&#34;Chris Paul&#34;,&#34;Dirk Nowitzki&#34;,&#34;Dirk Nowitzki&#34;,&#34;John Stockton&#34;,&#34;Mookie Blaylock&#34;,&#34;Tim Duncan&#34;,&#34;Kareem Abdul-Jabbar&#34;,&#34;Tracy McGrady&#34;,&#34;Anfernee Hardaway&#34;,&#34;Magic Johnson&#34;,&#34;Julius Erving&#34;,&#34;Scottie Pippen&#34;,&#34;Manu Ginobili&#34;,&#34;Gary Payton&#34;,&#34;Kobe Bryant&#34;,&#34;Nikola Jokic&#34;,&#34;David Robinson&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;Dwyane Wade&#34;,&#34;Kawhi Leonard&#34;,&#34;Dwyane Wade&#34;,&#34;Kevin Garnett&#34;,&#34;Jason Kidd&#34;,&#34;Karl Malone&#34;,&#34;Tim Duncan&#34;,&#34;Tim Hardaway&#34;],&#34;SEASON&#34;:[1991,2009,1989,1990,2016,1988,1993,1992,1996,2015,2010,2013,2009,2004,2006,2016,1992,1986,2003,1991,2019,2008,1997,2015,1987,1988,1989,2000,2012,1987,1991,2003,1988,2011,2007,2018,2008,1989,2017,2009,2008,1985,1990,1994,1994,1990,1992,2006,1993,1995,1990,1997,1984,2016,2001,1993,2014,2003,1982,1992,2019,1987,1996,2015,1994,2014,1996,2017,1997,1995,2009,2013,2011,2006,2003,1996,1997,2002,1977,2003,1996,1983,1982,1991,2005,1996,2003,2019,1991,2014,1998,1995,2011,2017,2010,2008,2002,1996,2007,1997],&#34;MIN_PLAYED&#34;:[3723,3634,3973,3871,3314,3738,3850,4022,3823,3439,3426,3837,3203,4014,3851,3687,3625,3883,4202,3476,3291,3492,3910,3302,4020,3320,3310,4163,3309,3570,3756,3586,3728,3985,4083,3172,4055,3404,3239,3333,3579,3976,3504,3387,3566,3313,4063,3965,3760,3697,3109,3635,3989,3531,3897,3885,3937,3841,3553,3598,3045,3409,3567,3617,4266,2643,3372,3538,3848,3060,3900,3604,3130,4072,3839,3594,3497,3709,3483,3262,3488,3550,3569,3718,2965,4073,3932,3061,3261,3142,4053,3410,3651,2903,3002,3315,3859,3838,3462,3837],&#34;OFF&#34;:[9.1,9.3,8.3,8.6,10.4,7.5,7.6,7,7.6,8.6,9.2,8.5,8.2,4.4,6.4,3.9,7.7,6.4,3.9,7.8,9.6,9,6.9,8.6,6.5,7.6,7.5,4.4,7.9,8.2,8.3,4.9,6.6,6,4.6,8.8,6.1,8.6,9.3,7.1,6.8,5.4,7.5,4.6,7,9,4.5,6.4,2,2.8,8.2,7.1,4.7,6,7.1,5.5,7.1,4.4,6.1,6.4,5.3,5.5,5.1,7.7,0.8,7.7,3.6,6.9,4.9,8,5.9,6.5,6.7,5.9,4.6,7,4.6,3.6,4.5,8,6.6,6.5,5,3.9,5.9,3.5,5.4,6.1,2.8,7.8,4.3,3.6,5.6,7.3,7.2,2.9,4.1,3.9,2.2,4.8],&#34;DEF&#34;:[3.2,3.2,2.7,2.2,2.1,3.7,2.8,2.7,2.7,2.4,2.3,1.1,3.7,4.5,2.8,5.4,2.2,2.6,4.2,2.2,1.1,1,1.8,2.1,1.7,2.8,2.8,3.2,2.1,0.8,0,4.1,1.8,1.5,2.6,1.3,1.2,0.5,-0.1,2.3,1.6,1.9,1.2,4.5,1.4,0.3,2.5,0.8,5.8,5.2,1.7,0.9,2.3,2.2,0.1,1.7,-0.3,2.9,1.9,1.4,4.2,2.8,2.7,-0.2,5.3,3.7,5,0.9,2.1,1.5,0.8,1,2.4,0.4,2.2,0.4,3.1,3.5,3.1,0.3,1,0.9,2.4,3,3.3,2.4,0.9,2.7,5.5,0.5,1.6,4,1.2,2,1.7,5,2.1,2.3,5,1.4],&#34;TOTAL&#34;:[12.3,12.6,11,10.8,12.5,11.2,10.4,9.6,10.3,11,11.4,9.6,11.8,8.8,9.2,9.4,9.9,9,8.1,10.1,10.7,10,8.6,10.7,8.2,10.4,10.2,7.6,10,9,8.4,8.9,8.4,7.6,7.3,10.1,7.2,9.2,9.2,9.4,8.4,7.3,8.6,9.1,8.4,9.3,7,7.3,7.8,7.9,9.9,8,7.1,8.2,7.2,7.2,6.8,7.3,8.1,7.8,9.5,8.4,7.8,7.5,6.1,11.4,8.5,7.8,7,9.5,6.7,7.5,9,6.3,6.8,7.5,7.7,7.1,7.6,8.4,7.6,7.4,7.3,6.8,9.2,6,6.3,8.7,8.2,8.3,6,7.6,6.8,9.3,8.9,7.8,6.2,6.2,7.2,6.2],&#34;WAR&#34;:[28.8,28.5,28,27,26.7,26.6,26,25.5,25.5,25.1,24.8,24.2,23.8,23.6,23.5,23.5,23.4,23.3,23.3,22.8,22.8,22.8,22.7,22.6,22.4,22.3,21.9,21.8,21.6,21.3,21.3,21.2,21.1,21.1,21,20.9,20.8,20.7,20.7,20.6,20.5,20.4,20.4,20.4,20.3,20.3,20.2,20.2,20.2,20.1,20.1,20,20,19.9,19.8,19.7,19.7,19.7,19.6,19.6,19.4,19.4,19.4,19.3,19.3,19.3,19.2,19.2,19.2,19,19,18.9,18.8,18.8,18.8,18.8,18.6,18.5,18.5,18.5,18.5,18.4,18.4,18.3,18.3,18.3,18.2,18.2,18.2,18.1,18.1,18,17.9,17.9,17.9,17.9,17.7,17.6,17.6,17.6],&#34;PLAYOFF_WAR&#34;:[6,5.7,4.9,5.3,3,2.3,5.7,5.4,4.5,5.2,3,5.8,0.3,3.4,6.4,5.7,3.4,5.1,6.8,2.7,2.7,3.6,4.5,3.2,4.4,3.4,0.9,4.4,7,4.4,4.6,1.4,3.5,4.6,5,3.9,4.7,3.1,5,1.4,3,3.4,1.9,0.2,2.8,2.1,4.7,2.2,3.1,2.9,0.9,4.3,5.7,5.7,4.6,5.3,3.7,4,3.7,4.8,2,0.7,4.8,3.2,4.9,4,1.6,5.8,3.2,0.7,5.8,2.3,1.7,5.4,3,3.4,2.1,2.3,3,1.7,2.7,3.3,3.9,4,5.2,4.2,1.7,5.2,0.7,2,4.7,1.8,4.4,4,1.3,5,4.1,3.3,3.6,2.6]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;NAME&#34;,&#34;name&#34;:&#34;NAME&#34;,&#34;type&#34;:&#34;character&#34;,&#34;minWidth&#34;:120,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;SEASON&#34;,&#34;name&#34;:&#34;SEASON&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;minWidth&#34;:60,&#34;align&#34;:&#34;left&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;MIN_PLAYED&#34;,&#34;name&#34;:&#34;MIN. PLAYED&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;separators&#34;:true},&#34;aggregated&#34;:{&#34;separators&#34;:true}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;OFF&#34;,&#34;name&#34;:&#34;OFF.&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:[{&#34;background&#34;:&#34;#FC482F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC442A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5943&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FF2C0F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96B57&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96954&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87663&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96954&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC462D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB553E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA5C46&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AFA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96752&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA644F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD3D23&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC4A32&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87866&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78170&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96954&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96B57&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AFA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA624D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA5C46&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5943&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F77F6E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68C7C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC4F37&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68A7A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC442A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87A69&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F5998B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96B57&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87663&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC4A32&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3ADA2&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE3E1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D2CD&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA5C46&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A89D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68C7C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59789&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AFA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68A7A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59B8E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59789&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59F93&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96752&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDFEFF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96752&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B9&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87866&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA604B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68E7F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78170&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87C6B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68E7F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87663&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B9&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3ADA2&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA604B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F77F6E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78170&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A295&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68E7F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C2BB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F5998B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68A7A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D2CD&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA644F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B1A7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B9&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69587&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96F5C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F9715E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D0CA&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B5AC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFDFDC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A69B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}]},{&#34;accessor&#34;:&#34;DEF&#34;,&#34;name&#34;:&#34;DEF.&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:[{&#34;background&#34;:&#34;#F78575&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78575&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CDC7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5842&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD391E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59A8C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA634D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CDC7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D1CB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B5AC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78575&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D8D3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDF3F3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96651&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B5AC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59A8C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1C6C0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CAC3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE2DF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDF7F7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BCB4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B2A8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CAC3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5842&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C3BC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EEE9E7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59D90&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D8D3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FF2C0F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD4026&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EEF0EF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDFEFF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68F81&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B2A8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C3BC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA634D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDFAFB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD3D22&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC472E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D8D3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D1CB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE5E3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE5E3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78879&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87B69&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78879&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EEE9E7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D1CB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68C7D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78271&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FE361A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE2DF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BCB4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96955&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CAC3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AEA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC472E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC472E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C3BC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}]},{&#34;accessor&#34;:&#34;TOTAL&#34;,&#34;name&#34;:&#34;TOTAL&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;prefix&#34;:&#34;+&#34;,&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;prefix&#34;:&#34;+&#34;,&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;backgroundColor&#34;:&#34;#F5F5F5&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;WAR&#34;,&#34;name&#34;:&#34;WAR&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;PLAYOFF_WAR&#34;,&#34;name&#34;:&#34;P/O WAR&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:100,&#34;align&#34;:&#34;center&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;whiteSpace&#34;:&#34;pre&#34;,&#34;fontSize&#34;:14}}],&#34;columnGroups&#34;:[{&#34;name&#34;:&#34;RAPTOR&#34;,&#34;columns&#34;:[&#34;OFF&#34;,&#34;DEF&#34;,&#34;TOTAL&#34;]}],&#34;searchable&#34;:true,&#34;defaultPageSize&#34;:10,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:10,&#34;compact&#34;:true,&#34;height&#34;:&#34;600px&#34;,&#34;language&#34;:{&#34;searchPlaceholder&#34;:&#34;Search...&#34;,&#34;noData&#34;:&#34;No matches&#34;},&#34;dataKey&#34;:&#34;245656a358215004a59fa52aaeb06b70&#34;,&#34;key&#34;:&#34;245656a358215004a59fa52aaeb06b70&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;add-bars-to-po-war&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Add Bars to P/O WAR&lt;/h2&gt;
&lt;p&gt;Now weâll style the &lt;code&gt;P/O WAR&lt;/code&gt; column to contrast with &lt;code&gt;WAR&lt;/code&gt;, which includes regular season and playoffs. Basketball is a completely different game between the regular season and playoffs, so itâs worth knowing wins above replacement from the playoffs, if &lt;em&gt;only&lt;/em&gt; to see which NBA star takes their game up another level during the playoffs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# define a function to define the attributes of bar charts
bar_chart &amp;lt;- function(label, width = &amp;quot;100%&amp;quot;, height = &amp;quot;14px&amp;quot;, fill = &amp;quot;#00bfc4&amp;quot;, background = NULL) {
    bar &amp;lt;- div(style = list(background = fill, width = width, height = height))
    chart &amp;lt;- div(style = list(flexGrow = 1, marginLeft = &amp;quot;6px&amp;quot;, background = background), bar)
    div(style = list(display = &amp;quot;flex&amp;quot;, alignItems = &amp;quot;center&amp;quot;), label, chart)
}



reactable(
    # data
    raptor_table,
    # styling for entire table
    height = 600,
    minRows = 10,
    showSortIcon = TRUE,
    compact = TRUE,
    pagination = TRUE,
    showPageInfo = TRUE,
    searchable = TRUE,
    language = reactableLang(searchPlaceholder = &amp;quot;Search...&amp;quot;, 
                             noData = &amp;quot;No matches&amp;quot;),
    # styling individual columns
    # columns start
    columns = list(
        NAME = colDef(minWidth = 120, 
                      style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                   fontSize = 14)),
        SEASON = colDef(minWidth = 60, 
                        align = &amp;quot;left&amp;quot;,
                        style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                     fontSize = 14)), 
        MIN_PLAYED = colDef(name = &amp;#39;MIN. PLAYED&amp;#39;, 
                            minWidth = 60, 
                            align = &amp;#39;right&amp;#39;,
                            format = colFormat(separators = TRUE), 
                            style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                         fontSize = 14)), 
        OFF = colDef(name = &amp;quot;OFF.&amp;quot;, 
                     minWidth = 60, 
                     align = &amp;#39;right&amp;#39;,
                     format = colFormat(digits = 1),
                     style = function(value){
                         # normalization is based on a cell&amp;#39;s value in relation to the range of values in the column
                         normalized &amp;lt;- (value - min(raptor_table$OFF)) / (max(raptor_table$OFF) - min(raptor_table$OFF))
                         color &amp;lt;- color_palette(normalized)
                         # with color set based on the color_palette function, we can feed it to the background parameter
                         list(background = color, fontWeight = &amp;quot;bold&amp;quot;, 
                              fontFamily = &amp;quot;liberation mono&amp;quot;,
                              fontSize = 14)
                     }
        ), 
        DEF = colDef(name = &amp;quot;DEF.&amp;quot;, 
                      minWidth = 60, 
                     align = &amp;#39;right&amp;#39;,
                     format = colFormat(digits = 1),
                     style = function(value){
                         # normalization is based on a cell&amp;#39;s value in relation to the range of values in the column
                         normalized &amp;lt;- (value - min(raptor_table$DEF)) / (max(raptor_table$DEF) - min(raptor_table$DEF))
                         color &amp;lt;- color_palette(normalized)
                         # with color set based on the color_palette function, we can feed it to the background parameter
                         list(background = color, fontWeight = &amp;quot;bold&amp;quot;, 
                              fontFamily = &amp;quot;liberation mono&amp;quot;,
                              fontSize = 14)
                     }
        ), 
        TOTAL = colDef(name = &amp;quot;TOTAL&amp;quot;, 
                       minWidth = 60, 
                       align = &amp;#39;right&amp;#39;,
                       format = colFormat(prefix = &amp;quot;+&amp;quot;, 
                                          digits = 1), 
                       style = list(backgroundColor = &amp;#39;#F5F5F5&amp;#39;,
                                    fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                    fontSize = 14)), 
        WAR = colDef(minWidth = 60, 
                     align = &amp;quot;right&amp;quot;,
                     format = colFormat(digits = 1), 
                     style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                  fontSize = 14)), 
        PLAYOFF_WAR = colDef(name = &amp;quot;P/O WAR&amp;quot;, 
                             minWidth = 100, 
                             align = &amp;#39;center&amp;#39;, 
                             format = colFormat(digits = 1), 
                             style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                          whiteSpace = &amp;quot;pre&amp;quot;, 
                                          fontSize = 14),
                             # render bar chart
                             cell = function(value){
                                width &amp;lt;- paste0(value * 100 / max(raptor_table$PLAYOFF_WAR), &amp;quot;%&amp;quot;)
                                value &amp;lt;- format(value, width = 9, justify = &amp;quot;right&amp;quot;)
                                bar_chart(value, width = width, fill = &amp;quot;#3fc1c9&amp;quot;)
                             }
        )
    ), #columns end
    # grouping OFF,DEF,TOTAL under RAPTOR
    columnGroups = list(
        colGroup(name = &amp;quot;RAPTOR&amp;quot;, 
                 columns = c(&amp;quot;OFF&amp;quot;, &amp;quot;DEF&amp;quot;, &amp;quot;TOTAL&amp;quot;))
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-7&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:600px;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-7&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;NAME&#34;:[&#34;Michael Jordan&#34;,&#34;LeBron James&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;Chris Paul&#34;,&#34;Kevin Garnett&#34;,&#34;Dwyane Wade&#34;,&#34;Draymond Green&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;Tim Duncan&#34;,&#34;John Stockton&#34;,&#34;James Harden&#34;,&#34;Chris Paul&#34;,&#34;Michael Jordan&#34;,&#34;Chris Paul&#34;,&#34;Larry Bird&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Shaquille O&#39;Neal&#34;,&#34;LeBron James&#34;,&#34;Magic Johnson&#34;,&#34;Magic Johnson&#34;,&#34;Kevin Garnett&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;James Harden&#34;,&#34;Kobe Bryant&#34;,&#34;Magic Johnson&#34;,&#34;Stephen Curry&#34;,&#34;Dwyane Wade&#34;,&#34;LeBron James&#34;,&#34;Larry Bird&#34;,&#34;Charles Barkley&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;Magic Johnson&#34;,&#34;Scottie Pippen&#34;,&#34;LeBron James&#34;,&#34;Hakeem Olajuwon&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;Ray Allen&#34;,&#34;Charles Barkley&#34;,&#34;Kevin Durant&#34;,&#34;Jason Kidd&#34;,&#34;Magic Johnson&#34;,&#34;Clyde Drexler&#34;,&#34;Paul George&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;James Harden&#34;,&#34;Hakeem Olajuwon&#34;,&#34;Chris Paul&#34;,&#34;David Robinson&#34;,&#34;LeBron James&#34;,&#34;Scottie Pippen&#34;,&#34;John Stockton&#34;,&#34;Kobe Bryant&#34;,&#34;Kevin Durant&#34;,&#34;Chris Paul&#34;,&#34;Dirk Nowitzki&#34;,&#34;Dirk Nowitzki&#34;,&#34;John Stockton&#34;,&#34;Mookie Blaylock&#34;,&#34;Tim Duncan&#34;,&#34;Kareem Abdul-Jabbar&#34;,&#34;Tracy McGrady&#34;,&#34;Anfernee Hardaway&#34;,&#34;Magic Johnson&#34;,&#34;Julius Erving&#34;,&#34;Scottie Pippen&#34;,&#34;Manu Ginobili&#34;,&#34;Gary Payton&#34;,&#34;Kobe Bryant&#34;,&#34;Nikola Jokic&#34;,&#34;David Robinson&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;Dwyane Wade&#34;,&#34;Kawhi Leonard&#34;,&#34;Dwyane Wade&#34;,&#34;Kevin Garnett&#34;,&#34;Jason Kidd&#34;,&#34;Karl Malone&#34;,&#34;Tim Duncan&#34;,&#34;Tim Hardaway&#34;],&#34;SEASON&#34;:[1991,2009,1989,1990,2016,1988,1993,1992,1996,2015,2010,2013,2009,2004,2006,2016,1992,1986,2003,1991,2019,2008,1997,2015,1987,1988,1989,2000,2012,1987,1991,2003,1988,2011,2007,2018,2008,1989,2017,2009,2008,1985,1990,1994,1994,1990,1992,2006,1993,1995,1990,1997,1984,2016,2001,1993,2014,2003,1982,1992,2019,1987,1996,2015,1994,2014,1996,2017,1997,1995,2009,2013,2011,2006,2003,1996,1997,2002,1977,2003,1996,1983,1982,1991,2005,1996,2003,2019,1991,2014,1998,1995,2011,2017,2010,2008,2002,1996,2007,1997],&#34;MIN_PLAYED&#34;:[3723,3634,3973,3871,3314,3738,3850,4022,3823,3439,3426,3837,3203,4014,3851,3687,3625,3883,4202,3476,3291,3492,3910,3302,4020,3320,3310,4163,3309,3570,3756,3586,3728,3985,4083,3172,4055,3404,3239,3333,3579,3976,3504,3387,3566,3313,4063,3965,3760,3697,3109,3635,3989,3531,3897,3885,3937,3841,3553,3598,3045,3409,3567,3617,4266,2643,3372,3538,3848,3060,3900,3604,3130,4072,3839,3594,3497,3709,3483,3262,3488,3550,3569,3718,2965,4073,3932,3061,3261,3142,4053,3410,3651,2903,3002,3315,3859,3838,3462,3837],&#34;OFF&#34;:[9.1,9.3,8.3,8.6,10.4,7.5,7.6,7,7.6,8.6,9.2,8.5,8.2,4.4,6.4,3.9,7.7,6.4,3.9,7.8,9.6,9,6.9,8.6,6.5,7.6,7.5,4.4,7.9,8.2,8.3,4.9,6.6,6,4.6,8.8,6.1,8.6,9.3,7.1,6.8,5.4,7.5,4.6,7,9,4.5,6.4,2,2.8,8.2,7.1,4.7,6,7.1,5.5,7.1,4.4,6.1,6.4,5.3,5.5,5.1,7.7,0.8,7.7,3.6,6.9,4.9,8,5.9,6.5,6.7,5.9,4.6,7,4.6,3.6,4.5,8,6.6,6.5,5,3.9,5.9,3.5,5.4,6.1,2.8,7.8,4.3,3.6,5.6,7.3,7.2,2.9,4.1,3.9,2.2,4.8],&#34;DEF&#34;:[3.2,3.2,2.7,2.2,2.1,3.7,2.8,2.7,2.7,2.4,2.3,1.1,3.7,4.5,2.8,5.4,2.2,2.6,4.2,2.2,1.1,1,1.8,2.1,1.7,2.8,2.8,3.2,2.1,0.8,0,4.1,1.8,1.5,2.6,1.3,1.2,0.5,-0.1,2.3,1.6,1.9,1.2,4.5,1.4,0.3,2.5,0.8,5.8,5.2,1.7,0.9,2.3,2.2,0.1,1.7,-0.3,2.9,1.9,1.4,4.2,2.8,2.7,-0.2,5.3,3.7,5,0.9,2.1,1.5,0.8,1,2.4,0.4,2.2,0.4,3.1,3.5,3.1,0.3,1,0.9,2.4,3,3.3,2.4,0.9,2.7,5.5,0.5,1.6,4,1.2,2,1.7,5,2.1,2.3,5,1.4],&#34;TOTAL&#34;:[12.3,12.6,11,10.8,12.5,11.2,10.4,9.6,10.3,11,11.4,9.6,11.8,8.8,9.2,9.4,9.9,9,8.1,10.1,10.7,10,8.6,10.7,8.2,10.4,10.2,7.6,10,9,8.4,8.9,8.4,7.6,7.3,10.1,7.2,9.2,9.2,9.4,8.4,7.3,8.6,9.1,8.4,9.3,7,7.3,7.8,7.9,9.9,8,7.1,8.2,7.2,7.2,6.8,7.3,8.1,7.8,9.5,8.4,7.8,7.5,6.1,11.4,8.5,7.8,7,9.5,6.7,7.5,9,6.3,6.8,7.5,7.7,7.1,7.6,8.4,7.6,7.4,7.3,6.8,9.2,6,6.3,8.7,8.2,8.3,6,7.6,6.8,9.3,8.9,7.8,6.2,6.2,7.2,6.2],&#34;WAR&#34;:[28.8,28.5,28,27,26.7,26.6,26,25.5,25.5,25.1,24.8,24.2,23.8,23.6,23.5,23.5,23.4,23.3,23.3,22.8,22.8,22.8,22.7,22.6,22.4,22.3,21.9,21.8,21.6,21.3,21.3,21.2,21.1,21.1,21,20.9,20.8,20.7,20.7,20.6,20.5,20.4,20.4,20.4,20.3,20.3,20.2,20.2,20.2,20.1,20.1,20,20,19.9,19.8,19.7,19.7,19.7,19.6,19.6,19.4,19.4,19.4,19.3,19.3,19.3,19.2,19.2,19.2,19,19,18.9,18.8,18.8,18.8,18.8,18.6,18.5,18.5,18.5,18.5,18.4,18.4,18.3,18.3,18.3,18.2,18.2,18.2,18.1,18.1,18,17.9,17.9,17.9,17.9,17.7,17.6,17.6,17.6],&#34;PLAYOFF_WAR&#34;:[6,5.7,4.9,5.3,3,2.3,5.7,5.4,4.5,5.2,3,5.8,0.3,3.4,6.4,5.7,3.4,5.1,6.8,2.7,2.7,3.6,4.5,3.2,4.4,3.4,0.9,4.4,7,4.4,4.6,1.4,3.5,4.6,5,3.9,4.7,3.1,5,1.4,3,3.4,1.9,0.2,2.8,2.1,4.7,2.2,3.1,2.9,0.9,4.3,5.7,5.7,4.6,5.3,3.7,4,3.7,4.8,2,0.7,4.8,3.2,4.9,4,1.6,5.8,3.2,0.7,5.8,2.3,1.7,5.4,3,3.4,2.1,2.3,3,1.7,2.7,3.3,3.9,4,5.2,4.2,1.7,5.2,0.7,2,4.7,1.8,4.4,4,1.3,5,4.1,3.3,3.6,2.6]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;NAME&#34;,&#34;name&#34;:&#34;NAME&#34;,&#34;type&#34;:&#34;character&#34;,&#34;minWidth&#34;:120,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;SEASON&#34;,&#34;name&#34;:&#34;SEASON&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;minWidth&#34;:60,&#34;align&#34;:&#34;left&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;MIN_PLAYED&#34;,&#34;name&#34;:&#34;MIN. PLAYED&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;separators&#34;:true},&#34;aggregated&#34;:{&#34;separators&#34;:true}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;OFF&#34;,&#34;name&#34;:&#34;OFF.&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:[{&#34;background&#34;:&#34;#FC482F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC442A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5943&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FF2C0F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96B57&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96954&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87663&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96954&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC462D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB553E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA5C46&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AFA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96752&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA644F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD3D23&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC4A32&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87866&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78170&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96954&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96B57&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AFA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA624D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA5C46&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5943&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F77F6E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68C7C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC4F37&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68A7A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC442A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87A69&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F5998B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96B57&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87663&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC4A32&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3ADA2&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE3E1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D2CD&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA5C46&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A89D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68C7C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59789&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AFA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68A7A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59B8E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59789&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59F93&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96752&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDFEFF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96752&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B9&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87866&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA604B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68E7F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78170&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87C6B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68E7F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87663&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B9&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3ADA2&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA604B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F77F6E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78170&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A295&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68E7F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C2BB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F5998B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68A7A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D2CD&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA644F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B1A7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B9&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69587&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96F5C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F9715E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D0CA&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B5AC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFDFDC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A69B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}]},{&#34;accessor&#34;:&#34;DEF&#34;,&#34;name&#34;:&#34;DEF.&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:[{&#34;background&#34;:&#34;#F78575&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78575&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CDC7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5842&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD391E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59A8C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA634D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CDC7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D1CB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B5AC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78575&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D8D3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDF3F3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96651&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B5AC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59A8C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1C6C0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CAC3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE2DF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDF7F7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BCB4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B2A8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CAC3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5842&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C3BC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EEE9E7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59D90&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D8D3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FF2C0F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD4026&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EEF0EF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDFEFF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68F81&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B2A8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C3BC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA634D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDFAFB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD3D22&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC472E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D8D3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D1CB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE5E3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE5E3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78879&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87B69&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78879&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EEE9E7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D1CB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68C7D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78271&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FE361A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE2DF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BCB4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96955&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CAC3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AEA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC472E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC472E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C3BC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}]},{&#34;accessor&#34;:&#34;TOTAL&#34;,&#34;name&#34;:&#34;TOTAL&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;prefix&#34;:&#34;+&#34;,&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;prefix&#34;:&#34;+&#34;,&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;backgroundColor&#34;:&#34;#F5F5F5&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;WAR&#34;,&#34;name&#34;:&#34;WAR&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;PLAYOFF_WAR&#34;,&#34;name&#34;:&#34;P/O WAR&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;cell&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;85.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;81.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;70%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;75.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;42.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;32.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;81.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;77.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;64.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;74.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;42.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;82.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;4.28571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;48.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      6.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;91.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;81.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;48.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;72.8571428571428%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      6.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;97.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;38.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;38.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;51.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;64.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;45.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;62.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;48.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;12.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;62.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;100%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;62.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;65.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;20%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;50%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;65.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;71.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;55.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;67.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;44.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;71.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;20%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;42.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;48.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;27.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;2.85714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;40%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;30%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;67.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;31.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;44.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;41.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;12.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;61.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;81.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;81.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;65.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;75.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;52.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;57.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;52.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;68.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;28.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;10%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;68.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;45.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;70%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;57.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;22.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;82.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;45.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;10%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;82.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;32.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;24.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;77.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;42.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;48.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;30%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;32.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;42.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;24.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;38.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;47.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;55.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;57.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;74.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;60%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;24.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;74.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;10%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;28.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;67.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;25.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;62.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;57.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;18.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;71.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;58.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;47.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;51.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;37.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]}],&#34;minWidth&#34;:100,&#34;align&#34;:&#34;center&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;whiteSpace&#34;:&#34;pre&#34;,&#34;fontSize&#34;:14}}],&#34;columnGroups&#34;:[{&#34;name&#34;:&#34;RAPTOR&#34;,&#34;columns&#34;:[&#34;OFF&#34;,&#34;DEF&#34;,&#34;TOTAL&#34;]}],&#34;searchable&#34;:true,&#34;defaultPageSize&#34;:10,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:10,&#34;compact&#34;:true,&#34;height&#34;:&#34;600px&#34;,&#34;language&#34;:{&#34;searchPlaceholder&#34;:&#34;Search...&#34;,&#34;noData&#34;:&#34;No matches&#34;},&#34;dataKey&#34;:&#34;e45ff651bf84abff9f2d529400297898&#34;,&#34;key&#34;:&#34;e45ff651bf84abff9f2d529400297898&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;column-name-styling&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Column Name Styling&lt;/h2&gt;
&lt;p&gt;Weâre putting the finishing touches on this table. Weâll change all column header font to âliberation monoâ and weâll set the
&lt;code&gt;defaultPageSize&lt;/code&gt; to 15.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reactable(
    # data
    raptor_table,
    # header styling
    defaultColDef = colDef(headerStyle = list(fontFamily = &amp;quot;liberation mono&amp;quot;, fontSize = 16)),
    # styling for entire table
    height = 600,
    minRows = 10,
    showSortIcon = TRUE,
    compact = TRUE,
    pagination = TRUE,
    showPageInfo = TRUE,
    searchable = TRUE,
    language = reactableLang(searchPlaceholder = &amp;quot;Search...&amp;quot;, 
                             noData = &amp;quot;No matches&amp;quot;),
    # styling individual columns
    # columns start
    columns = list(
        NAME = colDef(minWidth = 120, 
                      style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                   fontSize = 14)),
        SEASON = colDef(minWidth = 60, 
                        align = &amp;quot;left&amp;quot;,
                        style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                     fontSize = 14)), 
        MIN_PLAYED = colDef(name = &amp;#39;MIN. PLAYED&amp;#39;, 
                            minWidth = 60, 
                            align = &amp;#39;right&amp;#39;,
                            format = colFormat(separators = TRUE), 
                            style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                         fontSize = 14)), 
        OFF = colDef(name = &amp;quot;OFF.&amp;quot;, 
                     minWidth = 60, 
                     align = &amp;#39;right&amp;#39;,
                     format = colFormat(digits = 1),
                     style = function(value){
                         # normalization is based on a cell&amp;#39;s value in relation to the range of values in the column
                         normalized &amp;lt;- (value - min(raptor_table$OFF)) / (max(raptor_table$OFF) - min(raptor_table$OFF))
                         color &amp;lt;- color_palette(normalized)
                         # with color set based on the color_palette function, we can feed it to the background parameter
                         list(background = color, fontWeight = &amp;quot;bold&amp;quot;, 
                              fontFamily = &amp;quot;liberation mono&amp;quot;,
                              fontSize = 14)
                     }
        ), 
        DEF = colDef(name = &amp;quot;DEF.&amp;quot;, 
                      minWidth = 60, 
                     align = &amp;#39;right&amp;#39;,
                     format = colFormat(digits = 1),
                     style = function(value){
                         # normalization is based on a cell&amp;#39;s value in relation to the range of values in the column
                         normalized &amp;lt;- (value - min(raptor_table$DEF)) / (max(raptor_table$DEF) - min(raptor_table$DEF))
                         color &amp;lt;- color_palette(normalized)
                         # with color set based on the color_palette function, we can feed it to the background parameter
                         list(background = color, fontWeight = &amp;quot;bold&amp;quot;, 
                              fontFamily = &amp;quot;liberation mono&amp;quot;,
                              fontSize = 14)
                     }
        ), 
        TOTAL = colDef(name = &amp;quot;TOTAL&amp;quot;, 
                       minWidth = 60, 
                       align = &amp;#39;right&amp;#39;,
                       format = colFormat(prefix = &amp;quot;+&amp;quot;, 
                                          digits = 1),
                       style = list(backgroundColor = &amp;#39;#F5F5F5&amp;#39;,
                                    fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                    fontSize = 14)), 
        WAR = colDef(minWidth = 60, 
                     align = &amp;quot;right&amp;quot;,
                     format = colFormat(digits = 1), 
                     style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                  fontSize = 14)), 
        PLAYOFF_WAR = colDef(name = &amp;quot;P/O WAR&amp;quot;, 
                             minWidth = 100, 
                             align = &amp;#39;center&amp;#39;, 
                             format = colFormat(digits = 1), 
                             style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                          whiteSpace = &amp;quot;pre&amp;quot;, 
                                          fontSize = 14),
                             # render bar chart
                             cell = function(value){
                                width &amp;lt;- paste0(value * 100 / max(raptor_table$PLAYOFF_WAR), &amp;quot;%&amp;quot;)
                                value &amp;lt;- format(value, width = 9, justify = &amp;quot;right&amp;quot;)
                                bar_chart(value, width = width, fill = &amp;quot;#3fc1c9&amp;quot;)
                             }
        )
    ), #columns end
    # grouping OFF,DEF,TOTAL under RAPTOR
    columnGroups = list(
        colGroup(name = &amp;quot;RAPTOR&amp;quot;, 
                 columns = c(&amp;quot;OFF&amp;quot;, &amp;quot;DEF&amp;quot;, &amp;quot;TOTAL&amp;quot;),
                 headerStyle = list(fontFamily = &amp;quot;liberation mono&amp;quot;, fontSize = 16))
    ),
    defaultPageSize = 15
)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-8&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:600px;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-8&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;NAME&#34;:[&#34;Michael Jordan&#34;,&#34;LeBron James&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;Chris Paul&#34;,&#34;Kevin Garnett&#34;,&#34;Dwyane Wade&#34;,&#34;Draymond Green&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;Tim Duncan&#34;,&#34;John Stockton&#34;,&#34;James Harden&#34;,&#34;Chris Paul&#34;,&#34;Michael Jordan&#34;,&#34;Chris Paul&#34;,&#34;Larry Bird&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Shaquille O&#39;Neal&#34;,&#34;LeBron James&#34;,&#34;Magic Johnson&#34;,&#34;Magic Johnson&#34;,&#34;Kevin Garnett&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;James Harden&#34;,&#34;Kobe Bryant&#34;,&#34;Magic Johnson&#34;,&#34;Stephen Curry&#34;,&#34;Dwyane Wade&#34;,&#34;LeBron James&#34;,&#34;Larry Bird&#34;,&#34;Charles Barkley&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;Magic Johnson&#34;,&#34;Scottie Pippen&#34;,&#34;LeBron James&#34;,&#34;Hakeem Olajuwon&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;Ray Allen&#34;,&#34;Charles Barkley&#34;,&#34;Kevin Durant&#34;,&#34;Jason Kidd&#34;,&#34;Magic Johnson&#34;,&#34;Clyde Drexler&#34;,&#34;Paul George&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;James Harden&#34;,&#34;Hakeem Olajuwon&#34;,&#34;Chris Paul&#34;,&#34;David Robinson&#34;,&#34;LeBron James&#34;,&#34;Scottie Pippen&#34;,&#34;John Stockton&#34;,&#34;Kobe Bryant&#34;,&#34;Kevin Durant&#34;,&#34;Chris Paul&#34;,&#34;Dirk Nowitzki&#34;,&#34;Dirk Nowitzki&#34;,&#34;John Stockton&#34;,&#34;Mookie Blaylock&#34;,&#34;Tim Duncan&#34;,&#34;Kareem Abdul-Jabbar&#34;,&#34;Tracy McGrady&#34;,&#34;Anfernee Hardaway&#34;,&#34;Magic Johnson&#34;,&#34;Julius Erving&#34;,&#34;Scottie Pippen&#34;,&#34;Manu Ginobili&#34;,&#34;Gary Payton&#34;,&#34;Kobe Bryant&#34;,&#34;Nikola Jokic&#34;,&#34;David Robinson&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;Dwyane Wade&#34;,&#34;Kawhi Leonard&#34;,&#34;Dwyane Wade&#34;,&#34;Kevin Garnett&#34;,&#34;Jason Kidd&#34;,&#34;Karl Malone&#34;,&#34;Tim Duncan&#34;,&#34;Tim Hardaway&#34;],&#34;SEASON&#34;:[1991,2009,1989,1990,2016,1988,1993,1992,1996,2015,2010,2013,2009,2004,2006,2016,1992,1986,2003,1991,2019,2008,1997,2015,1987,1988,1989,2000,2012,1987,1991,2003,1988,2011,2007,2018,2008,1989,2017,2009,2008,1985,1990,1994,1994,1990,1992,2006,1993,1995,1990,1997,1984,2016,2001,1993,2014,2003,1982,1992,2019,1987,1996,2015,1994,2014,1996,2017,1997,1995,2009,2013,2011,2006,2003,1996,1997,2002,1977,2003,1996,1983,1982,1991,2005,1996,2003,2019,1991,2014,1998,1995,2011,2017,2010,2008,2002,1996,2007,1997],&#34;MIN_PLAYED&#34;:[3723,3634,3973,3871,3314,3738,3850,4022,3823,3439,3426,3837,3203,4014,3851,3687,3625,3883,4202,3476,3291,3492,3910,3302,4020,3320,3310,4163,3309,3570,3756,3586,3728,3985,4083,3172,4055,3404,3239,3333,3579,3976,3504,3387,3566,3313,4063,3965,3760,3697,3109,3635,3989,3531,3897,3885,3937,3841,3553,3598,3045,3409,3567,3617,4266,2643,3372,3538,3848,3060,3900,3604,3130,4072,3839,3594,3497,3709,3483,3262,3488,3550,3569,3718,2965,4073,3932,3061,3261,3142,4053,3410,3651,2903,3002,3315,3859,3838,3462,3837],&#34;OFF&#34;:[9.1,9.3,8.3,8.6,10.4,7.5,7.6,7,7.6,8.6,9.2,8.5,8.2,4.4,6.4,3.9,7.7,6.4,3.9,7.8,9.6,9,6.9,8.6,6.5,7.6,7.5,4.4,7.9,8.2,8.3,4.9,6.6,6,4.6,8.8,6.1,8.6,9.3,7.1,6.8,5.4,7.5,4.6,7,9,4.5,6.4,2,2.8,8.2,7.1,4.7,6,7.1,5.5,7.1,4.4,6.1,6.4,5.3,5.5,5.1,7.7,0.8,7.7,3.6,6.9,4.9,8,5.9,6.5,6.7,5.9,4.6,7,4.6,3.6,4.5,8,6.6,6.5,5,3.9,5.9,3.5,5.4,6.1,2.8,7.8,4.3,3.6,5.6,7.3,7.2,2.9,4.1,3.9,2.2,4.8],&#34;DEF&#34;:[3.2,3.2,2.7,2.2,2.1,3.7,2.8,2.7,2.7,2.4,2.3,1.1,3.7,4.5,2.8,5.4,2.2,2.6,4.2,2.2,1.1,1,1.8,2.1,1.7,2.8,2.8,3.2,2.1,0.8,0,4.1,1.8,1.5,2.6,1.3,1.2,0.5,-0.1,2.3,1.6,1.9,1.2,4.5,1.4,0.3,2.5,0.8,5.8,5.2,1.7,0.9,2.3,2.2,0.1,1.7,-0.3,2.9,1.9,1.4,4.2,2.8,2.7,-0.2,5.3,3.7,5,0.9,2.1,1.5,0.8,1,2.4,0.4,2.2,0.4,3.1,3.5,3.1,0.3,1,0.9,2.4,3,3.3,2.4,0.9,2.7,5.5,0.5,1.6,4,1.2,2,1.7,5,2.1,2.3,5,1.4],&#34;TOTAL&#34;:[12.3,12.6,11,10.8,12.5,11.2,10.4,9.6,10.3,11,11.4,9.6,11.8,8.8,9.2,9.4,9.9,9,8.1,10.1,10.7,10,8.6,10.7,8.2,10.4,10.2,7.6,10,9,8.4,8.9,8.4,7.6,7.3,10.1,7.2,9.2,9.2,9.4,8.4,7.3,8.6,9.1,8.4,9.3,7,7.3,7.8,7.9,9.9,8,7.1,8.2,7.2,7.2,6.8,7.3,8.1,7.8,9.5,8.4,7.8,7.5,6.1,11.4,8.5,7.8,7,9.5,6.7,7.5,9,6.3,6.8,7.5,7.7,7.1,7.6,8.4,7.6,7.4,7.3,6.8,9.2,6,6.3,8.7,8.2,8.3,6,7.6,6.8,9.3,8.9,7.8,6.2,6.2,7.2,6.2],&#34;WAR&#34;:[28.8,28.5,28,27,26.7,26.6,26,25.5,25.5,25.1,24.8,24.2,23.8,23.6,23.5,23.5,23.4,23.3,23.3,22.8,22.8,22.8,22.7,22.6,22.4,22.3,21.9,21.8,21.6,21.3,21.3,21.2,21.1,21.1,21,20.9,20.8,20.7,20.7,20.6,20.5,20.4,20.4,20.4,20.3,20.3,20.2,20.2,20.2,20.1,20.1,20,20,19.9,19.8,19.7,19.7,19.7,19.6,19.6,19.4,19.4,19.4,19.3,19.3,19.3,19.2,19.2,19.2,19,19,18.9,18.8,18.8,18.8,18.8,18.6,18.5,18.5,18.5,18.5,18.4,18.4,18.3,18.3,18.3,18.2,18.2,18.2,18.1,18.1,18,17.9,17.9,17.9,17.9,17.7,17.6,17.6,17.6],&#34;PLAYOFF_WAR&#34;:[6,5.7,4.9,5.3,3,2.3,5.7,5.4,4.5,5.2,3,5.8,0.3,3.4,6.4,5.7,3.4,5.1,6.8,2.7,2.7,3.6,4.5,3.2,4.4,3.4,0.9,4.4,7,4.4,4.6,1.4,3.5,4.6,5,3.9,4.7,3.1,5,1.4,3,3.4,1.9,0.2,2.8,2.1,4.7,2.2,3.1,2.9,0.9,4.3,5.7,5.7,4.6,5.3,3.7,4,3.7,4.8,2,0.7,4.8,3.2,4.9,4,1.6,5.8,3.2,0.7,5.8,2.3,1.7,5.4,3,3.4,2.1,2.3,3,1.7,2.7,3.3,3.9,4,5.2,4.2,1.7,5.2,0.7,2,4.7,1.8,4.4,4,1.3,5,4.1,3.3,3.6,2.6]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;NAME&#34;,&#34;name&#34;:&#34;NAME&#34;,&#34;type&#34;:&#34;character&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;minWidth&#34;:120,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;SEASON&#34;,&#34;name&#34;:&#34;SEASON&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;left&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;MIN_PLAYED&#34;,&#34;name&#34;:&#34;MIN. PLAYED&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;format&#34;:{&#34;cell&#34;:{&#34;separators&#34;:true},&#34;aggregated&#34;:{&#34;separators&#34;:true}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;OFF&#34;,&#34;name&#34;:&#34;OFF.&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:[{&#34;background&#34;:&#34;#FC482F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC442A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5943&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FF2C0F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96B57&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96954&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87663&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96954&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC462D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB553E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA5C46&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AFA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96752&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA644F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD3D23&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC4A32&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87866&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78170&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96954&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96B57&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AFA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA624D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA5C46&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5943&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F77F6E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68C7C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC4F37&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68A7A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC442A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87A69&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F5998B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96B57&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87663&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC4A32&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3ADA2&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE3E1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D2CD&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA5C46&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A89D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68C7C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59789&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AFA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68A7A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59B8E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59789&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59F93&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96752&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDFEFF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96752&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B9&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87866&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA604B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68E7F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78170&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87C6B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68E7F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87663&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B9&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3ADA2&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA604B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F77F6E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78170&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A295&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68E7F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C2BB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F5998B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68A7A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D2CD&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA644F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B1A7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B9&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69587&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96F5C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F9715E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D0CA&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B5AC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFDFDC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A69B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}]},{&#34;accessor&#34;:&#34;DEF&#34;,&#34;name&#34;:&#34;DEF.&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:[{&#34;background&#34;:&#34;#F78575&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78575&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CDC7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5842&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD391E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59A8C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA634D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CDC7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D1CB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B5AC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78575&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D8D3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDF3F3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96651&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B5AC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59A8C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1C6C0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CAC3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE2DF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDF7F7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BCB4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B2A8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CAC3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5842&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C3BC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EEE9E7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59D90&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D8D3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FF2C0F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD4026&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EEF0EF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDFEFF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68F81&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B2A8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C3BC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA634D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDFAFB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD3D22&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC472E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D8D3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D1CB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE5E3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE5E3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78879&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87B69&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78879&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EEE9E7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D1CB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68C7D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78271&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FE361A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE2DF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BCB4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96955&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CAC3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AEA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC472E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC472E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C3BC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}]},{&#34;accessor&#34;:&#34;TOTAL&#34;,&#34;name&#34;:&#34;TOTAL&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;format&#34;:{&#34;cell&#34;:{&#34;prefix&#34;:&#34;+&#34;,&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;prefix&#34;:&#34;+&#34;,&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;backgroundColor&#34;:&#34;#F5F5F5&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;WAR&#34;,&#34;name&#34;:&#34;WAR&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;PLAYOFF_WAR&#34;,&#34;name&#34;:&#34;P/O WAR&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;cell&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;85.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;81.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;70%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;75.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;42.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;32.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;81.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;77.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;64.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;74.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;42.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;82.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;4.28571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;48.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      6.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;91.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;81.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;48.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;72.8571428571428%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      6.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;97.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;38.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;38.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;51.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;64.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;45.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;62.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;48.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;12.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;62.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;100%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;62.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;65.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;20%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;50%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;65.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;71.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;55.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;67.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;44.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;71.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;20%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;42.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;48.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;27.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;2.85714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;40%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;30%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;67.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;31.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;44.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;41.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;12.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;61.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;81.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;81.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;65.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;75.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;52.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;57.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;52.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;68.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;28.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;10%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;68.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;45.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;70%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;57.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;22.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;82.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;45.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;10%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;82.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;32.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;24.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;77.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;42.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;48.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;30%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;32.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;42.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;24.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;38.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;47.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;55.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;57.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;74.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;60%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;24.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;74.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;10%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;28.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;67.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;25.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;62.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;57.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;18.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;71.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;58.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;47.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;51.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;37.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]}],&#34;minWidth&#34;:100,&#34;align&#34;:&#34;center&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;whiteSpace&#34;:&#34;pre&#34;,&#34;fontSize&#34;:14}}],&#34;columnGroups&#34;:[{&#34;name&#34;:&#34;RAPTOR&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;columns&#34;:[&#34;OFF&#34;,&#34;DEF&#34;,&#34;TOTAL&#34;]}],&#34;searchable&#34;:true,&#34;defaultPageSize&#34;:15,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:10,&#34;compact&#34;:true,&#34;height&#34;:&#34;600px&#34;,&#34;language&#34;:{&#34;searchPlaceholder&#34;:&#34;Search...&#34;,&#34;noData&#34;:&#34;No matches&#34;},&#34;dataKey&#34;:&#34;9653e073ca42b9f5c6e75035f46c6137&#34;,&#34;key&#34;:&#34;9653e073ca42b9f5c6e75035f46c6137&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;table-title-and-subtitle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Table Title and Subtitle&lt;/h2&gt;
&lt;p&gt;To add a title/subtitle, weâll save our table to a variable &lt;code&gt;tbl&lt;/code&gt;, then wrap it around a &lt;code&gt;html&lt;/code&gt; &lt;code&gt;div&lt;/code&gt;. This allows us to add &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;subtitle&lt;/code&gt; to the table that is technically external to the table itself.&lt;/p&gt;
&lt;p&gt;Weâll also change the background color of the table itself using the &lt;code&gt;reactableTheme()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;options(reactable.theme = reactableTheme(
    backgroundColor = &amp;quot;#fffef0&amp;quot;
))

tbl &amp;lt;- reactable(
    # data
    raptor_table,
    # header styling
    defaultColDef = colDef(headerStyle = list(fontFamily = &amp;quot;liberation mono&amp;quot;, fontSize = 16)),
    # styling for entire table
    height = 600,
    minRows = 10,
    showSortIcon = TRUE,
    compact = TRUE,
    pagination = TRUE,
    showPageInfo = TRUE,
    searchable = TRUE,
    language = reactableLang(searchPlaceholder = &amp;quot;Search...&amp;quot;, 
                             noData = &amp;quot;No matches&amp;quot;),
    # styling individual columns
    # columns start
    columns = list(
        NAME = colDef(minWidth = 120, 
                      style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                   fontSize = 14)),
        SEASON = colDef(minWidth = 60, 
                        align = &amp;quot;left&amp;quot;,
                        style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                     fontSize = 14)), 
        MIN_PLAYED = colDef(name = &amp;#39;MIN. PLAYED&amp;#39;, 
                            minWidth = 60, 
                            align = &amp;#39;right&amp;#39;,
                            format = colFormat(separators = TRUE), 
                            style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                         fontSize = 14)), 
        OFF = colDef(name = &amp;quot;OFF.&amp;quot;, 
                     minWidth = 60, 
                     align = &amp;#39;right&amp;#39;,
                     format = colFormat(digits = 1),
                     style = function(value){
                         # normalization is based on a cell&amp;#39;s value in relation to the range of values in the column
                         normalized &amp;lt;- (value - min(raptor_table$OFF)) / (max(raptor_table$OFF) - min(raptor_table$OFF))
                         color &amp;lt;- color_palette(normalized)
                         # with color set based on the color_palette function, we can feed it to the background parameter
                         list(background = color, fontWeight = &amp;quot;bold&amp;quot;, 
                              fontFamily = &amp;quot;liberation mono&amp;quot;,
                              fontSize = 14)
                     }
        ), 
        DEF = colDef(name = &amp;quot;DEF.&amp;quot;, 
                      minWidth = 60, 
                     align = &amp;#39;right&amp;#39;,
                     format = colFormat(digits = 1),
                     style = function(value){
                         # normalization is based on a cell&amp;#39;s value in relation to the range of values in the column
                         normalized &amp;lt;- (value - min(raptor_table$DEF)) / (max(raptor_table$DEF) - min(raptor_table$DEF))
                         color &amp;lt;- color_palette(normalized)
                         # with color set based on the color_palette function, we can feed it to the background parameter
                         list(background = color, fontWeight = &amp;quot;bold&amp;quot;, 
                              fontFamily = &amp;quot;liberation mono&amp;quot;,
                              fontSize = 14)
                     }
        ), 
        TOTAL = colDef(name = &amp;quot;TOTAL&amp;quot;, 
                       minWidth = 60, 
                       align = &amp;#39;right&amp;#39;,
                       format = colFormat(prefix = &amp;quot;+&amp;quot;, 
                                          digits = 1),
                       style = list(backgroundColor = &amp;#39;#F5F5F5&amp;#39;,
                                    fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                    fontSize = 14)), 
        WAR = colDef(minWidth = 60, 
                     align = &amp;quot;right&amp;quot;,
                     format = colFormat(digits = 1), 
                     style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                  fontSize = 14)), 
        PLAYOFF_WAR = colDef(name = &amp;quot;P/O WAR&amp;quot;, 
                             minWidth = 100, 
                             align = &amp;#39;center&amp;#39;, 
                             format = colFormat(digits = 1), 
                             style = list(fontFamily = &amp;quot;liberation mono&amp;quot;, 
                                          whiteSpace = &amp;quot;pre&amp;quot;, 
                                          fontSize = 14),
                             # render bar chart
                             cell = function(value){
                                width &amp;lt;- paste0(value * 100 / max(raptor_table$PLAYOFF_WAR), &amp;quot;%&amp;quot;)
                                value &amp;lt;- format(value, width = 9, justify = &amp;quot;right&amp;quot;)
                                bar_chart(value, width = width, fill = &amp;quot;#3fc1c9&amp;quot;)
                             }
        )
    ), #columns end
    # grouping OFF,DEF,TOTAL under RAPTOR
    columnGroups = list(
        colGroup(name = &amp;quot;RAPTOR&amp;quot;, 
                 columns = c(&amp;quot;OFF&amp;quot;, &amp;quot;DEF&amp;quot;, &amp;quot;TOTAL&amp;quot;),
                 headerStyle = list(fontFamily = &amp;quot;liberation mono&amp;quot;, fontSize = 16))
    ),
    defaultPageSize = 15
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After weâve saved our work with the &lt;code&gt;reactable&lt;/code&gt; function into the &lt;code&gt;tbl&lt;/code&gt; variable, we can wrap that in a &lt;code&gt;div&lt;/code&gt; and create the &lt;strong&gt;title&lt;/strong&gt; and &lt;strong&gt;subtitle&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;div(class = &amp;quot;table-wrap&amp;quot;,
    div(class = &amp;quot;table-header&amp;quot;,
        div(class = &amp;quot;table-title&amp;quot;, &amp;quot;Top 100 Vintage NBA Seasons&amp;quot;),
        &amp;quot;This table highlights 538&amp;#39;s new NBA statistic, RAPTOR, in addition to the more established Wins Above Replacement (WAR). An extra column, Playoff (P/O) War, is provided to highlight stars performers in the post-season, when the stakes are higher. The table is limited to the top-100 players who have played at least 1,000 minutes.&amp;quot;),
    tbl
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;table-wrap&#34;&gt;
&lt;div class=&#34;table-header&#34;&gt;
&lt;div class=&#34;table-title&#34;&gt;Top 100 Vintage NBA Seasons&lt;/div&gt;
This table highlights 538&#39;s new NBA statistic, RAPTOR, in addition to the more established Wins Above Replacement (WAR). An extra column, Playoff (P/O) War, is provided to highlight stars performers in the post-season, when the stakes are higher. The table is limited to the top-100 players who have played at least 1,000 minutes.
&lt;/div&gt;
&lt;div id=&#34;htmlwidget-9&#34; class=&#34;reactable html-widget&#34; style=&#34;width:auto;height:600px;&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-9&#34;&gt;{&#34;x&#34;:{&#34;tag&#34;:{&#34;name&#34;:&#34;Reactable&#34;,&#34;attribs&#34;:{&#34;data&#34;:{&#34;NAME&#34;:[&#34;Michael Jordan&#34;,&#34;LeBron James&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Michael Jordan&#34;,&#34;Stephen Curry&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;Chris Paul&#34;,&#34;Kevin Garnett&#34;,&#34;Dwyane Wade&#34;,&#34;Draymond Green&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;Tim Duncan&#34;,&#34;John Stockton&#34;,&#34;James Harden&#34;,&#34;Chris Paul&#34;,&#34;Michael Jordan&#34;,&#34;Chris Paul&#34;,&#34;Larry Bird&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Shaquille O&#39;Neal&#34;,&#34;LeBron James&#34;,&#34;Magic Johnson&#34;,&#34;Magic Johnson&#34;,&#34;Kevin Garnett&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;LeBron James&#34;,&#34;James Harden&#34;,&#34;Kobe Bryant&#34;,&#34;Magic Johnson&#34;,&#34;Stephen Curry&#34;,&#34;Dwyane Wade&#34;,&#34;LeBron James&#34;,&#34;Larry Bird&#34;,&#34;Charles Barkley&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;Magic Johnson&#34;,&#34;Scottie Pippen&#34;,&#34;LeBron James&#34;,&#34;Hakeem Olajuwon&#34;,&#34;David Robinson&#34;,&#34;John Stockton&#34;,&#34;John Stockton&#34;,&#34;Larry Bird&#34;,&#34;LeBron James&#34;,&#34;Ray Allen&#34;,&#34;Charles Barkley&#34;,&#34;Kevin Durant&#34;,&#34;Jason Kidd&#34;,&#34;Magic Johnson&#34;,&#34;Clyde Drexler&#34;,&#34;Paul George&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;James Harden&#34;,&#34;Hakeem Olajuwon&#34;,&#34;Chris Paul&#34;,&#34;David Robinson&#34;,&#34;LeBron James&#34;,&#34;Scottie Pippen&#34;,&#34;John Stockton&#34;,&#34;Kobe Bryant&#34;,&#34;Kevin Durant&#34;,&#34;Chris Paul&#34;,&#34;Dirk Nowitzki&#34;,&#34;Dirk Nowitzki&#34;,&#34;John Stockton&#34;,&#34;Mookie Blaylock&#34;,&#34;Tim Duncan&#34;,&#34;Kareem Abdul-Jabbar&#34;,&#34;Tracy McGrady&#34;,&#34;Anfernee Hardaway&#34;,&#34;Magic Johnson&#34;,&#34;Julius Erving&#34;,&#34;Scottie Pippen&#34;,&#34;Manu Ginobili&#34;,&#34;Gary Payton&#34;,&#34;Kobe Bryant&#34;,&#34;Nikola Jokic&#34;,&#34;David Robinson&#34;,&#34;Stephen Curry&#34;,&#34;Michael Jordan&#34;,&#34;Scottie Pippen&#34;,&#34;Dwyane Wade&#34;,&#34;Kawhi Leonard&#34;,&#34;Dwyane Wade&#34;,&#34;Kevin Garnett&#34;,&#34;Jason Kidd&#34;,&#34;Karl Malone&#34;,&#34;Tim Duncan&#34;,&#34;Tim Hardaway&#34;],&#34;SEASON&#34;:[1991,2009,1989,1990,2016,1988,1993,1992,1996,2015,2010,2013,2009,2004,2006,2016,1992,1986,2003,1991,2019,2008,1997,2015,1987,1988,1989,2000,2012,1987,1991,2003,1988,2011,2007,2018,2008,1989,2017,2009,2008,1985,1990,1994,1994,1990,1992,2006,1993,1995,1990,1997,1984,2016,2001,1993,2014,2003,1982,1992,2019,1987,1996,2015,1994,2014,1996,2017,1997,1995,2009,2013,2011,2006,2003,1996,1997,2002,1977,2003,1996,1983,1982,1991,2005,1996,2003,2019,1991,2014,1998,1995,2011,2017,2010,2008,2002,1996,2007,1997],&#34;MIN_PLAYED&#34;:[3723,3634,3973,3871,3314,3738,3850,4022,3823,3439,3426,3837,3203,4014,3851,3687,3625,3883,4202,3476,3291,3492,3910,3302,4020,3320,3310,4163,3309,3570,3756,3586,3728,3985,4083,3172,4055,3404,3239,3333,3579,3976,3504,3387,3566,3313,4063,3965,3760,3697,3109,3635,3989,3531,3897,3885,3937,3841,3553,3598,3045,3409,3567,3617,4266,2643,3372,3538,3848,3060,3900,3604,3130,4072,3839,3594,3497,3709,3483,3262,3488,3550,3569,3718,2965,4073,3932,3061,3261,3142,4053,3410,3651,2903,3002,3315,3859,3838,3462,3837],&#34;OFF&#34;:[9.1,9.3,8.3,8.6,10.4,7.5,7.6,7,7.6,8.6,9.2,8.5,8.2,4.4,6.4,3.9,7.7,6.4,3.9,7.8,9.6,9,6.9,8.6,6.5,7.6,7.5,4.4,7.9,8.2,8.3,4.9,6.6,6,4.6,8.8,6.1,8.6,9.3,7.1,6.8,5.4,7.5,4.6,7,9,4.5,6.4,2,2.8,8.2,7.1,4.7,6,7.1,5.5,7.1,4.4,6.1,6.4,5.3,5.5,5.1,7.7,0.8,7.7,3.6,6.9,4.9,8,5.9,6.5,6.7,5.9,4.6,7,4.6,3.6,4.5,8,6.6,6.5,5,3.9,5.9,3.5,5.4,6.1,2.8,7.8,4.3,3.6,5.6,7.3,7.2,2.9,4.1,3.9,2.2,4.8],&#34;DEF&#34;:[3.2,3.2,2.7,2.2,2.1,3.7,2.8,2.7,2.7,2.4,2.3,1.1,3.7,4.5,2.8,5.4,2.2,2.6,4.2,2.2,1.1,1,1.8,2.1,1.7,2.8,2.8,3.2,2.1,0.8,0,4.1,1.8,1.5,2.6,1.3,1.2,0.5,-0.1,2.3,1.6,1.9,1.2,4.5,1.4,0.3,2.5,0.8,5.8,5.2,1.7,0.9,2.3,2.2,0.1,1.7,-0.3,2.9,1.9,1.4,4.2,2.8,2.7,-0.2,5.3,3.7,5,0.9,2.1,1.5,0.8,1,2.4,0.4,2.2,0.4,3.1,3.5,3.1,0.3,1,0.9,2.4,3,3.3,2.4,0.9,2.7,5.5,0.5,1.6,4,1.2,2,1.7,5,2.1,2.3,5,1.4],&#34;TOTAL&#34;:[12.3,12.6,11,10.8,12.5,11.2,10.4,9.6,10.3,11,11.4,9.6,11.8,8.8,9.2,9.4,9.9,9,8.1,10.1,10.7,10,8.6,10.7,8.2,10.4,10.2,7.6,10,9,8.4,8.9,8.4,7.6,7.3,10.1,7.2,9.2,9.2,9.4,8.4,7.3,8.6,9.1,8.4,9.3,7,7.3,7.8,7.9,9.9,8,7.1,8.2,7.2,7.2,6.8,7.3,8.1,7.8,9.5,8.4,7.8,7.5,6.1,11.4,8.5,7.8,7,9.5,6.7,7.5,9,6.3,6.8,7.5,7.7,7.1,7.6,8.4,7.6,7.4,7.3,6.8,9.2,6,6.3,8.7,8.2,8.3,6,7.6,6.8,9.3,8.9,7.8,6.2,6.2,7.2,6.2],&#34;WAR&#34;:[28.8,28.5,28,27,26.7,26.6,26,25.5,25.5,25.1,24.8,24.2,23.8,23.6,23.5,23.5,23.4,23.3,23.3,22.8,22.8,22.8,22.7,22.6,22.4,22.3,21.9,21.8,21.6,21.3,21.3,21.2,21.1,21.1,21,20.9,20.8,20.7,20.7,20.6,20.5,20.4,20.4,20.4,20.3,20.3,20.2,20.2,20.2,20.1,20.1,20,20,19.9,19.8,19.7,19.7,19.7,19.6,19.6,19.4,19.4,19.4,19.3,19.3,19.3,19.2,19.2,19.2,19,19,18.9,18.8,18.8,18.8,18.8,18.6,18.5,18.5,18.5,18.5,18.4,18.4,18.3,18.3,18.3,18.2,18.2,18.2,18.1,18.1,18,17.9,17.9,17.9,17.9,17.7,17.6,17.6,17.6],&#34;PLAYOFF_WAR&#34;:[6,5.7,4.9,5.3,3,2.3,5.7,5.4,4.5,5.2,3,5.8,0.3,3.4,6.4,5.7,3.4,5.1,6.8,2.7,2.7,3.6,4.5,3.2,4.4,3.4,0.9,4.4,7,4.4,4.6,1.4,3.5,4.6,5,3.9,4.7,3.1,5,1.4,3,3.4,1.9,0.2,2.8,2.1,4.7,2.2,3.1,2.9,0.9,4.3,5.7,5.7,4.6,5.3,3.7,4,3.7,4.8,2,0.7,4.8,3.2,4.9,4,1.6,5.8,3.2,0.7,5.8,2.3,1.7,5.4,3,3.4,2.1,2.3,3,1.7,2.7,3.3,3.9,4,5.2,4.2,1.7,5.2,0.7,2,4.7,1.8,4.4,4,1.3,5,4.1,3.3,3.6,2.6]},&#34;columns&#34;:[{&#34;accessor&#34;:&#34;NAME&#34;,&#34;name&#34;:&#34;NAME&#34;,&#34;type&#34;:&#34;character&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;minWidth&#34;:120,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;SEASON&#34;,&#34;name&#34;:&#34;SEASON&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;left&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;MIN_PLAYED&#34;,&#34;name&#34;:&#34;MIN. PLAYED&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;format&#34;:{&#34;cell&#34;:{&#34;separators&#34;:true},&#34;aggregated&#34;:{&#34;separators&#34;:true}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;OFF&#34;,&#34;name&#34;:&#34;OFF.&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:[{&#34;background&#34;:&#34;#FC482F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC442A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5943&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FF2C0F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96B57&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96954&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87663&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96954&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC462D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB553E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA5C46&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AFA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96752&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA644F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD3D23&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC4A32&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87866&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78170&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96954&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96B57&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AFA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA624D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA5C46&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5943&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F77F6E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68C7C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC4F37&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68A7A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB533C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC442A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87A69&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F5998B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96B57&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87663&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC4A32&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3ADA2&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE3E1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D2CD&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA5C46&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A89D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68C7C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59789&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AFA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68A7A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78372&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59B8E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59789&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59F93&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96752&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDFEFF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96752&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B9&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87866&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA604B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68E7F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78170&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87C6B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68E7F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87663&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4AAA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B9&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3ADA2&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA604B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F77F6E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78170&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A295&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68E7F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C2BB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F5998B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68A7A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D2CD&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA644F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B1A7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B9&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69587&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96F5C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F9715E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D0CA&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B5AC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BAB1&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFDFDC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A69B&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}]},{&#34;accessor&#34;:&#34;DEF&#34;,&#34;name&#34;:&#34;DEF.&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:[{&#34;background&#34;:&#34;#F78575&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78575&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CDC7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5842&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD391E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59A8C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA634D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CDC7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D1CB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B5AC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78575&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D8D3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDF3F3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96651&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B5AC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59A8C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1C6C0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CAC3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE2DF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDF7F7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BCB4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B2A8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CAC3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FB5842&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C3BC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EEE9E7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59D90&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D8D3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FF2C0F&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD4026&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EEF0EF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDFEFF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68F81&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3B2A8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C3BC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FA634D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F69385&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EDFAFB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FD3D22&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87461&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC472E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C0B8&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D8D3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D1CB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE5E3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A79C&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE5E3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78879&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F87B69&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78879&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EEE9E7&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D1CB&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F68C7D&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F78271&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A194&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F0D4CF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F59688&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FE361A&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#EFE2DF&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2BCB4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F96955&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F1CAC3&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F3AEA4&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2B9B0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC472E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4ABA0&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F4A498&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#FC472E&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14},{&#34;background&#34;:&#34;#F2C3BC&#34;,&#34;fontWeight&#34;:&#34;bold&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}]},{&#34;accessor&#34;:&#34;TOTAL&#34;,&#34;name&#34;:&#34;TOTAL&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;format&#34;:{&#34;cell&#34;:{&#34;prefix&#34;:&#34;+&#34;,&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;prefix&#34;:&#34;+&#34;,&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;backgroundColor&#34;:&#34;#F5F5F5&#34;,&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;WAR&#34;,&#34;name&#34;:&#34;WAR&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;minWidth&#34;:60,&#34;align&#34;:&#34;right&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:14}},{&#34;accessor&#34;:&#34;PLAYOFF_WAR&#34;,&#34;name&#34;:&#34;P/O WAR&#34;,&#34;type&#34;:&#34;numeric&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;format&#34;:{&#34;cell&#34;:{&#34;digits&#34;:1},&#34;aggregated&#34;:{&#34;digits&#34;:1}},&#34;cell&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;85.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;81.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;70%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;75.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;42.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;32.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;81.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;77.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;64.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;74.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;42.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;82.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;4.28571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;48.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      6.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;91.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;81.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;48.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;72.8571428571428%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      6.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;97.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;38.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;38.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;51.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;64.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;45.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;62.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;48.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;12.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;62.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;100%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;62.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;65.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;20%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;50%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;65.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;71.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;55.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;67.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;44.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;71.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;20%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;42.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;48.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;27.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;2.85714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;40%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;30%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;67.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;31.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;44.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;41.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;12.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;61.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;81.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;81.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;65.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;75.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;52.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;57.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;52.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;68.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;28.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;10%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;68.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;45.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;70%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;57.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;22.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;82.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;45.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;10%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;82.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;32.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;24.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;77.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;42.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;48.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;30%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;32.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;42.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;24.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;38.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;47.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.9&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;55.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;57.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;74.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;60%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;24.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      5.2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;74.2857142857143%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      0.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;10%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        2&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;28.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.7&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;67.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.8&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;25.7142857142857%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;62.8571428571429%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        4&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;57.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      1.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;18.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;        5&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;71.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      4.1&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;58.5714285714286%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.3&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;47.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      3.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;51.4285714285714%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]},{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;display&#34;:&#34;flex&#34;,&#34;alignItems&#34;:&#34;center&#34;}},&#34;children&#34;:[&#34;      2.6&#34;,{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;flexGrow&#34;:1,&#34;marginLeft&#34;:&#34;6px&#34;,&#34;background&#34;:null}},&#34;children&#34;:[{&#34;name&#34;:&#34;div&#34;,&#34;attribs&#34;:{&#34;style&#34;:{&#34;background&#34;:&#34;#3fc1c9&#34;,&#34;width&#34;:&#34;37.1428571428571%&#34;,&#34;height&#34;:&#34;14px&#34;}},&#34;children&#34;:[]}]}]}],&#34;minWidth&#34;:100,&#34;align&#34;:&#34;center&#34;,&#34;style&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;whiteSpace&#34;:&#34;pre&#34;,&#34;fontSize&#34;:14}}],&#34;columnGroups&#34;:[{&#34;name&#34;:&#34;RAPTOR&#34;,&#34;headerStyle&#34;:{&#34;fontFamily&#34;:&#34;liberation mono&#34;,&#34;fontSize&#34;:16},&#34;columns&#34;:[&#34;OFF&#34;,&#34;DEF&#34;,&#34;TOTAL&#34;]}],&#34;searchable&#34;:true,&#34;defaultPageSize&#34;:15,&#34;paginationType&#34;:&#34;numbers&#34;,&#34;showPageInfo&#34;:true,&#34;minRows&#34;:10,&#34;compact&#34;:true,&#34;height&#34;:&#34;600px&#34;,&#34;theme&#34;:{&#34;backgroundColor&#34;:&#34;#fffef0&#34;},&#34;language&#34;:{&#34;searchPlaceholder&#34;:&#34;Search...&#34;,&#34;noData&#34;:&#34;No matches&#34;},&#34;dataKey&#34;:&#34;9653e073ca42b9f5c6e75035f46c6137&#34;,&#34;key&#34;:&#34;9653e073ca42b9f5c6e75035f46c6137&#34;},&#34;children&#34;:[]},&#34;class&#34;:&#34;reactR_markup&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;The cool thing is that we can style the table with &lt;code&gt;css&lt;/code&gt; directly in Rmarkdown (just make sure your code chunk has &lt;code&gt;css&lt;/code&gt; instead of &lt;code&gt;r&lt;/code&gt; just for the css parts). Weâll use &lt;code&gt;css&lt;/code&gt; to style our &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;subtitle&lt;/code&gt; to make it consistent with the table itself.&lt;/p&gt;
&lt;pre class=&#34;css&#34;&gt;&lt;code&gt;.table-title {
    font-size: 20px;
    font-weight: 600;
    font-family: &amp;quot;liberation mono&amp;quot;;
    padding: 10px 10px 10px 3px;
}

.table-header {
    font-size: 14px;
    font-weight: 300;
    font-family: &amp;quot;liberation mono&amp;quot;;
    padding: 10px 10px 10px 10px;
    
}

.table-wrap {
    box-shadow: 2px 3px 20px black;
    background-color: #fffef0;
}&lt;/code&gt;&lt;/pre&gt;
&lt;style type=&#34;text/css&#34;&gt;
.table-title {
    font-size: 20px;
    font-weight: 600;
    font-family: &#34;liberation mono&#34;;
    padding: 10px 10px 10px 3px;
}

.table-header {
    font-size: 14px;
    font-weight: 300;
    font-family: &#34;liberation mono&#34;;
    padding: 10px 10px 10px 10px;
    
}

.table-wrap {
    box-shadow: 2px 3px 20px black;
    background-color: #fffef0;
}
&lt;/style&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Science from Scratch (ch2)</title>
      <link>/post/dsfs_2/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate>
      <guid>/post/dsfs_2/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Table of Content:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#setup&#34;&gt;Set Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#functions&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#strings&#34;&gt;Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#exceptions&#34;&gt;Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#lists&#34;&gt;Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#tuples&#34;&gt;Tuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#dictionaries&#34;&gt;Dictionaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#defaultdict&#34;&gt;defaultdict&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#counters&#34;&gt;Counters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#sets&#34;&gt;Sets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#controlflow&#34;&gt;Control Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#truthiness&#34;&gt;Truthiness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#sorting&#34;&gt;Sorting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#list_comprehensions&#34;&gt;List Comprehensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#assert&#34;&gt;Assert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#object-oriented_programming&#34;&gt;Object-Oriented Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#iterables_and_generators&#34;&gt;Iterables &amp;amp; Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#pseudorandomness&#34;&gt;Pseudorandomness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#regex&#34;&gt;Regular Expression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chapter-2-a-crash-course-in-python&#34;&gt;Chapter 2: A Crash Course in Python&lt;/h2&gt;
&lt;p&gt;This is the first of many chapters i&amp;rsquo;ll be covering from Joel Grus&#39; Data Science from Scratch book (2nd edition). This chapter provides a quick survey of python features needed for &amp;ldquo;doing&amp;rdquo; data science from scratch, including essential setup of virtual environments and other tooling.&lt;/p&gt;
&lt;p&gt;While the chapter is not meant to be comprehensive, I may supplement certain sections with external content for greater detail in certain parts.&lt;/p&gt;
&lt;p&gt;My goal is twofold. First, to go through this book and, as a byproduct, learn python. Second, to look out for and highlight the areas where the &lt;em&gt;pythonic&lt;/em&gt; way of doing things is necessary to accomplish something in the data science process.&lt;/p&gt;
&lt;p&gt;At several sections throughout this chapter, the author emphasises how much a particular feature will be used later in the book (e.g., functions, dictionaries, list, list comprehensions (and for-loops), assert, iterables and generators, randomness, type annotations). Things &lt;em&gt;not&lt;/em&gt; used as much (e.g., sets, automated test, subclasses that inherit functionality from a parent class, zip and argument unpacking, args, kwargs).&lt;/p&gt;
&lt;p&gt;Additional code can be found in this 
&lt;a href=&#34;https://github.com/PaulApivat/dsfs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;repo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;h3 id=&#34;installation-virtual-environment-and-modules&#34;&gt;Installation, Virtual Environment and Modules&lt;/h3&gt;
&lt;p&gt;These section takes the reader through installing a virtual environment using Anaconda Python distribution. The author points out a best practice, &amp;ldquo;you should always work in a virtual environment and never use &amp;lsquo;base&amp;rsquo; Python installation&amp;rdquo;. Moreover, the author favors IPython over jupyter notebooks (he&amp;rsquo;s a noted 
&lt;a href=&#34;https://www.youtube.com/watch?v=7jiPeIFXb6U&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;critic of the notebook&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Jeremy Howard of fast.ai offers a contrasting perspective. He &lt;em&gt;does&lt;/em&gt; 
&lt;a href=&#34;https://www.youtube.com/watch?v=9Q6sLbz37gk&amp;amp;feature=emb_title&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;like notebooks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first time I installed Python, it took me awhile to get things right and eventually I relied on jupyter notebooks through Anaconda. As we go through this book, I&amp;rsquo;ll be using virtual environments and IPython as much as I can (although I may sprinkle in a notebook here and there). My IDE for interacting with the conda virtual environment and IPython will be VSCode.&lt;/p&gt;
&lt;p&gt;Fortunately, I had a relatively painless process setting up a virtual environment and IPython, although I had to take a slight detour to setup the &lt;code&gt;code&lt;/code&gt; command for VSCode.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a summary of the commands I used for setup:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./python_virtual_env.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;
&lt;p&gt;Three things are emphasized here: passing functions as arguments for other functions, lambda functions and default parameter values.&lt;/p&gt;
&lt;p&gt;The illustration of functions being passed as arguments is demonstrated below. A function &lt;code&gt;double&lt;/code&gt; is created. A function &lt;code&gt;apply_to_one&lt;/code&gt; is created. The &lt;code&gt;double&lt;/code&gt; function is pointed at &lt;code&gt;my_double&lt;/code&gt;. We pass &lt;code&gt;my_double&lt;/code&gt; into the &lt;code&gt;apply_to_one&lt;/code&gt; function and set that to &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Whatever function is passed to &lt;code&gt;apply_to_one&lt;/code&gt;, &lt;em&gt;its&lt;/em&gt; argument is 1. So passing &lt;code&gt;my_double&lt;/code&gt; means we are doubling 1, so x is 2.&lt;/p&gt;
&lt;p&gt;But the important thing is that a function got passed to another function (aka higher order functions).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def double(x):
    &amp;quot;&amp;quot;&amp;quot;
    this function doubles and returns the argument
    &amp;quot;&amp;quot;&amp;quot;
    return x * 2
    
def apply_to_one(f):
    &amp;quot;&amp;quot;&amp;quot;Calls the function f with 1 as its argument&amp;quot;&amp;quot;&amp;quot;
    return f(1)
    
my_double = double

# x is 2 here
x = apply_to_one(my_double)

# extending this example
def apply_five_to(e):
    &amp;quot;&amp;quot;&amp;quot;returns the function e with 5 as its argument&amp;quot;&amp;quot;&amp;quot;
    return e(5)

# doubling 5 is 10
w = apply_five_to(my_double)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since functions are going to be used extensively, here&amp;rsquo;s another more complicated example. I found this from 
&lt;a href=&#34;https://treyhunner.com/2020/01/passing-functions-as-arguments/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Trey Hunner&amp;rsquo;s site&lt;/a&gt;. Two functions are defined - &lt;code&gt;square&lt;/code&gt; and &lt;code&gt;cube&lt;/code&gt;. Both functions are saved to a list called &lt;code&gt;operations&lt;/code&gt;. Another list, &lt;code&gt;numbers&lt;/code&gt; is created.&lt;/p&gt;
&lt;p&gt;Finally, a for-loop is used to iterate through &lt;code&gt;numbers&lt;/code&gt;, and the &lt;code&gt;enumerate&lt;/code&gt; property allows access to both index and item in numbers. That&amp;rsquo;s used to find whether the &lt;code&gt;action&lt;/code&gt; is a &lt;code&gt;square&lt;/code&gt; or &lt;code&gt;cube&lt;/code&gt; (operations[0] is &lt;code&gt;square&lt;/code&gt;, operations[1] is &lt;code&gt;cube&lt;/code&gt;), which is then given as its argument, the items inside the &lt;code&gt;numbers&lt;/code&gt; list.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# create two functions
def square(n): return n**2
def cube(n): return n**3

# store those functions inside a list, operations, to reference later
operations = [square, cube]

# create a list of numbers
numbers = [2,1,3,4,7,11,18,29]

# loop through the numbers list
# using enumerate the identify index and items
# [i % 2] results in either 0 or 1, that&#39;s pointed at action
# using the dunder, name, retrieves the name of the function - either square or cube - from the operations list
# print __name__ along with the item from the numbers list
# action is either a square or cube

for i, n in enumerate(numbers):
    action = operations[i % 2]
    print(f&amp;quot;{action.__name__}({n}):&amp;quot;, action(n))

# print
square(2): 4
cube(1): 1
square(3): 9
cube(4): 64
square(7): 49
cube(11): 1331
square(18): 324
cube(29): 24389

# more explicit, yet verbose way to write the for-loop
for index, num in enumerate(numbers):
    action = operations[index % 2]
    print(f&amp;quot;{action.__name__}({num}):&amp;quot;, action(num))

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This section also introduces &lt;code&gt;lambda&lt;/code&gt; functions (aka anonymous functions) to demonstrate how functions, being first-class in Python, can, like any variable, be passed into the argument of another function. However, with &lt;code&gt;lambda&lt;/code&gt; instead of defining functions with &lt;code&gt;def&lt;/code&gt;, it is defined inside another function. Here&amp;rsquo;s an illustration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# we&#39;ll reuse apply_five_to, which takes in a function and provides &#39;5&#39; as the argument
def apply_five_to(e):
    &amp;quot;&amp;quot;&amp;quot;returns the function e with 5 as its argument&amp;quot;&amp;quot;&amp;quot;
    return e(5)

# this lambda function adds &#39;4&#39; to any argument
# when passing this lambda function to apply_five_to
# you get y = 5 + 4
y = apply_five_to(lambda x: x + 4)

# we can also change what the lambda function does without defining a separate function
# here the lambda function multiplies the argument by 4
# y = 20
y = apply_five_to(lambda x: x * 4)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lambda functions are convenient in that you can pass it into another function &lt;em&gt;immediately&lt;/em&gt; without having to define it separately, but the consensus seems to be that you should just use &lt;code&gt;def&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an external example of &lt;code&gt;lambda&lt;/code&gt; functions from 
&lt;a href=&#34;https://treyhunner.com/2020/01/passing-functions-as-arguments/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Trey Hunner&lt;/a&gt;. In this example, a &lt;code&gt;lambda&lt;/code&gt; function is used within a &lt;code&gt;filter&lt;/code&gt; function that takes in two arguments.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# calling help(filter) displays an explanation

class filter(object)
 |  filter(function or None, iterable) --&amp;gt; filter object

# create a list of numbers
numbers = [2,1,3,4,7,11,18,29]

# the lambda function will return n if it is an even number
# we filter the numbers list using the lambda function
# wrapped in a list, this returns [2,4,18]
list(filter(lambda n: n % 2 == 0, numbers))

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are whole books, or at least whole chapters, that can be written about Python functions, but we&amp;rsquo;ll limit our discussion for now to the idea that &lt;strong&gt;functions can be passed as arguments to other functions&lt;/strong&gt;. I&amp;rsquo;ll report back on this section as we progress through the book.&lt;/p&gt;
&lt;h2 id=&#34;strings&#34;&gt;Strings&lt;/h2&gt;
&lt;p&gt;Strings may not be terribly exciting for data science or machine learning, unless you&amp;rsquo;re getting into natural language processing, so we&amp;rsquo;ll keep it brief here. The key take aways are that &lt;em&gt;backslashes&lt;/em&gt; encode special characters and that &lt;strong&gt;f-strings&lt;/strong&gt; is the most updated way to do string interpolation. Here are some examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# point strings to variables (we&#39;ll use my name)
first_name = &amp;quot;Paul&amp;quot;
last_name = &amp;quot;Apivat&amp;quot;

# f-string (recommended), &#39;Paul Apivat&#39;
f_string = f&amp;quot;{first_name} {last_name}&amp;quot;

# string addition, &#39;Paul Apivat&#39;
string_addition = first_name + &amp;quot; &amp;quot; + last_name

# string format, &#39;Paul Apivat&#39;
string_format = &amp;quot;{0} {1}&amp;quot;.format(first_name, last_name)

# percent format (NOT recommended), &#39;Paul Apivat&#39;
pct_format = &amp;quot;%s %s&amp;quot; %(&#39;Paul&#39;,&#39;Apivat&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;exceptions&#34;&gt;Exceptions&lt;/h2&gt;
&lt;p&gt;The author covers exceptions to make the point that they&amp;rsquo;re not all that bad in Python and it&amp;rsquo;s worth handling exceptions yourself to make code more readable. Here&amp;rsquo;s my own example that&amp;rsquo;s slightly different from the book:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;integer_list = [1,2,3]

heterogeneous_list = [&amp;quot;string&amp;quot;, 0.1, True]

# you can sum a list of integers, here 1 + 2 + 3 = 6
sum(integer_list)

# but you cannot sum a list of heterogeneous data types
# doing so raises a TypeError
sum(heterogeneous_list)

# the error crashes your program and is not fun to look at
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-12-3287dd0c6c22&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 sum(heterogeneous_list)

TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;

# so the idea is to handle the exceptions with your own messages
try:
    sum(heterogeneous_list)
except TypeError:
    print(&amp;quot;cannot add objects of different data types&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, the primary benefits to handling exceptions yourself is for code readability, so we&amp;rsquo;ll come back to this section if we see more useful examples.&lt;/p&gt;
&lt;h2 id=&#34;lists&#34;&gt;Lists&lt;/h2&gt;
&lt;p&gt;Lists are fundamental to Python so I&amp;rsquo;m going to spend some time exploring their features. For data science, &lt;code&gt;NumPy arrays&lt;/code&gt; are used frequently, so I thought it&amp;rsquo;d be good to implement all &lt;code&gt;list&lt;/code&gt; operations covered in this section in &lt;code&gt;Numpy arrays&lt;/code&gt; to &lt;em&gt;tease apart their similarities and differences&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Below are the similarities.&lt;/p&gt;
&lt;p&gt;This implies that whatever can be done in python &lt;code&gt;lists&lt;/code&gt; can also be done in numpy &lt;code&gt;arrays&lt;/code&gt;, including: getting the &lt;em&gt;nth&lt;/em&gt; element in the list/array with square brackets, slicing the list/array, iterating through the list/array with &lt;em&gt;start, stop, step&lt;/em&gt;, using the &lt;code&gt;in&lt;/code&gt; operator to find list/array membership, checking length and unpacking list/arrays.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# setup
import numpy as np

# create comparables
python_list = [1,2,3,4,5,6,7,8,9]
numpy_array = np.array([1,2,3,4,5,6,7,8,9])

# bracket operations

# get nth element with square bracket
python_list[0] # 1
numpy_array[0] # 1
python_list[8] # 9
numpy_array[8] # 9
python_list[-1] # 9
numpy_array[-1] # 9

# square bracket to slice 
python_list[:3] # [1, 2, 3]
numpy_array[:3] # array([1, 2, 3])

python_list[1:5] # [2, 3, 4, 5]
numpy_array[1:5] # array([2, 3, 4, 5])

# start, stop, step
python_list[1:8:2] # [2, 4, 6, 8]
numpy_array[1:8:2] # array([2, 4, 6, 8])

# use in operator to check membership
1 in python_list # true
1 in numpy_array # true

0 in python_list # false
0 in numpy_array # false

# finding length
len(python_list) # 9
len(numpy_array) # 9

# unpacking
x,y = [1,2] # now x is 1, y is 2
w,z = np.array([1,2]) # now w is 1, z is 2


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, here are the differences.&lt;/p&gt;
&lt;p&gt;These tasks can be done in python &lt;code&gt;lists&lt;/code&gt;, but require a different approach for NumPy &lt;code&gt;array&lt;/code&gt; including: modification (extend in list, append for array). Finally, lists can store mixed data types, while NumPy array will convert to string.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# python lists can store mixed data types
heterogeneous_list = [&#39;string&#39;, 0.1, True]
type(heterogeneous_list[0]) # str
type(heterogeneous_list[1]) # float
type(heterogeneous_list[2]) # bool

# numpy arrays cannot store mixed data types
# numpy arrays turn all data types into strings
homogeneous_numpy_array = np.array([&#39;string&#39;, 0.1, True]) # saved with mixed data types
type(homogeneous_numpy_array[0]) # numpy.str_
type(homogeneous_numpy_array[1]) # numpy.str_
type(homogeneous_numpy_array[2]) # numpy.str_


# modifying list vs numpy array

# lists can use extend to modify list in place
python_list.extend([10,12,13])  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13]
numpy_array.extend([10,12,13]) # AttributeError: &#39;numpy.ndarray&#39;

# numpy array must use append, instead of extend
numpy_array = np.append(numpy_array,[10,12,13])

# python lists can be added with other lists
new_python_list = python_list + [14,15] # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15]
numpy_array + [14,15] # ValueError

# numpy array cannot be added (use append instead)
# array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 12, 13, 14, 15])
new_numpy_array = np.append(numpy_array, [14,15]) 

# python lists have the append attribute
python_list.append(0) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 0]

# the append attribute for numpy array is used differently
numpy_array = np.append(numpy_array, [0])

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python &lt;code&gt;lists&lt;/code&gt; and NumPy &lt;code&gt;arrays&lt;/code&gt; have much in common, but there are meaningful differences as well.&lt;/p&gt;
&lt;h4 id=&#34;python-lists-vs-numpy-arrays-whats-the-difference&#34;&gt;Python Lists vs NumPy Arrays: What&amp;rsquo;s the difference&lt;/h4&gt;
&lt;p&gt;Now that we know that there &lt;em&gt;are&lt;/em&gt; meaningful differences, what can we attribute these differences to? This 
&lt;a href=&#34;https://webcourses.ucf.edu/courses/1249560/pages/python-lists-vs-numpy-arrays-what-is-the-difference&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;explainer from UCF&lt;/a&gt; highlights &lt;strong&gt;performance&lt;/strong&gt; differences including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Size&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Functionality&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m tempted to go down this ð ð³ï¸ of further &lt;code&gt;lists&lt;/code&gt; vs &lt;code&gt;array&lt;/code&gt; comparisons, but we&amp;rsquo;ll hold off for now.&lt;/p&gt;
&lt;h2 id=&#34;tuples&#34;&gt;Tuples&lt;/h2&gt;
&lt;p&gt;Similar to &lt;code&gt;lists&lt;/code&gt;, but &lt;code&gt;tuples&lt;/code&gt; are immutable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
my_list = [1,2]   # check type(my_list)
my_tuple = (1,2)  # check type(my_tuple)
other_tuple = 3,4 # tuples don&#39;t require parentheses

my_list[1] = 3    # lists ARE mutable, my_list is now [1,3]

# exception handling when trying to change tuple
try:
    my_tuple[1] = 3
except TypeError:
    print(&amp;quot;tuples are immutable&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Tuples&lt;/code&gt; are good at returning multiple values from functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# use tuple to return multiple values
def sum_and_product(x,y):
    &amp;quot;&amp;quot;&amp;quot;you can return multiple values from functions using tuples&amp;quot;&amp;quot;&amp;quot;
    return (x + y), (x * y)
    
sp = sum_and_product(4,5)  # sp is (9,20), a tuple

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, &lt;code&gt;lists&lt;/code&gt; can also be used to return multiple values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
def sum_and_product_list(x,y):
    return [(x + y), (x * y)]

spl = sum_and_product_list(5,6)  # [11, 30]
type(spl) # list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, both &lt;code&gt;tuples&lt;/code&gt; and &lt;code&gt;lists&lt;/code&gt; can be used for multiple assignments, here&amp;rsquo;s a pythonic way to swap variables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x, y = 1,2
x,y = y,x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tuples, for the most part, seem to be redundant with &lt;code&gt;lists&lt;/code&gt;, but we&amp;rsquo;ll see if there are special use-cases for immutability down the line.&lt;/p&gt;
&lt;h2 id=&#34;dictionaries&#34;&gt;Dictionaries&lt;/h2&gt;
&lt;p&gt;Dictionaries are good for storing structured data. They have a key/value pair so you can look up values of certain keys. The author provides some ways to initialize a dictionary, with comments about what is &lt;em&gt;more or less pythonic&lt;/em&gt; (I&amp;rsquo;ll take the author&amp;rsquo;s word for it, but open to other perspectives).&lt;/p&gt;
&lt;p&gt;Some of the things you can do with &lt;code&gt;dictionaries&lt;/code&gt; are query keys, values, assign new key/value pairs, check for existence of keys or retrieve certain values.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
empty_dict = {}                   # most pythonic
empty_dict2 = dict()              # less pythonic
grades = {&amp;quot;Joel&amp;quot;: 80, &amp;quot;Grus&amp;quot;: 99} # dictionary literal

type(grades)  # type check, dict

# use bracket to look up values
grades[&amp;quot;Grus&amp;quot;]  # 99
grades[&amp;quot;Joel&amp;quot;]  # 80

# KeyError for looking up non-existent keys
try:
   kate_grades = grades[&amp;quot;Kate&amp;quot;]
except KeyError:
   print(&amp;quot;That key doesn&#39;t exist&amp;quot;)
   
# use in operator to check existence of key
joe_has_grade = &amp;quot;Joel&amp;quot; in grades  
joe_has_grade # true

kate_does_not = &amp;quot;Kate&amp;quot; in grades
kate_does_not # false

# use &#39;get&#39; method to get values in dictionaries
grades.get(&amp;quot;Joel&amp;quot;) # 80
grades.get(&amp;quot;Grus&amp;quot;) # 99
grades.get(&amp;quot;Kate&amp;quot;) # default: None

# assign new key/value pair using brackets
grades[&amp;quot;Tim&amp;quot;] = 93

grades # {&#39;Joel&#39;: 80, &#39;Grus&#39;: 99, &#39;Tim&#39;: 93}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dictionaries are good for representing structured data that can be queries. The key take-away here is that in order to iterate through &lt;code&gt;dictionaries&lt;/code&gt; to get either &lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;values&lt;/code&gt; or both, we&amp;rsquo;ll need to use specific methods likes &lt;code&gt;keys()&lt;/code&gt;, &lt;code&gt;values()&lt;/code&gt; or &lt;code&gt;items()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
tweet = {
    &amp;quot;user&amp;quot;: &amp;quot;paulapivat&amp;quot;,
    &amp;quot;text&amp;quot;: &amp;quot;Reading Data Science from Scratch&amp;quot;,
    &amp;quot;retweet_count&amp;quot;: 100,
    &amp;quot;hashtags&amp;quot;: [&amp;quot;#66daysofdata&amp;quot;, &amp;quot;datascience&amp;quot;, &amp;quot;machinelearning&amp;quot;, &amp;quot;python&amp;quot;, &amp;quot;R&amp;quot;]
    }
    
# query specific values
tweet[&amp;quot;retweet_count&amp;quot;] # 100

# query values within a list
tweet[&amp;quot;hashtags&amp;quot;] # [&#39;#66daysofdata&#39;, &#39;datascience&#39;, &#39;machinelearning&#39;, &#39;python&#39;, &#39;R&#39;]
tweet[&amp;quot;hashtags&amp;quot;][2] # &#39;machinelearning&#39;

# retrieve ALL keys
tweet_keys = tweet.keys()
tweet_keys              # dict_keys([&#39;user&#39;, &#39;text&#39;, &#39;retweet_count&#39;, &#39;hashtags&#39;])
type(tweet_keys)        # different data type: dict != dict_keys

# retrieve ALL values
tweet_values = tweet.values() 
tweet_values  # dict_values([&#39;paulapivat&#39;, &#39;Reading Data Science from Scratch&#39;, 100, [&#39;#66daysofdata&#39;, &#39;datascience&#39;, &#39;machinelearning&#39;, &#39;python&#39;, &#39;R&#39;]])

type(tweet_values)      # different data type: dict != dict_values

# create iterable for Key-Value pairs (in tuple)
tweet_items = tweet.items()

# iterate through tweet_items()
for key,value in tweet_items:
    print(&amp;quot;These are the keys:&amp;quot;, key)
    print(&amp;quot;These are the values:&amp;quot;, value)
    
# cannot iterate through original tweet dictionary
# ValueError: too many values to unpack (expected 2)
for key, value in tweet:
    print(key)
    
# cannot use &#39;enumerate&#39; because that only provides index and key (no value)
for key, value in enumerate(tweet):
    print(key)   # print 0 1 2 3 - index values
    print(value) # user text retweet_count hashtags (incorrectly print keys)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like in &lt;code&gt;lists&lt;/code&gt; and &lt;code&gt;tuples&lt;/code&gt;, you can use the &lt;code&gt;in&lt;/code&gt; operator to find membership. The one caveat is you cannot look up &lt;em&gt;values&lt;/em&gt; that are in &lt;code&gt;lists&lt;/code&gt;, unless you use bracket notation to help.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# search keys
&amp;quot;user&amp;quot; in tweet # true
&amp;quot;bball&amp;quot; in tweet # false

&amp;quot;paulapivat&amp;quot; in tweet_values # true
&#39;python&#39; in tweet_values # false (python is nested in &#39;hashtags&#39;)
&amp;quot;hashtags&amp;quot; in tweet  # true

# finding values inside a list requires brackets to help
&#39;python&#39; in tweet[&#39;hashtags&#39;]  # true

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;What is or is not hashable?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dictionary&lt;/code&gt; keys must be hashable.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Strings&lt;/code&gt; are hashable. So we can use &lt;code&gt;strings&lt;/code&gt; as dictionary keys, but we &lt;strong&gt;cannot&lt;/strong&gt; use &lt;code&gt;lists&lt;/code&gt; because they are not hashable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
paul = &amp;quot;paul&amp;quot;
type(paul)        # check type, str

hash(paul)        # -3897810863245179227 ; strings are hashable
paul.__hash__()   # -3897810863245179227 ; another way to find the hash

jake = [&#39;jake&#39;]   # this is a list
type(jake)        # check type, list

# lists are not hashable - cannot be used as dictionary keys
try:
   hash(jake)
except TypeError:
   print(&#39;lists are not hashable&#39;)

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;defaultdict&#34;&gt;defaultdict&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;defaultdict&lt;/code&gt; is a &lt;strong&gt;subclass&lt;/strong&gt; of dictionaries (&lt;code&gt;dict&lt;/code&gt;, see previous post), so it &lt;em&gt;inherits&lt;/em&gt; most of its behavior from &lt;code&gt;dict&lt;/code&gt; with additional features. To understand how those features make it different, and more convenient in some cases, we&amp;rsquo;ll need to run into some errors.&lt;/p&gt;
&lt;p&gt;If we try to count words in a document, the general approach is to create a dictionary where the dictionary &lt;code&gt;keys&lt;/code&gt; are words and the dictionary &lt;code&gt;values&lt;/code&gt; are counts of those words.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try do do this with a regular dictionary.&lt;/p&gt;
&lt;p&gt;First, to setup, we&amp;rsquo;ll take a list of words and &lt;code&gt;split()&lt;/code&gt; into individual words. I took this paragraph from 
&lt;a href=&#34;https://rpubs.com/paulapivat/vintage_nba_seasons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;another project&lt;/a&gt; i&amp;rsquo;m working on and artificially added some extra words to ensure that certain words appeared more than once (it&amp;rsquo;ll be apparent why soon).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# paragraph
lines = [&amp;quot;This table highlights 538&#39;s new NBA statistic, RAPTOR, in addition to the more established Wins Above Replacement (WAR). An extra column, Playoff (P/O) War, is provided to highlight stars performers in the post-season, when the stakes are higher. The table is limited to the top-100 players who have played at least 1,000 minutes minutes the table Wins NBA NBA RAPTOR more players&amp;quot;]

# split paragraphy into individual words
lines = &amp;quot; &amp;quot;.join(lines).split()

type(lines) # list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have our &lt;code&gt;lines&lt;/code&gt; list, we&amp;rsquo;ll create an empty &lt;code&gt;dict&lt;/code&gt; called &lt;code&gt;word_counts&lt;/code&gt; and have each word be the &lt;code&gt;key&lt;/code&gt; and each &lt;code&gt;value&lt;/code&gt; be the count of that word.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# empty list
word_counts = {}

# loop through lines to count each word
for word in lines:
    word_counts[word] += 1
    
# KeyError: &#39;This&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We received a &lt;code&gt;KeyError&lt;/code&gt; for the very first word in &lt;code&gt;lines&lt;/code&gt; (i.e. &amp;lsquo;This&amp;rsquo;) because the &lt;strong&gt;list tried to count a key that didn&amp;rsquo;t exist&lt;/strong&gt;. We&amp;rsquo;ve learned to handle exceptions so we can use &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here, we&amp;rsquo;re looping through &lt;code&gt;lines&lt;/code&gt; and when we try to count a key that doesn&amp;rsquo;t exist, like we did previously, we&amp;rsquo;re &lt;em&gt;now&lt;/em&gt; anticipating a &lt;code&gt;KeyError&lt;/code&gt; and will set the initial count to 1, then it can continue to loop-through and count the word, which now exists, so it can be incremented up.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# empty list
word_counts = {}

# exception handling
for word in lines:
    try:
        word_counts[word] += 1
    except KeyError:
        word_counts[word] = 1

# call word_counts
# abbreviated for space
word_counts

{&#39;This&#39;: 1,
 &#39;table&#39;: 3,
 &#39;highlights&#39;: 1,
 &amp;quot;538&#39;s&amp;quot;: 1,
 &#39;new&#39;: 1,
 &#39;NBA&#39;: 3,
 &#39;statistic,&#39;: 1,
 &#39;RAPTOR,&#39;: 1,
 &#39;in&#39;: 2,
 &#39;addition&#39;: 1,
 &#39;to&#39;: 3,
 &#39;the&#39;: 5,
 &#39;more&#39;: 2,
 ...
 &#39;top-100&#39;: 1,
 &#39;players&#39;: 2,
 &#39;who&#39;: 1,
 &#39;have&#39;: 1,
 &#39;played&#39;: 1,
 &#39;at&#39;: 1,
 &#39;least&#39;: 1,
 &#39;1,000&#39;: 1,
 &#39;minutes&#39;: 2,
 &#39;RAPTOR&#39;: 1}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, there are other ways to achieve the above:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# use conditional flow
word_counts = {}

for word in lines:
    if word in word_counts:
        word_counts[word] += 1
    else:
        word_counts[word] = 1
        
# use get
for word in lines:
    previous_count = word_counts.get(word, 0)
    word_counts[word] = previous_count + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s where the author makes the case for &lt;code&gt;defaultdict&lt;/code&gt;, arguing that the two aforementioned approaches are unweildy. We&amp;rsquo;ll come back full circle to try our first approach, using &lt;code&gt;defaultdict&lt;/code&gt; instead of the traditional &lt;code&gt;dict&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;defaultdict&lt;/code&gt; is a subclass of &lt;code&gt;dict&lt;/code&gt; and must be imported from &lt;code&gt;collections&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import defaultdict

word_counts = defaultdict(int)

for word in lines:
    word_counts[word] += 1
    
# we no longer get a KeyError
# abbreviated for space
defaultdict(int,
            {&#39;This&#39;: 1,
             &#39;table&#39;: 3,
             &#39;highlights&#39;: 1,
             &amp;quot;538&#39;s&amp;quot;: 1,
             &#39;new&#39;: 1,
             &#39;NBA&#39;: 3,
             &#39;statistic,&#39;: 1,
             &#39;RAPTOR,&#39;: 1,
             &#39;in&#39;: 2,
             &#39;addition&#39;: 1,
             &#39;to&#39;: 3,
             &#39;the&#39;: 5,
             &#39;more&#39;: 2,
             ...
             &#39;top-100&#39;: 1,
             &#39;players&#39;: 2,
             &#39;who&#39;: 1,
             &#39;have&#39;: 1,
             &#39;played&#39;: 1,
             &#39;at&#39;: 1,
             &#39;least&#39;: 1,
             &#39;1,000&#39;: 1,
             &#39;minutes&#39;: 2,
             &#39;RAPTOR&#39;: 1})

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unlike a regular dictionary, when &lt;code&gt;defaultdict&lt;/code&gt; tries to look up a key it doesn&amp;rsquo;t contain, it&amp;rsquo;ll automatically add a value for it using the argument we provided when we first created the &lt;code&gt;defaultdict&lt;/code&gt;. If you see above, we entered an &lt;code&gt;int&lt;/code&gt; as the argument, which allows it to automatically &lt;em&gt;add an integer value&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you want your &lt;code&gt;defaultdict&lt;/code&gt; to have &lt;code&gt;values&lt;/code&gt; be &lt;code&gt;lists&lt;/code&gt;, you can pass a &lt;code&gt;list&lt;/code&gt; as argument. Then, when you &lt;code&gt;append&lt;/code&gt; a value, it is automatically contained in a &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dd_list = defaultdict(list) # defaultdict(list, {})

dd_list[2].append(1)        # defaultdict(list, {2: [1]})

dd_list[4].append(&#39;string&#39;) # defaultdict(list, {2: [1], 4: [&#39;string&#39;]})

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also pass a &lt;code&gt;dict&lt;/code&gt; into &lt;code&gt;defaultdict&lt;/code&gt;, ensuring that all appended values are contained in a &lt;code&gt;dict&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dd_dict = defaultdict(dict) # defaultdict(dict, {})

# match key-with-value
dd_dict[&#39;first_name&#39;] = &#39;lebron&#39; # defaultdict(dict, {&#39;first_name&#39;: &#39;lebron&#39;})
dd_dict[&#39;last_name&#39;] = &#39;james&#39;   

# match key with dictionary containing another key-value pair
dd_dict[&#39;team&#39;][&#39;city&#39;] = &#39;Los Angeles&#39;

# defaultdict(dict,
#            {&#39;first_name&#39;: &#39;lebron&#39;,
#             &#39;last_name&#39;: &#39;james&#39;,
#             &#39;team&#39;: {&#39;city&#39;: &#39;Los Angeles&#39;}})

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;application-grouping-with-defaultdict&#34;&gt;Application: Grouping with defaultdict&lt;/h4&gt;
&lt;p&gt;The follow example is from 
&lt;a href=&#34;https://realpython.com/python-defaultdict/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Real Python&lt;/a&gt;, a fantastic resource for all things Python.&lt;/p&gt;
&lt;p&gt;It is common to use &lt;code&gt;defaultdict&lt;/code&gt; to group items in a sequence or collection, setting the initial parameter (aka &lt;code&gt;.default_factory&lt;/code&gt;) set to &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dep = [(&#39;Sales&#39;, &#39;John Doe&#39;),
       (&#39;Sales&#39;, &#39;Martin Smith&#39;),
       (&#39;Accounting&#39;, &#39;Jane Doe&#39;),
       (&#39;Marketing&#39;, &#39;Elizabeth Smith&#39;),
       (&#39;Marketing&#39;, &#39;Adam Doe&#39;)]
       
from collections import defaultdict

dep_dd = defaultdict(list)

for department, employee in dep:
    dep_dd[department].append(employee)
    
dep_dd
#defaultdict(list,
#            {&#39;Sales&#39;: [&#39;John Doe&#39;, &#39;Martin Smith&#39;],
#             &#39;Accounting&#39;: [&#39;Jane Doe&#39;],
#             &#39;Marketing&#39;: [&#39;Elizabeth Smith&#39;, &#39;Adam Doe&#39;]})

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happens when you have &lt;strong&gt;duplicate&lt;/strong&gt; entries? We&amp;rsquo;re jumping ahead slightly to use &lt;code&gt;set&lt;/code&gt; handle duplicates and only group unique entries:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# departments with duplicate entries
dep = [(&#39;Sales&#39;, &#39;John Doe&#39;),
       (&#39;Sales&#39;, &#39;Martin Smith&#39;),
       (&#39;Accounting&#39;, &#39;Jane Doe&#39;),
       (&#39;Marketing&#39;, &#39;Elizabeth Smith&#39;),
       (&#39;Marketing&#39;, &#39;Elizabeth Smith&#39;),
       (&#39;Marketing&#39;, &#39;Adam Doe&#39;),
       (&#39;Marketing&#39;, &#39;Adam Doe&#39;),
       (&#39;Marketing&#39;, &#39;Adam Doe&#39;)]

# use defaultdict with set
dep_dd = defaultdict(set)

# set object has no attribute &#39;append&#39;
# so use &#39;add&#39; to achieve the same effect
for department, employee in dep:
    dep_dd[department].add(employee)
    
dep_dd
#defaultdict(set,
#            {&#39;Sales&#39;: {&#39;John Doe&#39;, &#39;Martin Smith&#39;},
#             &#39;Accounting&#39;: {&#39;Jane Doe&#39;},
#             &#39;Marketing&#39;: {&#39;Adam Doe&#39;, &#39;Elizabeth Smith&#39;}})
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;application-accumulating-with-defaultdict&#34;&gt;Application: Accumulating with defaultdict&lt;/h4&gt;
&lt;p&gt;Finally, we&amp;rsquo;ll use &lt;code&gt;defaultdict&lt;/code&gt; to accumulate values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;incomes = [(&#39;Books&#39;, 1250.00),
           (&#39;Books&#39;, 1300.00),
           (&#39;Books&#39;, 1420.00),
           (&#39;Tutorials&#39;, 560.00),
           (&#39;Tutorials&#39;, 630.00),
           (&#39;Tutorials&#39;, 750.00),
           (&#39;Courses&#39;, 2500.00),
           (&#39;Courses&#39;, 2430.00),
           (&#39;Courses&#39;, 2750.00),]

# enter float as argument        
dd = defaultdict(float)  # collections.defaultdict

# defaultdict(float, {&#39;Books&#39;: 3970.0, &#39;Tutorials&#39;: 1940.0, &#39;Courses&#39;: 7680.0})
for product, income in incomes:
    dd[product] += income
    
for product, income in dd.items():
    print(f&amp;quot;Total income for {product}: ${income:,.2f}&amp;quot;)

# Total income for Books: $3,970.00
# Total income for Tutorials: $1,940.00
# Total income for Courses: $7,680.00
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can see that &lt;code&gt;defaultdict&lt;/code&gt; and &lt;code&gt;dictionaries&lt;/code&gt; can be handy for grouping, counting and accumulating values in a column. We&amp;rsquo;ll come back to revisit these foundational concepts once the data science applications are clearer.&lt;/p&gt;
&lt;p&gt;In summary, &lt;code&gt;dictionaries&lt;/code&gt; and &lt;code&gt;defaultdict&lt;/code&gt; can be used to group items, accumulate items and count items. Both can be used even when the &lt;code&gt;key&lt;/code&gt; doesn&amp;rsquo;t (yet) exist, but its &lt;code&gt;defaultdict&lt;/code&gt; handles this more succintly. For now, we&amp;rsquo;ll stop here and proceed to the next topic: counters.&lt;/p&gt;
&lt;h2 id=&#34;counters&#34;&gt;Counters&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Counter&lt;/code&gt; is a &lt;code&gt;dict&lt;/code&gt; &lt;strong&gt;subclass&lt;/strong&gt; for counting hashable objects (see 
&lt;a href=&#34;https://docs.python.org/3/library/collections.html#collections.Counter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;doc&lt;/a&gt;).
Back to our example in the previous section, we can use &lt;code&gt;Counter&lt;/code&gt; instead of &lt;code&gt;dict&lt;/code&gt;, specifically for counting:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import Counter

# we can count the letters in this paragraph
count_letters = Counter(&amp;quot;This table highlights 538&#39;s new NBA statistic, RAPTOR, in addition to the more established Wins Above Replacement (WAR). An extra column, Playoff (P/O) War, is provided to highlight stars performers in the post-season, when the stakes are higher. The table is limited to the top-100 players who have played at least 1,000 minutes minutes the table Wins NBA NBA RAPTOR more players&amp;quot;)

# call count_letters
count_letters

# returns
Counter({&#39;T&#39;: 4,
         &#39;h&#39;: 19,
         &#39;i&#39;: 22,
         &#39;s&#39;: 24,
         &#39; &#39;: 61,
         &#39;t&#39;: 29,
         &#39;a&#39;: 20,
         &#39;b&#39;: 5,
         &#39;l&#39;: 14,
         &#39;e&#39;: 35,
         &#39;g&#39;: 5,
         &#39;5&#39;: 1,
         &#39;3&#39;: 1,
         &#39;8&#39;: 1,
         &amp;quot;&#39;&amp;quot;: 1,
         &#39;n&#39;: 13,
         &#39;w&#39;: 3,
         &#39;N&#39;: 3,
         &#39;B&#39;: 3,
         &#39;A&#39;: 8,
         &#39;c&#39;: 3,
         &#39;,&#39;: 6,
         &#39;R&#39;: 6,
         &#39;P&#39;: 4,
         &#39;O&#39;: 3,
         &#39;d&#39;: 7,
         &#39;o&#39;: 15,
         &#39;m&#39;: 8,
         &#39;r&#39;: 13,
         &#39;W&#39;: 4,
         &#39;v&#39;: 3,
         &#39;p&#39;: 8,
         &#39;(&#39;: 2,
         &#39;)&#39;: 2,
         &#39;.&#39;: 2,
         &#39;x&#39;: 1,
         &#39;u&#39;: 3,
         &#39;y&#39;: 4,
         &#39;f&#39;: 3,
         &#39;/&#39;: 1,
         &#39;-&#39;: 2,
         &#39;k&#39;: 1,
         &#39;1&#39;: 2,
         &#39;0&#39;: 5})

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Counter&lt;/code&gt; very easily did what &lt;code&gt;defaultdict(int)&lt;/code&gt; did previously. We can even call the &lt;code&gt;most_common&lt;/code&gt; method to get the most common letters:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# get the thirteen most common letters
for letter, count in count_letters.most_common(13):
   print(letter, count)
   
# returns - 13 items
  61
e 35
t 29
s 24
i 22
a 20
h 19
o 15
l 14
n 13
r 13
A 8
m 8
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sets&#34;&gt;Sets&lt;/h2&gt;
&lt;p&gt;We had a glimpse of &lt;code&gt;set&lt;/code&gt; previously. There are two things the author emphasize with &lt;code&gt;set&lt;/code&gt;. First, they&amp;rsquo;re faster than lists for checking membership:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
lines_list = [&amp;quot;This table highlights 538&#39;s new NBA statistic, RAPTOR, in addition to the more established Wins Above Replacement (WAR). An extra column, Playoff (P/O) War, is provided to highlight stars performers in the post-season, when the stakes are higher. The table is limited to the top-100 players who have played at least 1,000 minutes minutes the table Wins NBA NBA RAPTOR more players&amp;quot;]

&amp;quot;zip&amp;quot; in lines_list # False, but have to check every element

lines_set = set(lines_list)
type(lines_set) # set

&amp;quot;zip&amp;quot; in lines_set # Very fast to check
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because this was an arbitrary example, it&amp;rsquo;s not obvious that checking membership in &lt;code&gt;set&lt;/code&gt; is faster than &lt;code&gt;list&lt;/code&gt; so we&amp;rsquo;ll take the author&amp;rsquo;s word for it.&lt;/p&gt;
&lt;p&gt;The second highlight for &lt;code&gt;set&lt;/code&gt; is to find &lt;strong&gt;distinct&lt;/strong&gt; items in a collection:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number_list = [1,2,3,1,2,3] # list with six items
item_set = set(number_list) # turn it into a set

item_set # now has three items {1, 2, 3}
turn_into_list = list(item_set) # turn into distinct item list
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;controlflow&#34;&gt;Controlflow&lt;/h2&gt;
&lt;p&gt;I believe the main take away from this section is to briefly highlight the various control flows possible.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a traditional if-else statement:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = 5

if x % 2 == 0:
    parity = &amp;quot;even&amp;quot;
else:
    parity = &amp;quot;odd&amp;quot;
    
parity # &#39;odd&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The author may, from time to time, opt to use a shorter &lt;em&gt;ternary&lt;/em&gt; if-else one-liner, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;parity = &amp;quot;even&amp;quot; if x % 2 == 0 else &amp;quot;odd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The author points out that while &lt;strong&gt;while-loops&lt;/strong&gt; exist:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = 0

while x &amp;lt; 10:
    print(f&amp;quot;{x} is less than 10&amp;quot;)
    x += 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;for&lt;/strong&gt; and &lt;strong&gt;in&lt;/strong&gt; will be used more often (the code below is both shorter and more readable):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for x in range(10):
    print(f&amp;quot;{x} is less than 10&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ll also &lt;strong&gt;note&lt;/strong&gt; that &lt;code&gt;range(x)&lt;/code&gt; also goes up to &lt;code&gt;x-1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, more complex logic &lt;em&gt;is&lt;/em&gt; possible, although we&amp;rsquo;ll have to revisit exactly when more complex logic is used in a data science context.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for x in range(10):
    if x == 3:
        continue
    if x == 5:
        break
    print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;truthiness&#34;&gt;Truthiness&lt;/h2&gt;
&lt;p&gt;Booleans in Python, &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt;, are only have the first letter capitalized. And Python uses &lt;code&gt;None&lt;/code&gt; to indicate a nonexistent value. We&amp;rsquo;ll try to handle the exception below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1 &amp;lt; 2 # True (not TRUE)
1 &amp;gt; 2 # False (not FALSE)

x = 1
try:
    assert x is None
except AssertionError:
    print(&amp;quot;There was an AssertionError because x is not &#39;None&#39;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A major takeaway for me is the concept of &amp;ldquo;truthy&amp;rdquo; and &amp;ldquo;falsy&amp;rdquo;. The first thing to note is that anything &lt;em&gt;after&lt;/em&gt; &lt;code&gt;if&lt;/code&gt; implies &amp;ldquo;is true&amp;rdquo; which is why if-statements can be used to &lt;strong&gt;check&lt;/strong&gt; is a list, string or dictionary is empty:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [1]
y = []

# if x...is true
# Truthy
if x:
    print(&amp;quot;Truthy&amp;quot;)
else:
    print(&amp;quot;Falsy&amp;quot;)

# if y...is true    
# Falsy
print(&amp;quot;Truthy&amp;quot;) if y else print(&amp;quot;Falsy&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;rsquo;ll note the &lt;em&gt;ternary&lt;/em&gt; version here is slightly less readable. Here are more examples to understand &amp;ldquo;truthiness&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;## Truthy example

# create a function that returns a string
def some_func():
    return &amp;quot;a string&amp;quot;
    
# set s to some_func 
s = some_func()

# use if-statement to check truthiness - returns &#39;a&#39;
if s:
    first_char = s[0]
else:
    first_char = &amp;quot;&amp;quot;
    
## Falsy example

# another function return empty string
def another_func():
    return &amp;quot;&amp;quot;

# set another_func to y (falsy example)
y = another_func()

# when &#39;truthy&#39; return second value,
# when &#39;falsy&#39; return first value
first_character = y and y[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, the author brings up &lt;strong&gt;all&lt;/strong&gt; and &lt;strong&gt;any&lt;/strong&gt; functions. The former returns &lt;code&gt;True&lt;/code&gt; when &lt;em&gt;every&lt;/em&gt; element is truthy; the latter returns &lt;code&gt;True&lt;/code&gt; when &lt;em&gt;at least one&lt;/em&gt; element is truthy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
all([True, 1, {3}]) # True

all([True, 1, {}])  # False

any([True, 1, {}])  # True

all([])             # True

any([])             # False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;rsquo;ll note that the truthiness &lt;strong&gt;within&lt;/strong&gt; the list is being evaluated. So &lt;code&gt;all([])&lt;/code&gt; suggests there are no &amp;lsquo;falsy&amp;rsquo; elements within the list, because it&amp;rsquo;s empty, so it evaluates to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On the other hand, &lt;code&gt;any([])&lt;/code&gt; suggests not even one (or at least one) element is &amp;lsquo;truthy&amp;rsquo;, because the list is empty, so it evaluates to &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;sorting&#34;&gt;Sorting&lt;/h2&gt;
&lt;p&gt;Sorting is generally straight forward with either &lt;code&gt;sorted()&lt;/code&gt; or &lt;code&gt;sort()&lt;/code&gt;. Here&amp;rsquo;s a more complex example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# create a list containing one paragraph
lines = [&amp;quot;This table highlights 538&#39;s new NBA statistic, RAPTOR, in addition to the more established Wins Above Replacement (WAR). An extra column, Playoff (P/O) War, is provided to highlight stars performers in the post-season, when the stakes are higher. The table is limited to the top-100 players who have played at least 1,000 minutes minutes the table Wins NBA NBA RAPTOR more players&amp;quot;]

# split paragraph into individual words
lines = &amp;quot; &amp;quot;.join(lines_list).split()

# import Counter
from collections import Counter

# count words in lines
word_counts = Counter(lines)

# sort words and count from largest to smallest
wc = sorted(word_counts.items(),
            key=lambda x: x[1],   # key line
            reverse=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s another example involving coffee:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
coffee_prices = {
   &#39;cappuccino&#39;: 54,
   &#39;latte&#39;: 56,
   &#39;espresso&#39;: 72,
   &#39;americano&#39;: 48,
   &#39;cortado&#39;: 41
}

# .items() access dictionary key-value pairs
# key is what the sorted() function will sort by
# reverse indicates descending or ascending 
sorted(coffee_prices.items(), key=lambda x: x[1], reverse=False)

# [(&#39;cortado&#39;, 41),
# (&#39;americano&#39;, 48),
# (&#39;cappuccino&#39;, 54),
# (&#39;latte&#39;, 56),
# (&#39;espresso&#39;, 72)]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;list_comprehensions&#34;&gt;list_comprehensions&lt;/h2&gt;
&lt;p&gt;Previously, we saw &lt;strong&gt;if-statements&lt;/strong&gt; expressed in one-line, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;y = []

# Falsy
print(&amp;quot;Truthy&amp;quot;) if y else print(&amp;quot;Falsy&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also write &lt;strong&gt;for-loops&lt;/strong&gt; in one-line. And thats a way to think about &lt;code&gt;list comprehensions&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# traditional for-loop
num = []
for x in range(5):
    if x % 2 == 0:
        num.append(x)

num # call num

# list comprehension, provides the same thing
[x for x in range(5) if x % 2 == 0]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are some examples from Data Science from Scratch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# [0, 2, 4]
even_numbers = [x for x in range(5) if x % 2 == 0] 

# [0, 1, 4, 9, 16]
squares = [x * x for x in range(5)]

# [0, 4, 16]
even_squares = [x * x for x in even_numbers]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://dbader.org/blog/list-dict-set-comprehensions-in-python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dan Bader provides&lt;/a&gt; a helpful way to conceptualizing &lt;code&gt;list comprehensions&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(values) = [ (expression) for (item) in (collections) ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A good way to understand &lt;code&gt;list comprehensions&lt;/code&gt; is to de-construct it back to a regular for-loop:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# recreation of even_numbers
even_bracket = []
for x in range(5):
    if x % 2 == 0:
       even_bracket.append(x)
       
# recreation of squares
square_bracket = []
for x in range(5):
    square_bracket.append(x * x)

# recreate even_squares
square_even_bracket = []
for x in even_bracket:
    square_even_bracket.append(x * x)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;List comprehensions also allow for &lt;strong&gt;filtering with conditions&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# traditional for-loop
filtered_bracket = []

for x in range(10):
    if x &amp;gt; 5:
        filtered_bracket.append(x * x)
        
# list comprehension
filtered_comprehension = [x * x
                          for x in range(10)
                          if x &amp;gt; 5]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key take-away here is that &lt;code&gt;list comprehensions&lt;/code&gt; follow a pattern:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;values = [expression
          for item in collection
          if condition]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python also supports dictionaries or sets comprehension, although we&amp;rsquo;ll have to revisit this post as to &lt;strong&gt;why&lt;/strong&gt; we would want to do this in a data wrangling, transformation or analysis context.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
square_dict = {x: x * x for x in range(5)}

# {1}
square_set = {x * x for x in [1,-1]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, comprehensions can include nested for-loops:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pairs = [(x,y)
         for x in range(10)
         for y in range(10)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will expect to use &lt;code&gt;list comprehensions&lt;/code&gt; often, so we&amp;rsquo;ll revisit this section as we see more applications in context.&lt;/p&gt;
&lt;h4 id=&#34;map-filter-reduce-partial&#34;&gt;Map, Filter, Reduce, Partial&lt;/h4&gt;
&lt;p&gt;In the first edition of this book the author introduced these functions, but has since reached enlightenment ð§, he states:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;On my journey toward enlightenment I have realized that these functions (i.e., map, filter, reduce, partial) are best avoided, and their uses in the book have been replaced with list comprehensions, for loops and other, more Pythonic constructs.&amp;rdquo; (p.36)&lt;/p&gt;
&lt;p&gt;He&amp;rsquo;s being facetious, but I was intrigued anyways. So here&amp;rsquo;s an example replacing &lt;strong&gt;map&lt;/strong&gt; with &lt;strong&gt;list comprehensions&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# create list of names
names = [&#39;Russel&#39;, &#39;Kareem&#39;, &#39;Jordan&#39;, &#39;James&#39;]

# use map function to loop over names and apply an anonymous function
greeted = map(lambda x: &#39;Hi &#39; + x, names)

# map returns an iterator (see also lazy evaluation)
print(greeted) # &amp;lt;map object at 0x7fc667c81f40&amp;gt;

# because lazy evaluation, won&#39;t do anything unless iterate over it
for name in greeted:
     print(name)

#Hi Russel
#Hi Kareem
#Hi Jordan
#Hi James

## List Comprehension way to do this operation
greeted2 = [&#39;Hi &#39; + name for name in names]

# non-lazy evaluation (or eager)
print(greeted2) # [&#39;Hi Russel&#39;, &#39;Hi Kareem&#39;, &#39;Hi Jordan&#39;, &#39;Hi James&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s another example replacing &lt;strong&gt;filter&lt;/strong&gt; with &lt;strong&gt;list comprehensions&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# create list of integers
numbers = [13, 4, 18, 35]

# filter creates an interator
div_by_5 = filter(lambda num: num % 5 == 0, numbers)

print(div_by_5) # &amp;lt;filter object at 0x7fc667c9ad30&amp;gt;
print(list(div_by_5)) # must convert iterator into a list - [35]

# using list comprehension to achieve the same thing
another_div_by_5 = [num for num in numbers if num % 5 == 0]

# lists do not use lazy evaluation, so it will print out immediately
print(another_div_by_5) # [35]

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;assert&#34;&gt;Assert&lt;/h2&gt;
&lt;h4 id=&#34;automated-testing-and-assert&#34;&gt;Automated Testing and Assert&lt;/h4&gt;
&lt;p&gt;One of the many cool things about Data Science from Scratch (by Joel Grus) is his use of assertions as a way to &amp;ldquo;test&amp;rdquo; code. This is a software engineering practice (see 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;test-driven development&lt;/a&gt;) that may not be as pervasive in data science, but I suspect, will see 
&lt;a href=&#34;https://www.kdnuggets.com/2020/08/unit-test-data-pipeline-thank-yourself-later.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;growth in usage&lt;/a&gt; and will soon become best practice, if we&amp;rsquo;re not 
&lt;a href=&#34;https://www.datacamp.com/courses/unit-testing-for-data-science-in-python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;already there&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While there are testing frameworks that deserve their own chapters, throughout &lt;em&gt;this&lt;/em&gt; book, fortunately the author has provided a simple way to test by way of the &lt;code&gt;assert&lt;/code&gt; key word, here&amp;rsquo;s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# create function to return the largest value in a list
def largest_item(x):
    return max(x)
    
# assert that our function is working properly
# we will see &#39;nothing&#39; if things are working properly
assert largest_item([10, 20, 5, 40, 99]) == 99

# an AssertionError will pop up if any other value is used
assert largest_item([10, 20, 5, 40, 99]) == 40
---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
&amp;lt;ipython-input-21-12dc291d091e&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 assert largest_item([10, 20, 5, 40, 99]) == 40

# we can also create an assertion for input values
def largest_item(x):
    assert x, &amp;quot;empty list has no largest value&amp;quot;
    return max(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;object-oriented_programming&#34;&gt;Object-Oriented_Programming&lt;/h2&gt;
&lt;p&gt;Object-oriented programming could be it&amp;rsquo;s own chapter, so we won&amp;rsquo;t try to shoot for comprehensiveness here. Instead, we&amp;rsquo;ll try to understand it&amp;rsquo;s basics and the &lt;code&gt;assert&lt;/code&gt; function is going to help us understand it even better.&lt;/p&gt;
&lt;p&gt;Object-oriented programming could be it&amp;rsquo;s own chapter, so we&amp;rsquo;ll go over a toy example from the book and tie it to the previous section on assert.&lt;/p&gt;
&lt;p&gt;First, we&amp;rsquo;ll create a &lt;strong&gt;class&lt;/strong&gt; &lt;code&gt;CountingClicker&lt;/code&gt; that initializes at count 0, has several methods including a &lt;code&gt;click&lt;/code&gt; method to increment the count, a &lt;code&gt;read&lt;/code&gt; method to read the present number of count and a &lt;code&gt;reset&lt;/code&gt; method to reset the count back to 0.&lt;/p&gt;
&lt;p&gt;Then we&amp;rsquo;ll write some &lt;code&gt;assert&lt;/code&gt; statements to test that our class method is working as intended.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll &lt;strong&gt;note&lt;/strong&gt; that there are private methods and public methods. Private methods have the &lt;strong&gt;double underscore&lt;/strong&gt; (aka dunder methods), they&amp;rsquo;re generally not called, but python won&amp;rsquo;t stop you. Then we have the more familiar &lt;em&gt;public&lt;/em&gt; methods. Also, all the methods have to be written &lt;strong&gt;within&lt;/strong&gt; the scope of the class &lt;code&gt;CountingClicker&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class CountingClicker:
    &amp;quot;&amp;quot;&amp;quot;A class can/should have a docstring, just like a function&amp;quot;&amp;quot;&amp;quot;
    def __init__(self, count = 0):
        self.count = count
    def __repr__(self):
        return f&amp;quot;CountingClicker(count = {self.count})&amp;quot;
    def click(self, num_times = 1):
        &amp;quot;&amp;quot;&amp;quot;Click the clicker some number of times.&amp;quot;&amp;quot;&amp;quot;
        self.count += num_times
    def read(self):
        return self.count
    def reset(self):
        self.count = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After we&amp;rsquo;ve written the class and associated methods, we can write &lt;code&gt;assert&lt;/code&gt; statements to test them. You&amp;rsquo;ll want to write the below statements &lt;strong&gt;in this order&lt;/strong&gt; because we&amp;rsquo;re testing the &lt;em&gt;behavior&lt;/em&gt; of our &lt;code&gt;CountingClicker&lt;/code&gt; class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;clicker = CountingClicker()

assert clicker.read() == 0, &amp;quot;clicker should start with count 0&amp;quot;

clicker.click()

clicker.click()

assert clicker.read() == 2, &amp;quot;after two clicks, clicker should have count of 2&amp;quot;

clicker.reset()

assert clicker.read() == 0, &amp;quot;after reset, clicker should be back to 0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In summary, we created a class &lt;code&gt;CountingClicker&lt;/code&gt; whose methods allow it to display in text (&lt;code&gt;__repr__&lt;/code&gt;), &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;reset&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All these methods belong to the &lt;code&gt;class&lt;/code&gt; CountingClicker and will be passed along to new instances of classes - we have yet to see what this will look like as it relates to tasks in data science so we&amp;rsquo;ll revisit this post when we have updates on the applied end.&lt;/p&gt;
&lt;h2 id=&#34;iterables_and_generators&#34;&gt;Iterables_and_Generators&lt;/h2&gt;
&lt;h3 id=&#34;a-brief-forey-into-lazy-evaluation&#34;&gt;A Brief Forey into Lazy Evaluation&lt;/h3&gt;
&lt;p&gt;A key concept that is introduced when discussing the creation of &amp;ldquo;generators&amp;rdquo; is using &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt; to &lt;strong&gt;iterate&lt;/strong&gt; over generators (like lists), but &lt;strong&gt;lazily on demand&lt;/strong&gt;. This is formally called 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Lazy_evaluation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lazy evaluation&lt;/a&gt; or &amp;lsquo;call-by-need&amp;rsquo; which delays the evaluation of an expression until the value is needed. We can think of this as a form of optimization - avoiding repeating function calls when not needed.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a graphic borrowed from 
&lt;a href=&#34;https://towardsdatascience.com/what-is-lazy-evaluation-in-python-9efb1d3bfed0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Xiaoxu Gao&lt;/a&gt;, check out her post 
&lt;a href=&#34;https://towardsdatascience.com/what-is-lazy-evaluation-in-python-9efb1d3bfed0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./lazy_eval.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll create some &lt;code&gt;generators&lt;/code&gt; (customized function/class), but bear in mind that it will be redundant with &lt;code&gt;range()&lt;/code&gt;, both of which illustrate lazy evaluation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example 1: create natural_numbers() function that incrementally counts numbers
def natural_numbers():
    &amp;quot;&amp;quot;&amp;quot;returns 1, 2, 3, ...&amp;quot;&amp;quot;&amp;quot;
    n = 1
    while True:
        yield n
        n += 1

# check it&#39;s type
type(natural_numbers()) # generator

# call it, you get: &amp;lt;generator object natural_numbers at 0x7fb4d787b2e0&amp;gt;
natural_numbers()

# the point of lazy evaluation is that it won&#39;t do anything
# until you iterate over it (but avoid infinite loop with logic breaks)
for i in natural_numbers():
    print(i)
    if i == 37:
        break
print(&amp;quot;exit loop&amp;quot;)

# result 1...37 exit loop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s another example using &lt;code&gt;range&lt;/code&gt;, a built-in python function that also uses &lt;strong&gt;lazy evaluation&lt;/strong&gt;. Even when you call this &lt;code&gt;generator&lt;/code&gt;, it &lt;strong&gt;won&amp;rsquo;t do anything until you iterate over it&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;evens_below_30 = (i for i in range(30) if i % 2 == 0)

# check its type - generator
type(evens_below_30)

# call it, you get: &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x7fb4d70ef580&amp;gt;
# calling it does nothing
evens_below_30

# now iterate over it with for and in - now it does something
# prints: 0, 2, 4, 6 ... 28
for i in evens_below_30:
    print(i)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, this section brings up another important key word &lt;strong&gt;enumerate&lt;/strong&gt; for when we want to iterate over a &lt;code&gt;generator&lt;/code&gt; or &lt;code&gt;list&lt;/code&gt; and get both &lt;code&gt;values&lt;/code&gt; and &lt;code&gt;indices&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# create list of names
names = [&#39;Alice&#39;, &#39;Lebron&#39;, &#39;Kobe&#39;, &#39;Bob&#39;, &#39;Charles&#39;, &#39;Shaq&#39;, &#39;Kenny&#39;]

# Pythonic way
for i, name in enumerate(names):
    print(f&amp;quot;index: {i}, name: {name}&amp;quot;)
    
# NOT pythonic
for i in range(len(names)):
    print(f&amp;quot;index: {i}, name: {names[i]}&amp;quot;)
    
# Also NOT pythonic
i = 0
for name in names:
    print(f&amp;quot;index {i} is {names[i]}&amp;quot;)
    i += 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my view, the &lt;em&gt;pythonic way&lt;/em&gt; is much more readable here.&lt;/p&gt;
&lt;h2 id=&#34;pseudorandomness&#34;&gt;Pseudorandomness&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;random&lt;/code&gt; module is used extensively in data science. Particularly when random numbers need to be generated and we want &lt;strong&gt;reproducible&lt;/strong&gt; results the next time we run our model (in Python its &lt;code&gt;random.seed(x)&lt;/code&gt;, in R its &lt;code&gt;set.seed(x)&lt;/code&gt;), where x is any integer we decide (we just need to be consistent when we revisit our model).&lt;/p&gt;
&lt;p&gt;Technically, the module produces &lt;strong&gt;deterministic&lt;/strong&gt; results, hence it&amp;rsquo;s pseudorandom, here&amp;rsquo;s an example to highlight how the randomness is deterministic:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import random
random.seed(10) # say we use 10

# this variable is from the book
four_randoms = [random.random() for _ in range(4)]

# call four_randoms - same result from Data Science from Scratch
# because the book also uses random.seed(10)
[0.5714025946899135,
 0.4288890546751146,
 0.5780913011344704,
 0.20609823213950174]

# if we use x instead of underscore
# a different set of four &amp;quot;random&amp;quot; numbers is generated
another_four_randoms = [random.random() for x in range(4)]

[0.81332125135732, 
 0.8235888725334455, 
 0.6534725339011758, 
 0.16022955651881965]

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;brief-detour-into-_&#34;&gt;Brief detour into _&lt;/h4&gt;
&lt;p&gt;Reading around from other sources suggests that the underscore &amp;ldquo;_&amp;rdquo; is used in a for loop when we don&amp;rsquo;t care about the variable (its a throwaway) and have no plans to use it, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# prints &#39;hello&#39; five times
for _ in range(5):
    print(&amp;quot;hello&amp;quot;)
    
# we could use x as well
for x in range(5):
    print(&amp;quot;hello&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above example, either &lt;code&gt;_&lt;/code&gt; or &lt;code&gt;x&lt;/code&gt; could have been used and there doesn&amp;rsquo;t seem to be much difference. We could technically &lt;em&gt;call&lt;/em&gt; &lt;code&gt;_&lt;/code&gt;, but its considered bad practice:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# bad practice, but prints 0, 1, 2, 3, 4
for _ in range(5):
    print(_)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nevertheless, &lt;code&gt;_&lt;/code&gt; matters in the context of pseudorandomness because it yields a &lt;em&gt;different&lt;/em&gt; result:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import random
random.seed(10)

# these two yield different results, even with the same random.seed(10)
four_randoms = [random.random() for _ in range(4)]
another_four_randoms = [random.random() for x in range(4)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But back to determinism, or pseudorandomness, we need to &lt;em&gt;change&lt;/em&gt; the &lt;code&gt;random.seed(11)&lt;/code&gt;, then back to &lt;code&gt;random.seed(10)&lt;/code&gt; to see this play out:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# new random.seed()
random.seed(11)

# reset four_randoms
four_randoms = [random.random() for _ in range(4)]
[0.4523795535098186, 
0.559772386080496, 
0.9242105840237294, 
0.4656500700997733]

# change to previous random.seed()
random.seed(10)

# reset four_randoms (again)
four_randoms = [random.random() for _ in range(4)]

# get previous result (see above)
[0.5714025946899135,
 0.4288890546751146,
 0.5780913011344704,
 0.20609823213950174]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Other features of the &lt;code&gt;random&lt;/code&gt; module include: &lt;code&gt;random.randrange&lt;/code&gt;, &lt;code&gt;random.shuffle&lt;/code&gt;, &lt;code&gt;random.choice&lt;/code&gt; and &lt;code&gt;random.sample&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;random.randrange(3,6) # choose randomly between [3,4,5]

# random shuffle
one_to_ten = [1,2,3,4,5,6,7,8,9,10]
random.shuffle(one_to_ten)
print(one_to_ten)  # example: [8, 7, 9, 3, 5, 2, 10, 1, 6, 4]
random.shuffle(one_to_ten) # again
print(one_to_ten)  # example: [3, 10, 8, 6, 9, 2, 7, 1, 4, 5]

# random choice
list_of_people = ([&amp;quot;Bush&amp;quot;, &amp;quot;Clinton&amp;quot;, &amp;quot;Obama&amp;quot;, &amp;quot;Biden&amp;quot;, &amp;quot;Trump&amp;quot;])
random.choice(list_of_people) # first time, &#39;Clinton&#39;
random.choice(list_of_people) # second time, &#39;Biden&#39;

# random sample
lottery_numbers = range(60) # get a range of 60 numbers
winning_numbers = random.sample(lottery_numbers, 6) # get a random sample of 6 numbers
winning_numbers # example: [39, 24, 2, 37, 0, 15]

# because its pseudorandom, if you want a different set of 6 numbers
# reset the winning_numbers
winning_numbers = random.sample(lottery_numbers, 6)
winning_numbers # a different set of numbers [8, 12, 19, 34, 23, 49]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;regex&#34;&gt;Regex&lt;/h2&gt;
&lt;h4 id=&#34;regular-expressions&#34;&gt;Regular Expressions&lt;/h4&gt;
&lt;p&gt;Whole books can be written about &lt;code&gt;regular expressions&lt;/code&gt; so the author briefly highlights a couple features that may come in handy, &lt;code&gt;re.match&lt;/code&gt;, &lt;code&gt;re.search&lt;/code&gt;, &lt;code&gt;re.split&lt;/code&gt; and &lt;code&gt;re.sub&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

re_examples = [
    not re.match(&amp;quot;a&amp;quot;, &amp;quot;cat&amp;quot;),                   # re.match check the word cat &#39;starts&#39; letter &#39;a&#39;
    re.search(&amp;quot;a&amp;quot;, &amp;quot;cat&amp;quot;),                      # re.search check if word cat &#39;contains&#39; letter &#39;a&#39;
    not re.search(&amp;quot;c&amp;quot;, &amp;quot;dog&amp;quot;),                  # &#39;dog&#39; does not contain &#39;c&#39;
    3 == len(re.split(&amp;quot;[ab]&amp;quot;, &amp;quot;carbs&amp;quot;)),        # 3 equals length of &amp;quot;carbs&amp;quot; once you split out [ab]
    &amp;quot;R-D-&amp;quot; == re.sub(&amp;quot;[0-9]&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;R2D2&amp;quot;)      # sub out numbers in &#39;R2D2&#39; with hyphen &amp;quot;-&amp;quot;
    ]

# test that all examples are true
assert all(re_examples), &amp;quot;all the regex examples should be True&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final line reviews our understanding of testing (&lt;code&gt;assert&lt;/code&gt;) and truthiness (&lt;code&gt;all&lt;/code&gt;) applied to our regular expression examples, pretty neat.&lt;/p&gt;
&lt;h2 id=&#34;functional_programming&#34;&gt;Functional_Programming&lt;/h2&gt;
&lt;p&gt;see 
&lt;a href=&#34;#list_comprehensions&#34;&gt;List Comprehensions&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;zip-and-argument-unpacking&#34;&gt;zip and Argument Unpacking&lt;/h2&gt;
&lt;p&gt;The author states, &amp;ldquo;it is rare that we&amp;rsquo;ll find this useful.&amp;rdquo; (p.37) So we&amp;rsquo;ll circle back if it comes up.&lt;/p&gt;
&lt;h2 id=&#34;args-and-kwargs&#34;&gt;args and kwargs&lt;/h2&gt;
&lt;p&gt;The authors states, &amp;ldquo;it is more correct and readable if you&amp;rsquo;re explicit about what sorts of arguments your functions require; accordingly, we will use &lt;strong&gt;args&lt;/strong&gt; and &lt;strong&gt;kwargs&lt;/strong&gt; only when we have no other option.&amp;rdquo; (p. 38) So we&amp;rsquo;ll circle back if it comes up.&lt;/p&gt;
&lt;h3 id=&#34;type-annotations&#34;&gt;Type Annotations&lt;/h3&gt;
&lt;h3 id=&#34;how-to-write-type-annotations&#34;&gt;How to Write Type Annotations&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Machine learning as a service</title>
      <link>/post/mlaas/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      <guid>/post/mlaas/</guid>
      <description>&lt;h2 id=&#34;preparing-api-endpoints-in-python-with-flask&#34;&gt;Preparing API endpoints in Python with Flask&lt;/h2&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll create a minimal API endpoint that allows users to make request to calculate the area of a rectangle. The following code sets up an API endpoint locally. We&amp;rsquo;ll import &lt;code&gt;Flask&lt;/code&gt;, a lightweight web application framework and &lt;code&gt;CORS&lt;/code&gt; (cross-origin resource sharing) which allows for various HTTP requests.&lt;/p&gt;
&lt;p&gt;We have two endpoints, one basic &amp;ldquo;hello world&amp;rdquo; and the other calculate the area (i.e., width x height).&lt;/p&gt;
&lt;p&gt;This is saved in &lt;code&gt;App.py&lt;/code&gt;. The command to run this file is &lt;code&gt;$ python3 App.py&lt;/code&gt;. The last line ensures the API is running locally on &lt;code&gt;localhost:5000&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from flask import Flask, request
from flask_cors import CORS, cross_origin
import joblib
import numpy as np 

app = Flask(__name__)
CORS(app)

@app.route(&#39;/&#39;)
def helloworld():
    return &#39;Helloworld&#39;

# Example request: http://localhost:5000/area?w=50&amp;amp;h=3
@app.route(&#39;/area&#39;, methods=[&#39;GET&#39;])
@cross_origin()
def area():
    w = float(request.values[&#39;w&#39;])
    h = float(request.values[&#39;h&#39;])
    return str(w * h)

if __name__ == &#39;__main__&#39;:
    app.run(host=&#39;0.0.0.0&#39;, port=5000, debug=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can just run &lt;code&gt;localhost:5000&lt;/code&gt; and get &lt;code&gt;Helloworld&lt;/code&gt; or make a request to get the &lt;strong&gt;area&lt;/strong&gt;, for example: &lt;code&gt;http://localhost:5000/area?w=20&amp;amp;h=33&lt;/code&gt; (this yeilds 660)&lt;/p&gt;
&lt;h2 id=&#34;training-a-logistic-regression-classification-model&#34;&gt;Training a Logistic Regression classification model&lt;/h2&gt;
&lt;p&gt;After setting up some API endpoints, it&amp;rsquo;s time to create a basic machine learning model. We&amp;rsquo;ll create a logistic regression model to classify flowers from the &lt;strong&gt;Iris&lt;/strong&gt; dataset. This will be created in &lt;em&gt;one&lt;/em&gt; &lt;code&gt;jupyter notebook&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll load all required libraries.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import joblib
import numpy as np
import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we&amp;rsquo;ll load the Iris dataset that comes with scikit learn, &lt;code&gt;sklearn&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iris = load_iris()

# assign two variables at once
X, y = iris[&#39;data&#39;], iris[&#39;target&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ll reshape the data using &lt;code&gt;numpy&lt;/code&gt;, then split the data into training and validation sets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# reshape data for logistic regression
dataset = np.hstack((X, y.reshape(-1,1)))
np.random.shuffle(dataset)

# split data into training, validation sets
X_train, X_test, y_train, y_test = train_test_split(dataset[:, :4],
                                                    dataset[:, 4],
                                                    test_size=0.2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ll then fit a logistic regression model by fitting the training set to the validation set.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;model = LogisticRegression()
model.fit(X_train, y_train)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we&amp;rsquo;ll use the model to predict on the validation data (&lt;em&gt;note&lt;/em&gt;: in a real project a distinction is made between &lt;code&gt;validation&lt;/code&gt; and &lt;code&gt;testing&lt;/code&gt; sets, but we&amp;rsquo;ll blur that distinction for this demo). You can also test the model to make a prediction on a single observation.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also a good idea to get the &lt;code&gt;accuracy_score()&lt;/code&gt;, although it may not be ideal for classification models.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# make a prediction
y_pred = model.predict(X_test)

# get accuracy score
accuracy_score(y_test, y_pred)

# make prediction on single Iris obervation
model.predict([[5.1, 3.5, 1.4, 0.2]])

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we need to use &lt;code&gt;joblib&lt;/code&gt; to save an &lt;code&gt;iris.model&lt;/code&gt; to our directory, this will be used to connect to the API.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;joblib.dump(model, &#39;iris.model&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creating-an-api-endpoint-for-the-logistic-regression-model&#34;&gt;Creating an API endpoint for the Logistic Regression model&lt;/h2&gt;
&lt;p&gt;Back in the &lt;code&gt;App.py&lt;/code&gt; file, we&amp;rsquo;ll &lt;em&gt;add&lt;/em&gt; this section to create an endpoint, the &lt;code&gt;predict_species()&lt;/code&gt; function that loads the &lt;code&gt;iris.model&lt;/code&gt;, then sends a Post request of the four parameter values from &lt;code&gt;iris[&#39;data&#39;]&lt;/code&gt;. The &lt;code&gt;predict_species()&lt;/code&gt; function will then return one of three flower species.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@app.route(&#39;/iris&#39;, methods=[&#39;POST&#39;])
@cross_origin()
def predict_species():
    model = joblib.load(&#39;iris.model&#39;)  #needs to be the correct path
    req = request.values[&#39;param&#39;]
    inputs = np.array(req.split(&#39;,&#39;), dtype=np.float32).reshape(1,-1)
    predict_target = model.predict(inputs)
    if predict_target == 0:
        return &#39;Setosa&#39;
    elif predict_target == 1:
        return &#39;Versicolor&#39;
    else:
        return &#39;Virginica&#39;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;testing-the-api-endpoint-on-postman&#34;&gt;Testing the API endpoint on Postman&lt;/h2&gt;
&lt;p&gt;Finally, we&amp;rsquo;ll use 
&lt;a href=&#34;https://www.postman.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Postman&lt;/a&gt;, a platform for API development. We will &lt;strong&gt;post&lt;/strong&gt; four parameters (i.e., sepal length, sepal width, petal length and petal width) to the API endpoint and expect to receive a name back, either Setosa, Versicolor or Virginica.
In Postman, we&amp;rsquo;ll create a new collection and a new request:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./postman.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The next step from here is to go beyond localhost and deploy the model. We&amp;rsquo;ll explore that in another post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Essential Readings in Data Science</title>
      <link>/post/data_science_canon/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/post/data_science_canon/</guid>
      <description>&lt;h2 id=&#34;data-science-literature-review&#34;&gt;Data Science Literature Review&lt;/h2&gt;
&lt;p&gt;I saw an 
&lt;a href=&#34;https://twitter.com/KellyBodwin/status/1303083136046170112?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;intriguing question&lt;/a&gt; posed on Twitter and some of the responses were illuminating.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./reading_list.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s 
&lt;a href=&#34;https://twitter.com/beeonaposy/status/1191798851289649154?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;another variant&lt;/a&gt; of the question:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./ds_canon.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Although Data Science has a long history, it&amp;rsquo;s considered a relatively young field.&lt;/p&gt;
&lt;p&gt;This space will be used to document recommended reading for new entrants:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Downey, Allen (2016) There is only one test. 
&lt;a href=&#34;http://allendowney.blogspot.com/2016/06/there-is-still-only-one-test.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wickham, Hadley (2014) Tidy Data. The Journal of Statistical Software, vol 59. 
&lt;a href=&#34;https://vita.had.co.nz/papers/tidy-data.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;original&lt;/a&gt;, 
&lt;a href=&#34;https://tidyr.tidyverse.org/articles/tidy-data.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;update&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;James, G., Witten, D., Hastie, T. &amp;amp; Tibshirani, R. (2014) An Introduction to Statistical Learning with Applications in R. 
&lt;a href=&#34;http://faculty.marshall.usc.edu/gareth-james/ISL/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shmueli, G. (2010) To explain or to predict? Statistical Science, 25(3), 289-310. 
&lt;a href=&#34;https://projecteuclid.org/euclid.ss/1294167961&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hernan, M.A., Hsu, J. &amp;amp; Healy, B. (2019) A second chance to get causal inference right: A classification of Data Science tasks. Chance, vol 32(1). 
&lt;a href=&#34;https://amstat.tandfonline.com/doi/full/10.1080/09332480.2019.1579578&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gelman, A., Pasarica, C. &amp;amp; Dodhia, R. (2002) Let&amp;rsquo;s practice what we preach: Turning tables into graphs. The American Statistician, vol 56(2). 
&lt;a href=&#34;https://www.tandfonline.com/doi/abs/10.1198/000313002317572790&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scott Formann-Roe (June, 2012) Understanding the Bias-Variance Tradeoff. 
&lt;a href=&#34;http://scott.fortmann-roe.com/docs/BiasVariance.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Donoho, D (2017) 50 Years of Data Science. Journal of Computational and Graphical Statistics, vol 26(4). 
&lt;a href=&#34;https://www.tandfonline.com/doi/full/10.1080/10618600.2017.1384734&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wilson, G., Bryan, J., Cranston, K., Kitzes, J., Nederbragt, L. &amp;amp; Teal, T.K. (2017) Good enough practices in scientific computing. Plos Computational Biology. 
&lt;a href=&#34;https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005510&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kevin Markham (2019) 100 pandas tricks to save you time and energy. 
&lt;a href=&#34;https://www.dataschool.io/python-pandas-tips-and-tricks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chris Albon&amp;rsquo;s code snippets. 
&lt;a href=&#34;https://chrisalbon.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Howard, J. &amp;amp; Gugger, S. (Aug 4, 2020) Deep Learning for Coders with fastai and PyTorch: AI Applications without a PhD 1st Ed. 
&lt;a href=&#34;https://course.fast.ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brandon Rohrer (Jan, 2020) End-to-End Machine Learning: Complete Course Catalog. 
&lt;a href=&#34;https://end-to-end-machine-learning.teachable.com/p/complete-course-library-full-end-to-end-machine-learning-catalog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;; 
&lt;a href=&#34;https://e2eml.school/blog.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;second source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;John Rauser (Dec, 2016) How Humans See Data 
&lt;a href=&#34;https://www.youtube.com/watch?v=fSgEeI2Xpdc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;youtube&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Broman, K.W. &amp;amp; Woo, K.H. (2018) Data Organization in Spreadsheets. The American Statistician, vol 72(1). 
&lt;a href=&#34;https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1375989&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sculley, D., Holt, G., Golovin, D., Davydov, E., Phillips, T., Ebner, D., Chaudhary, V., &amp;amp; Young, M. (2014) Machine Learning: The High Interest Credit Card of Technical Debt. 
&lt;a href=&#34;https://research.google/pubs/pub43146/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3Blue1Brown for Linear Algebra 
&lt;a href=&#34;https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;youtube&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenny Bryan. Stat 545: Data Wrangling, Exploration and Analysis with R. 
&lt;a href=&#34;https://stat545.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>A collection of weird pretty plots</title>
      <link>/post/ggplot_art/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/post/ggplot_art/</guid>
      <description>&lt;h2 id=&#34;tidytuesday-2020-08-18-week-34&#34;&gt;TidyTuesday 2020-08-18 (week 34)&lt;/h2&gt;
&lt;p&gt;In the process of exploring dendrograms, I create jheri curls :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./plant_dendogram_mess.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another plot with less hair:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./dendrogram_plant.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;I call this Disco Fire:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./disco_fire.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;tidytuesday-2020-10-13-week-42&#34;&gt;TidyTuesday 2020-10-13 (week 42)&lt;/h2&gt;
&lt;p&gt;Dino-turn-Rorschach test&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./density_dino.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;tidytuesday-2020-12-08-week-50&#34;&gt;TidyTuesday 2020-12-08 (week 50)&lt;/h2&gt;
&lt;p&gt;Sunburst (BBC&amp;rsquo;s 100 Influential Women 2020)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./women_bbc_sunburst.png&#34; alt=&#34;women_bbc_sunburst&#34;&gt;&lt;/p&gt;
&lt;p&gt;Circular Packing (experimental)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./circular.png&#34; alt=&#34;circular&#34;&gt;&lt;/p&gt;
&lt;p&gt;Oops, I did it again:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./oops.png&#34; alt=&#34;oops&#34;&gt;&lt;/p&gt;
&lt;p&gt;This one is inspired by 
&lt;a href=&#34;https://twitter.com/geokaramanis/status/1345811125678596096?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Georgios Karamanis&#39;&lt;/a&gt; #genuary submission using the {ggridges} package.&lt;/p&gt;
&lt;p&gt;This is my daughter Milin, still lovely to me :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./milin_fill_y.png&#34; alt=&#34;milin_fill_y&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Custom Functions into the Workflow</title>
      <link>/post/custom-functions/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/custom-functions/</guid>
      <description>


&lt;div id=&#34;context&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;In web development, functions are everywhere and are written to get even the smallest tasks done like allowing users to click on a button or controlling where and how a pop-up modal appears. In data analysis, you can go without using functions as long as youâre working on small scale projects and do not need to share your code with others.&lt;/p&gt;
&lt;p&gt;Moreover, they can make your life a lot easier if you want to avoid copying and pasting your code in a bunch of different places (it also makes your code less error prone and easier to update).&lt;/p&gt;
&lt;p&gt;Functions may require a &lt;strong&gt;slight&lt;/strong&gt; perspective shift for those who arenât familiar. In this post, I want to share how I &lt;strong&gt;snuck&lt;/strong&gt; functions into my workflow for a specific project.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;slipping-custom-functions-into-the-workflow&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slipping Custom Functions into the Workflow&lt;/h2&gt;
&lt;p&gt;The most intuitive way, in my opinion, to introduce functions is to take a certain data pre-processing sequence and &lt;strong&gt;turn it into a function&lt;/strong&gt;. Below, I have a newly created dataframe called &lt;code&gt;net_sales_year_month&lt;/code&gt; that is a dataframe with three columns (net_sales, Year, Month).&lt;/p&gt;
&lt;p&gt;Suppose my objective is to add a &lt;code&gt;Day&lt;/code&gt; and &lt;code&gt;month_year&lt;/code&gt; column, that combines Year, Month and Day (yyyy-mm-dd) into a &lt;code&gt;date&lt;/code&gt; type. The pre-processing task would be to take &lt;code&gt;net_sales_year_month&lt;/code&gt; and use the mutate function to create some new columns.&lt;/p&gt;
&lt;p&gt;This is fine and well if youâre doing this &lt;strong&gt;one time&lt;/strong&gt;, but what if you need to repeat this operation on multiple columns?&lt;/p&gt;
&lt;p&gt;Thatâs where a &lt;strong&gt;custom function&lt;/strong&gt; comes in.&lt;/p&gt;
&lt;p&gt;For example, the function below called &lt;code&gt;create_ymd_function&lt;/code&gt; simply &lt;strong&gt;replaces&lt;/strong&gt; &lt;code&gt;net_sales_year_month&lt;/code&gt; with a generic &lt;code&gt;data&lt;/code&gt;, serving as the function parameter. Now &lt;em&gt;any&lt;/em&gt; dataframe can be used as a parameter for the &lt;code&gt;create_ymd_function&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note the BEFORE and AFTER sections below - they have the same output, but one is a more general function that can be used with other data frames.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Selecting columns to work with (net_sales)
net_sales_year_month &amp;lt;- retail_sales2 %&amp;gt;%
    select(`Net Sales`, Year, Month) %&amp;gt;%
    rename(net_sales = `Net Sales`)

# BEFORE
net_sales_year_month %&amp;gt;%
        mutate(
            Day = 1,
            month_year = paste(Year, Month, Day),
            month_year = month_year %&amp;gt;% ymd(),
            month = month(month_year)
        )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 36 x 6
##    net_sales  Year Month       Day month_year month
##        &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt;
##  1     8284.  2017 January       1 2017-01-01     1
##  2     6388.  2017 February      1 2017-02-01     2
##  3     4589.  2017 March         1 2017-03-01     3
##  4     8533.  2017 April         1 2017-04-01     4
##  5     6237.  2017 May           1 2017-05-01     5
##  6     9370.  2017 June          1 2017-06-01     6
##  7     5959.  2017 July          1 2017-07-01     7
##  8     7740.  2017 August        1 2017-08-01     8
##  9     6732.  2017 September     1 2017-09-01     9
## 10     5327   2017 October       1 2017-10-01    10
## # â¦ with 26 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# AFTER

# Function takes in dataframe to add columns for further analysis
create_ymd_function &amp;lt;- function(data) {
    data %&amp;gt;%
        mutate(
            Day = 1,
            month_year = paste(Year, Month, Day),
            month_year = month_year %&amp;gt;% ymd(),
            month = month(month_year)
        )
}

create_ymd_function(net_sales_year_month)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 36 x 6
##    net_sales  Year Month       Day month_year month
##        &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt;
##  1     8284.  2017 January       1 2017-01-01     1
##  2     6388.  2017 February      1 2017-02-01     2
##  3     4589.  2017 March         1 2017-03-01     3
##  4     8533.  2017 April         1 2017-04-01     4
##  5     6237.  2017 May           1 2017-05-01     5
##  6     9370.  2017 June          1 2017-06-01     6
##  7     5959.  2017 July          1 2017-07-01     7
##  8     7740.  2017 August        1 2017-08-01     8
##  9     6732.  2017 September     1 2017-09-01     9
## 10     5327   2017 October       1 2017-10-01    10
## # â¦ with 26 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;net_sales_year_month_2 &amp;lt;- create_ymd_function(net_sales_year_month)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;generalizing-functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Generalizing Functions&lt;/h2&gt;
&lt;p&gt;Hereâs another example of moving from specific to &lt;em&gt;general&lt;/em&gt; functions.&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;create_line_chart&lt;/code&gt; function, iâm taking in a dataframe, piping into &lt;code&gt;ggplot&lt;/code&gt; and visualizing a simple line graph with &lt;code&gt;geom_line&lt;/code&gt;. Youâll note it is specific because it requires the dataframe to have a column named &lt;code&gt;net_sales&lt;/code&gt; in order to work.&lt;/p&gt;
&lt;p&gt;But what if I wanted to repeat this operation with &lt;code&gt;total_orders&lt;/code&gt; or &lt;code&gt;total_sales&lt;/code&gt; or some other metric?&lt;/p&gt;
&lt;p&gt;Right below, I create a more &lt;em&gt;general&lt;/em&gt; function, &lt;code&gt;create_line_chart_general&lt;/code&gt; that takes in &lt;em&gt;any&lt;/em&gt; dataset and two columns as the function parameter.&lt;/p&gt;
&lt;p&gt;This makes the function much more re-usable. However, it also introduces some &lt;code&gt;R&lt;/code&gt;-specific commands like &lt;code&gt;enquo()&lt;/code&gt; and &lt;code&gt;!!&lt;/code&gt; to &lt;em&gt;quote&lt;/em&gt; and &lt;em&gt;unquote&lt;/em&gt; parameters for use in the function. We are entering &lt;code&gt;lazy evaluation&lt;/code&gt; territory, which Iâll save for another post!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# BEFORE: 

# This function only works for net_sales
# It&amp;#39;s easy to just slip &amp;#39;data&amp;#39; as an argument
# But the aesthetic mapping is done only one a specific column
create_line_chart &amp;lt;- function(data){
    data %&amp;gt;%
    ggplot(aes(x = month_year, y = net_sales)) +
    geom_line()   
}

# AFTER: 

# This is a more generalizable function using enquo() and &amp;#39;!!&amp;#39;
# note columns as function parameters

create_line_chart_general &amp;lt;- function(dataset, col_name_1, col_name_2){
    col_name_1 &amp;lt;- enquo(col_name_1)
    col_name_2 &amp;lt;- enquo(col_name_2)
    dataset %&amp;gt;%
        ggplot(aes(x = !!(col_name_1), y = !!(col_name_2))) +
        geom_line()   
}

# Call the function with data and necessary parameters
create_line_chart_general(net_sales_year_month_2, month_year, net_sales)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-07-30-custom-function_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;more-generalized-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;More Generalized Function&lt;/h2&gt;
&lt;p&gt;This next function is slightly more complicated as it involves creating several more columns. But it can still be generalized using the tools discussed above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_bpc_columns_general &amp;lt;- function(dataset, col_name){
    col_name &amp;lt;- enquo(col_name)
    bpc_data &amp;lt;- dataset %&amp;gt;%
        mutate(
            avg_orders = mean(!!(col_name)),
            # calculate lagging difference
            moving_range = diff(as.zoo(!!(col_name)), na.pad=TRUE),
            # get absolute value
            moving_range = abs(moving_range),
            # change NA to 0
            moving_range = ifelse(row_number()==1, 0, moving_range),
            avg_moving_range = mean(moving_range),
            lnpl = avg_orders - (2.66*avg_moving_range),
            lower_25 = avg_orders - (1.33*avg_moving_range),
            upper_25 = avg_orders + (1.33*avg_moving_range),
            unpl = avg_orders + (2.66*avg_moving_range)
        )
    
    return(bpc_data)
}

create_bpc_columns_general(net_sales_year_month_2, net_sales)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 36 x 13
##    net_sales  Year Month   Day month_year month avg_orders moving_range
##        &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;
##  1     8284.  2017 Januâ¦     1 2017-01-01     1      9058.           0 
##  2     6388.  2017 Febrâ¦     1 2017-02-01     2      9058.        1896.
##  3     4589.  2017 March     1 2017-03-01     3      9058.        1798.
##  4     8533.  2017 April     1 2017-04-01     4      9058.        3944.
##  5     6237.  2017 May       1 2017-05-01     5      9058.        2295.
##  6     9370.  2017 June      1 2017-06-01     6      9058.        3132.
##  7     5959.  2017 July      1 2017-07-01     7      9058.        3410.
##  8     7740.  2017 Auguâ¦     1 2017-08-01     8      9058.        1781.
##  9     6732.  2017 Septâ¦     1 2017-09-01     9      9058.        1008.
## 10     5327   2017 Octoâ¦     1 2017-10-01    10      9058.        1405.
## # â¦ with 26 more rows, and 5 more variables: avg_moving_range &amp;lt;dbl&amp;gt;,
## #   lnpl &amp;lt;dbl&amp;gt;, lower_25 &amp;lt;dbl&amp;gt;, upper_25 &amp;lt;dbl&amp;gt;, unpl &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;net_sales_bpc_data &amp;lt;- create_bpc_columns_general(net_sales_year_month_2, net_sales)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;generalized-functions-for-visualization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Generalized Functions for Visualization&lt;/h2&gt;
&lt;p&gt;This was the trickiest to convert into a general function and Iâm still on the fence as to whether this is generalizable. In one sense, it &lt;em&gt;is&lt;/em&gt; generalizable as I tested this &lt;code&gt;create_bpc_visualization_general&lt;/code&gt; function on another column aside from &lt;code&gt;net_sales&lt;/code&gt;, but it did require that I &lt;em&gt;know&lt;/em&gt; that other columns in the dataset are: &lt;code&gt;avg_orders&lt;/code&gt;, &lt;code&gt;unpl&lt;/code&gt;, &lt;code&gt;lnpl&lt;/code&gt;, &lt;code&gt;upper_25&lt;/code&gt; and &lt;code&gt;lower_25&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I have more exploring to do around quoting and unquoting &lt;code&gt;enquo()&lt;/code&gt;, &lt;code&gt;quos()&lt;/code&gt; for various &lt;code&gt;ggplot&lt;/code&gt; geometries like &lt;code&gt;geom_hline&lt;/code&gt;. Will report back with another post once I get those details down.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_bpc_visualization_general &amp;lt;- function(dataset, col_x, col_y, col_avg, col_unpl, col_lnpl, col_upper_25, col_lower_25){
    col_x &amp;lt;- enquo(col_x) # month_year
    col_y &amp;lt;- enquo(col_y) # net_sales
    
    col_avg &amp;lt;- dataset$avg_orders
    col_unpl &amp;lt;- dataset$unpl
    col_lnpl &amp;lt;- dataset$lnpl
    col_upper_25 &amp;lt;- dataset$upper_25
    col_lower_25 &amp;lt;- dataset$lower_25
    
    dataset %&amp;gt;%
        ggplot(aes(x = !!(col_x), y = !!(col_y))) +
        geom_line() +
        geom_hline(yintercept = col_avg, color = &amp;#39;green&amp;#39;) +
        geom_hline(yintercept = col_unpl, color = &amp;#39;red&amp;#39;, linetype = &amp;#39;dashed&amp;#39;) +
        geom_hline(yintercept = col_lnpl, color = &amp;#39;red&amp;#39;, linetype = &amp;#39;dashed&amp;#39;) +
        geom_hline(yintercept = col_upper_25, color = &amp;#39;orange&amp;#39;) +
        geom_hline(yintercept = col_lower_25, color = &amp;#39;orange&amp;#39;) +
        
        # break x-axis into quarters
        scale_x_date(breaks = &amp;#39;3 month&amp;#39;) +
        # note: place before theme()
        theme_minimal() +
        theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
        labs(
            title = glue(&amp;#39;{names(dataset[,1])}: Business Process Chart&amp;#39;),
            subtitle = &amp;quot;2017 - 2019&amp;quot;,
            x = &amp;quot;&amp;quot;,
            y = glue(&amp;#39;{names(dataset[,1])}&amp;#39;),
            caption = &amp;quot;----&amp;quot;
        ) +
        annotate(&amp;quot;text&amp;quot;, x = as.Date(&amp;quot;2017-02-01&amp;quot;), y = col_unpl, color = &amp;#39;red&amp;#39;, label = &amp;quot;UNLP&amp;quot;) +
        annotate(&amp;quot;text&amp;quot;, x = as.Date(&amp;quot;2017-02-01&amp;quot;), y = col_lnpl, color = &amp;#39;red&amp;#39;, label = &amp;quot;LNLP&amp;quot;) +
        annotate(&amp;quot;text&amp;quot;, x = as.Date(&amp;quot;2017-02-01&amp;quot;), y = col_upper_25, color = &amp;#39;orange&amp;#39;, label = &amp;quot;Upper 25%&amp;quot;) +
        annotate(&amp;quot;text&amp;quot;, x = as.Date(&amp;quot;2017-02-01&amp;quot;), y = col_avg, color = &amp;#39;green&amp;#39;, label = &amp;quot;Avg = 97&amp;quot;)
    
}

create_bpc_visualization_general(net_sales_bpc_data, month_year, net_sales, avg_orders, unpl, lnpl, upper_25, lower_25)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-07-30-custom-function_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Itâs possible to do a fair amount of data analysis without using functions, but &lt;strong&gt;functions&lt;/strong&gt; help you avoid endless copying and pasting and make your code less error prone.&lt;/p&gt;
&lt;p&gt;There are many different types functions you could use. In this post, I share functions that take columns of data as arguments. These types of functions are well-suited for streamlining your data pre-processing and visualization tasks.&lt;/p&gt;
&lt;p&gt;Shout out to &lt;a href=&#34;https://twitter.com/brodriguesco&#34;&gt;Bruno Rodrigues&lt;/a&gt; for writing &lt;a href=&#34;https://b-rodrigues.github.io/modern_R/&#34;&gt;&lt;strong&gt;Modern R with the Tidyverse&lt;/strong&gt;&lt;/a&gt; which has helped me get my head around writing custom functions.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Wrangling Foundations</title>
      <link>/post/ds4b-data-wrangling/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/post/ds4b-data-wrangling/</guid>
      <description>


&lt;div id=&#34;data-wrangling&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Wrangling&lt;/h2&gt;
&lt;p&gt;Iâve had experiencing using several of the functions in this portion of &lt;a href=&#34;https://university.business-science.io/p/ds4b-101-r-business-analysis-r/&#34;&gt;#DS4B 101&lt;/a&gt;, like &lt;code&gt;select()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;distinct()&lt;/code&gt;, &lt;code&gt;group_by()&lt;/code&gt;, &lt;code&gt;summarize()&lt;/code&gt; and so on, but this course is making me realize iâve only skimmed the surface of &lt;code&gt;dplyr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Recommended for anyone learning R who wants to level-up.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;select-arrange&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Select &amp;amp; Arrange&lt;/h2&gt;
&lt;p&gt;Iâve used the &lt;code&gt;select&lt;/code&gt; function before, but I havenât &lt;strong&gt;used&lt;/strong&gt; it, really.&lt;/p&gt;
&lt;p&gt;I had previously selected by column name, never by numeric vector; and I had never used select_helpers (&lt;code&gt;starts_with&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;matches&lt;/code&gt;, &lt;code&gt;num_range&lt;/code&gt;). I had never re-arranged columns using &lt;code&gt;select()&lt;/code&gt;. &lt;code&gt;Select_if()&lt;/code&gt; also comes in handy as well. Knowing data types allow for efficient selection (integer vs double).&lt;/p&gt;
&lt;p&gt;Iâve used arrange() and desc(), so I donât go into too much detail here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ââ Attaching packages ââââââââââââââââââââââââââââââââââââââââââââââââ tidyverse 1.3.0 ââ&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## â ggplot2 3.3.1     â purrr   0.3.3
## â tibble  3.0.1     â dplyr   0.8.5
## â tidyr   1.0.0     â stringr 1.4.0
## â readr   1.3.1     â forcats 0.4.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ââ Conflicts âââââââââââââââââââââââââââââââââââââââââââââââââââ tidyverse_conflicts() ââ
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# select first three columns using numeric vector
USArrests %&amp;gt;%
    select(1:3)

# re-arrange columns using select; place UrbanPop first
USArrests %&amp;gt;%
    select(UrbanPop, everything())

# select if integer 
USArrests %&amp;gt;%
    select_if(is.integer)

USArrests %&amp;gt;%
    select_if(~ !is.double(.))

# select if double
USArrests %&amp;gt;%
    select_if(is.double)

USArrests %&amp;gt;%
    select_if(~ !is.integer(.))

# swithing to IRIS dataframe
# select helpers: starts_with, contains
iris %&amp;gt;%
    select(starts_with(&amp;quot;petal&amp;quot;))

iris %&amp;gt;%
    select(contains(&amp;quot;length&amp;quot;)) %&amp;gt;% 
    head()

# using pull() instead of select() to pull out contents of a column
iris %&amp;gt;%
    pull(Sepal.Width) %&amp;gt;%
    head()

iris %&amp;gt;% 
    select_if(is.factor) %&amp;gt;%
    head()

# arrange Species in descending order by Petal.Length
iris %&amp;gt;%
    select(Petal.Length, Species) %&amp;gt;%
    arrange(desc(Petal.Length))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;slice-highlighting-a-distinction-between-base-and-tidyverse&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Slice: Highlighting a Distinction between Base and Tidyverse&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;slice()&lt;/code&gt; to grab portions of rows is another function I had not used prior. I might have used base R to grab specific rows. But looking back all my Base R operations were &lt;strong&gt;one-offs&lt;/strong&gt;. Below is an example, I may use Base-R to grab the first five rows of a dataframe. If I wanted to sort by a particular column, then grab the first give rows, it turns into two operations. First sorting by column, decreasing and assigning to âxâ, then grabing first five rows of âxâ.&lt;/p&gt;
&lt;p&gt;With dplyr, particularly patterns taught in the class, you can more seamlessly arrange, in descending order by a particular column (Solar.R), then slice the first five rows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# tidyverse to grab first five rows with slice(), but this allows pre-arranging it first. 
airquality %&amp;gt;%
    arrange(desc(Solar.R)) %&amp;gt;%
    slice(1:5)

# base R to grab first five rows
airquality[1:5,]


# base R to first sort by Solar.R, then assign to variable &amp;#39;x&amp;#39;, then grab first five values
x &amp;lt;- sort(airquality$Solar.R, decreasing = TRUE)
x[1:5]

# fastest way to grab Solar.R
sort(airquality$Solar.R, decreasing = TRUE)[1:5]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;spread-and-gather&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Spread and Gather&lt;/h2&gt;
&lt;p&gt;Here demonstrating &lt;code&gt;gather()&lt;/code&gt; and &lt;code&gt;spread()&lt;/code&gt; using the built-in &lt;code&gt;iris&lt;/code&gt; dataset. The&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# gather (before spread)
iris %&amp;gt;% 
    # create unique ID for each row
    mutate(ID=row_number(Species)) %&amp;gt;%
    # put ID in first column
    select(ID, everything()) %&amp;gt;%
    # use values from columns 2-5 as value
    gather(key = Measure_Type, value = Values,2:5) %&amp;gt;%
    # can spread by either Measure_Type or Species
    spread(key = Species, value = Values)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-and-mutate-with-nested-pipes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Filter and Mutate with nested pipes&lt;/h2&gt;
&lt;p&gt;Using both &lt;code&gt;airquality&lt;/code&gt; and &lt;code&gt;USArrests&lt;/code&gt; to demonstrate various data wrangling operations involving filter and mutate with nested pipes. I canât believe Iâve only filtered one column at a time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# filter airquality for beginning and end of the month
airquality %&amp;gt;%
    filter(Day &amp;lt; 5 | Day &amp;gt; 25)

airquality %&amp;gt;%
    filter(Temp &amp;lt; 71 &amp;amp; Temp &amp;gt; 64)

# Filter states that start with a certain alphabet
USArrests

# convert row name to column
USArrest_rownames &amp;lt;- tibble::rownames_to_column(USArrests, &amp;quot;States&amp;quot;)


# Descriptive statistics of Violence_Type by all States that start with &amp;quot;New&amp;quot;
USArrest_rownames %&amp;gt;%
    select(States, UrbanPop, everything()) %&amp;gt;%
    filter(States %&amp;gt;% 
               str_detect(&amp;quot;New&amp;quot;)) %&amp;gt;%
    # good to define which columns will be gather() in new column
    gather(`Murder`, `Assault`, `Rape`, key = &amp;quot;Violence_Type&amp;quot;, value = &amp;quot;cases&amp;quot; ) %&amp;gt;%
    group_by(Violence_Type) %&amp;gt;%
    summarize(
        avg = mean(cases),
        min = min(cases),
        max = max(cases)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    mutate(avg = round(avg,1))


# Filter by states starting with &amp;quot;A&amp;quot; and murder higher than 10
USArrest_rownames %&amp;gt;%
    filter(Murder &amp;gt; 10, 
           States %&amp;gt;% str_detect(&amp;quot;A&amp;quot;))

# filter for all states beginning with &amp;quot;New&amp;quot;
USArrest_rownames %&amp;gt;%
    filter(States %&amp;gt;% str_detect(&amp;quot;New&amp;quot;)) %&amp;gt;%
    arrange(desc(Assault))

USArrest_rownames %&amp;gt;%
    filter(Murder &amp;gt; 5, 
           States %&amp;gt;% str_detect(&amp;quot;M&amp;quot;)) %&amp;gt;%
    arrange(desc(Murder))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;handling-missing-values-replace-na&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Handling Missing Values: Replace NA&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;summarize_all()&lt;/code&gt; and &lt;code&gt;replace_na()&lt;/code&gt; are a joy to use for handling missing values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Quickly get number of &amp;quot;missing values&amp;quot; for all columns
airquality %&amp;gt;%
    summarize_all(~sum(is.na(.)))

# Get proportion of missing values for each column
airquality %&amp;gt;%
    summarize_all(~ sum(is.na(.)) / length(.))

# Quickly replace missing values in columns Ozone and Solar.R with &amp;#39;0&amp;#39;
airquality %&amp;gt;%
    replace_na(list(Ozone = 0, Solar.R = 0))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;chaining-multiple-pipes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Chaining Multiple Pipes&lt;/h2&gt;
&lt;p&gt;The coding patterns covered in this course is my biggest take-away thus far.&lt;/p&gt;
&lt;p&gt;Previously, I had not used &lt;em&gt;longer&lt;/em&gt; patterns of piping to explore data. Much of my code involved maybe 2-3 pipes, saving a new dataframe, then continuing to explore. Here iâm piping seven operations without creating a new dataframe and it allows for more efficient exploration, without having to save extra data frames.&lt;/p&gt;
&lt;p&gt;Making me re-think my approach to data wrangling.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Chaining multiple pipes to more efficiently explore data
iris %&amp;gt;%
    group_by(Species) %&amp;gt;%
    summarize(
        count = n(),
        mean = mean(Petal.Length),
        median = median(Petal.Length),
        sd = sd(Petal.Length),
        min = min(Petal.Length),
        max = max(Petal.Length)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    mutate(Range = max - min) %&amp;gt;%
    rename(
        `Standard Deviation` = sd,
        `Average` = mean,
        `Mininum` = min, 
        `Maximum` = max
    ) %&amp;gt;%
    arrange(desc(Average))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Converting Universal Transverse Mercator (UTM) to lattitude/longitude data</title>
      <link>/post/r-markdown-utm/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/post/r-markdown-utm/</guid>
      <description>


&lt;div id=&#34;packages-and-libraries&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Packages and Libraries&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(maps)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ââ Attaching packages ââââââââââââââââââââââââââââââââââââââââââââââââââââââ tidyverse 1.3.0 ââ&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## â ggplot2 3.3.1     â purrr   0.3.3
## â tibble  3.0.1     â dplyr   0.8.5
## â tidyr   1.0.0     â stringr 1.4.0
## â readr   1.3.1     â forcats 0.4.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ââ Conflicts âââââââââââââââââââââââââââââââââââââââââââââââââââââââââ tidyverse_conflicts() ââ
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()
## x purrr::map()    masks maps::map()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sp)
library(rmarkdown)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;world-and-thai-maps&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;World and Thai Maps&lt;/h2&gt;
&lt;p&gt;First, weâll use &lt;code&gt;map_data&lt;/code&gt; function from &lt;code&gt;ggplot2&lt;/code&gt; to turn any map from the &lt;code&gt;maps&lt;/code&gt; package into a data frame. This provides longitude and lattitude data. Then, weâll filter for Thailand to get Thai longtitude and lattitude data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;world.map &amp;lt;- map_data(&amp;quot;world&amp;quot;)
head(world.map)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        long      lat group order region subregion
## 1 -69.89912 12.45200     1     1  Aruba      &amp;lt;NA&amp;gt;
## 2 -69.89571 12.42300     1     2  Aruba      &amp;lt;NA&amp;gt;
## 3 -69.94219 12.43853     1     3  Aruba      &amp;lt;NA&amp;gt;
## 4 -70.00415 12.50049     1     4  Aruba      &amp;lt;NA&amp;gt;
## 5 -70.06612 12.54697     1     5  Aruba      &amp;lt;NA&amp;gt;
## 6 -70.05088 12.59707     1     6  Aruba      &amp;lt;NA&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;THAI.map &amp;lt;- world.map %&amp;gt;% filter(region == &amp;quot;Thailand&amp;quot;)
head(THAI.map)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       long      lat group order   region   subregion
## 1 99.66309 6.521924  1404 87912 Thailand Ko Tarutao 
## 2 99.64404 6.516113  1404 87913 Thailand Ko Tarutao 
## 3 99.60664 6.596827  1404 87914 Thailand Ko Tarutao 
## 4 99.65401 6.714111  1404 87915 Thailand Ko Tarutao 
## 5 99.70136 6.570557  1404 87916 Thailand Ko Tarutao 
## 6 99.66309 6.521924  1404 87917 Thailand Ko Tarutao&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;longitude-and-lattitude-value-ranges&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Longitude and Lattitude Value Ranges&lt;/h2&gt;
&lt;p&gt;Before converting UTM to longitude/lattitude data, we should know the range of both Longitudes and Lattitudes for Thailand.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(THAI.map$long)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   97.37   99.08  100.26  100.71  102.27  105.64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(THAI.map$lat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   5.637   9.084  13.213  13.249  17.820  20.424&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;jobpost-data-frame&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Jobpost Data Frame&lt;/h2&gt;
&lt;p&gt;Our objective is to visualize utm_x and utm_y in the &lt;code&gt;jobpost&lt;/code&gt; data frame by turning them into lattitude and longitude data first. The &lt;code&gt;jobpost&lt;/code&gt; data frame is retrieved from PostgreSQL.&lt;/p&gt;
&lt;p&gt;Preparation includes writing it to CSV before loading into Rmarkdown.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;jobpost &amp;lt;- read.csv(&amp;quot;jobpost.csv&amp;quot;)
glimpse(jobpost)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 50
## Columns: 25
## $ X                 &amp;lt;int&amp;gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, â¦
## $ jobpost_id        &amp;lt;int&amp;gt; 54, 66, 33, 34, 35, 36, 28, 32, 30, 55, 67, 68, 37,â¦
## $ job_name          &amp;lt;fct&amp;gt; &amp;quot;Facebook Marketing&amp;quot;, &amp;quot;à¹à¸­à¸à¸¡à¸´à¸&amp;quot;, &amp;quot;Accountant&amp;quot;, &amp;quot;à¹à¸à¸à¹â¦
## $ job_qty           &amp;lt;int&amp;gt; 3, 1, 1, 2, 2, 5, 3, 1, 5, 1, 22, 10, 1, 1, 2, 2, 1â¦
## $ age_min           &amp;lt;int&amp;gt; 22, 25, 29, 20, 20, 19, 28, 28, 20, 25, 30, 21, 18,â¦
## $ age_max           &amp;lt;int&amp;gt; 26, 32, 35, 35, 35, 40, 120, 40, 40, 45, 45, 30, 50â¦
## $ study_field       &amp;lt;fct&amp;gt; &amp;quot;-&amp;quot;, &amp;quot;à¹à¸à¸à¸±à¹à¸&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;à¸à¸±à¸à¸à¸²à¸£à¸à¸±à¸à¸â¦
## $ job_qualification &amp;lt;fct&amp;gt; &amp;quot;à¸­à¹à¸²à¸ à¹à¸à¸µà¸¢à¸ à¸ à¸²à¸©à¸²à¸­à¸±à¸à¸à¸¤à¸© à¹à¸à¹à¸à¸µ&amp;quot;, &amp;quot;à¸à¸­à¸à¸à¸³à¸à¸²à¸¡ à¸ à¸²à¸©à¸²à¸­à¸±à¸à¸à¸¤à¸©â¦
## $ min_salary        &amp;lt;int&amp;gt; 30000, 12000, 20000, 13000, 10000, 15000, 15000, 12â¦
## $ job_description   &amp;lt;fct&amp;gt; &amp;quot;à¸à¸³à¸à¸²à¸£à¸à¸¥à¸²à¸à¸à¸²à¸à¸à¹à¸­à¸à¸à¸²à¸ facebook&amp;quot;, &amp;quot;à¹à¸­à¸à¸¡à¸´à¸à¸à¸¹à¹à¸¥ à¹à¸à¸ à¹à¸ªà¸·â¦
## $ manychat_id       &amp;lt;dbl&amp;gt; 3.961592e+15, 2.984969e+15, 2.941175e+15, 3.416291eâ¦
## $ job_sex           &amp;lt;int&amp;gt; 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1, 3, â¦
## $ study_level       &amp;lt;int&amp;gt; 5, 5, 5, 0, 2, 2, 3, 4, 4, 5, 5, 4, 0, 2, 2, 5, 5, â¦
## $ work_exp          &amp;lt;int&amp;gt; 1, 0, 3, 1, 0, 0, 0, 3, 0, 3, 3, 0, 0, 1, 1, 3, 6, â¦
## $ created           &amp;lt;fct&amp;gt; 2020-06-07 09:00:36, 2020-06-14 23:12:35, 2020-05-2â¦
## $ updated           &amp;lt;fct&amp;gt; 2020-06-08 09:05:23, 2020-06-14 23:12:35, 2020-05-2â¦
## $ confirmed         &amp;lt;fct&amp;gt; 2020-06-07 09:00:36, 2020-06-14 23:12:35, 2020-05-2â¦
## $ batch             &amp;lt;lgl&amp;gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAâ¦
## $ location          &amp;lt;fct&amp;gt; à¸à¸²à¸à¸à¸², à¸£à¸²à¸¡à¸­à¸´à¸à¸à¸£à¸² 65, à¸à¸£à¸°à¸£à¸²à¸¡à¹à¸à¹à¸² à¸à¸­à¸¢ 60, à¸«à¹à¸²à¸ à¸£à¸´à¹à¸§à¸­à¸£â¦
## $ utm_x             &amp;lt;dbl&amp;gt; 674486.5, 678167.2, 676504.5, 661251.7, 714943.7, 6â¦
## $ utm_y             &amp;lt;dbl&amp;gt; 1511131, 1532008, 1519745, 1515611, 1477934, 152128â¦
## $ utm_zone_number   &amp;lt;int&amp;gt; 47, 47, 47, 47, 47, 47, 48, 47, 47, 47, 35, 48, 47,â¦
## $ utm_zone_letter   &amp;lt;fct&amp;gt; P, P, P, P, P, P, Q, P, P, P, L, P, P, P, P, P, P, â¦
## $ job_type          &amp;lt;int&amp;gt; NA, NA, 0, 0, 0, 0, 0, 0, 0, NA, NA, NA, 0, 0, 0, 0â¦
## $ online            &amp;lt;lgl&amp;gt; NA, NA, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, Fâ¦&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;subset-data-frame-called-utm&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Subset Data Frame called UTM&lt;/h2&gt;
&lt;p&gt;Weâll select only &lt;code&gt;utm_x&lt;/code&gt; and &lt;code&gt;utm_y&lt;/code&gt; columns from &lt;code&gt;jobpost&lt;/code&gt; because weâre interested in these two columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;utm &amp;lt;- data.frame(jobpost$utm_x, jobpost$utm_y)
str(utm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    50 obs. of  2 variables:
##  $ jobpost.utm_x: num  674486 678167 676504 661252 714944 ...
##  $ jobpost.utm_y: num  1511131 1532008 1519745 1515611 1477934 ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;handle-missing-values-and-outliers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Handle Missing Values and Outliers&lt;/h2&gt;
&lt;p&gt;Row 50 in &lt;code&gt;jobpost&lt;/code&gt; and also &lt;code&gt;utm&lt;/code&gt; is missing so weâll delete that. Then weâll also delete row 11 because itâs location is Zambia, Africa and its longitude and lattitude numbers are very different from Thailand - which will &lt;em&gt;distort&lt;/em&gt; the map.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;utm &amp;lt;- utm[-50, ]
utm &amp;lt;- utm[-11, ]
jobpost &amp;lt;- jobpost[-50, ]
jobpost &amp;lt;- jobpost[-11, ]
str(utm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    48 obs. of  2 variables:
##  $ jobpost.utm_x: num  674486 678167 676504 661252 714944 ...
##  $ jobpost.utm_y: num  1511131 1532008 1519745 1515611 1477934 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(jobpost)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    48 obs. of  25 variables:
##  $ X                : int  1 2 3 4 5 6 7 8 9 10 ...
##  $ jobpost_id       : int  54 66 33 34 35 36 28 32 30 55 ...
##  $ job_name         : Factor w/ 48 levels &amp;quot;.Net Developer&amp;quot;,..: 6 48 2 21 19 39 11 35 4 42 ...
##  $ job_qty          : int  3 1 1 2 2 5 3 1 5 1 ...
##  $ age_min          : int  22 25 29 20 20 19 28 28 20 25 ...
##  $ age_max          : int  26 32 35 35 35 40 120 40 40 45 ...
##  $ study_field      : Factor w/ 19 levels &amp;quot;-&amp;quot;,&amp;quot;Food science&amp;quot;,..: 1 12 1 1 1 1 1 6 1 5 ...
##  $ job_qualification: Factor w/ 41 levels &amp;quot;-&amp;quot;,&amp;quot;- à¸¡à¸µà¹à¸à¸à¸±à¸à¸à¸µà¹à¸£à¸à¸¢à¸à¸à¹\n- à¸à¹à¸²à¸à¸à¸²à¸£à¹à¸à¸à¸à¹à¸à¸«à¸²à¸£&amp;quot;,..: 41 16 9 38 37 32 33 30 15 23 ...
##  $ min_salary       : int  30000 12000 20000 13000 10000 15000 15000 12000 11500 25000 ...
##  $ job_description  : Factor w/ 50 levels &amp;quot;- Develops, modifies application software according to specifications and requirements.\n- Develops application&amp;quot;| __truncated__,..: 30 50 27 4 16 14 15 23 7 47 ...
##  $ manychat_id      : num  3.96e+15 2.98e+15 2.94e+15 3.42e+15 3.00e+15 ...
##  $ job_sex          : int  3 3 2 2 3 3 3 3 3 3 ...
##  $ study_level      : int  5 5 5 0 2 2 3 4 4 5 ...
##  $ work_exp         : int  1 0 3 1 0 0 0 3 0 3 ...
##  $ created          : Factor w/ 26 levels &amp;quot;2020-05-29 14:21:22&amp;quot;,..: 12 24 1 1 1 1 1 1 1 13 ...
##  $ updated          : Factor w/ 33 levels &amp;quot;2020-05-29 14:21:22&amp;quot;,..: 19 30 1 7 1 8 1 1 6 22 ...
##  $ confirmed        : Factor w/ 26 levels &amp;quot;2020-05-29 14:21:22&amp;quot;,..: 12 24 1 1 1 1 1 1 1 13 ...
##  $ batch            : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...
##  $ location         : Factor w/ 50 levels &amp;quot;112/3 à¸«à¸¡à¸¹à¹ 7 à¸.à¸à¸²à¸à¹à¸à¸¥à¸ à¸­.à¸à¸²à¸à¸à¸¥à¸µ à¸.à¸ªà¸¡à¸¸à¸à¸£à¸à¸£à¸²à¸à¸²à¸£ 10540&amp;quot;,..: 25 35 29 47 30 9 38 11 49 39 ...
##  $ utm_x            : num  674486 678167 676504 661252 714944 ...
##  $ utm_y            : num  1511131 1532008 1519745 1515611 1477934 ...
##  $ utm_zone_number  : int  47 47 47 47 47 47 48 47 47 47 ...
##  $ utm_zone_letter  : Factor w/ 4 levels &amp;quot;L&amp;quot;,&amp;quot;N&amp;quot;,&amp;quot;P&amp;quot;,&amp;quot;Q&amp;quot;: 3 3 3 3 3 3 4 3 3 3 ...
##  $ job_type         : int  NA NA 0 0 0 0 0 0 0 NA ...
##  $ online           : logi  NA NA FALSE FALSE FALSE FALSE ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;conversion-of-utm-into-latlong&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conversion of UTM into Lat/Long&lt;/h2&gt;
&lt;p&gt;After some research, we find out that Thailandâs UTM zone is 47N. The stack overflow source I used to find the conversion code is &lt;a href=&#34;https://stackoverflow.com/questions/30018098/how-to-convert-utm-coordinates-to-lat-and-long-in-r/30018607&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Weâll create two SpatialPoints object classes. Then transform them into a data frame containing lat and long data.&lt;/p&gt;
&lt;p&gt;Remember to load &lt;code&gt;sp&lt;/code&gt; library for this operation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sputm &amp;lt;- SpatialPoints(utm, proj4string = CRS(&amp;quot;+proj=utm +zone=47N +datum=WGS84&amp;quot;))
spgeo &amp;lt;- spTransform(sputm, CRS(&amp;quot;+proj=longlat +datum=WGS84&amp;quot;))

thai.map2 &amp;lt;- data.frame(Location = jobpost$location, lat = spgeo$jobpost.utm_y, 
    long = spgeo$jobpost.utm_x)

head(thai.map2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                      Location      lat     long
## 1                                       à¸à¸²à¸à¸à¸² 13.66385 100.6132
## 2                                 à¸£à¸²à¸¡à¸­à¸´à¸à¸à¸£à¸² 65 13.85233 100.6486
## 3                            à¸à¸£à¸°à¸£à¸²à¸¡à¹à¸à¹à¸² à¸à¸­à¸¢ 60 13.74159 100.6324
## 4 à¸«à¹à¸²à¸ à¸£à¸´à¹à¸§à¸­à¸£à¹à¹à¸à¸à¹ à¸à¸¥à¸²à¸à¹à¸² à¹à¸à¸£à¸´à¸à¸à¸à¸£ à¸à¸±à¹à¸ 1 à¹à¸à¹ à¸à¸±à¸à¹à¸à¹à¸¥à¸·à¹à¸­à¸ 13.70512 100.4912
## 5                                    à¹à¸¡à¸·à¸­à¸à¸à¸¥à¸à¸¸à¸£à¸µ 13.36114 100.9847
## 6                                      à¸à¸£à¸¸à¸à¹à¸à¸ 13.75633 100.5018&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;visualize-with-ggplot2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualize with GGPLOT2&lt;/h2&gt;
&lt;p&gt;Here weâll visualize the &lt;code&gt;THAI.map&lt;/code&gt; we created previously and overlay the new Lat/Long data points (from UTM).&lt;/p&gt;
&lt;p&gt;We can see a concentration of &lt;code&gt;utm&lt;/code&gt; data points from &lt;code&gt;jobpost&lt;/code&gt; were made in Bangkok and the greater Bangkok areas with some jobs also posted outside Bangkok.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;THAI.map %&amp;gt;% ggplot() + geom_map(map = THAI.map, aes(x = long, 
    y = lat, map_id = region), fill = &amp;quot;white&amp;quot;, color = &amp;quot;black&amp;quot;) + 
    geom_point(data = thai.map2, aes(x = long, y = lat, color = &amp;quot;red&amp;quot;, 
        alpha = 0.9))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Ignoring unknown aesthetics: x, y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-06-25-r-markdown-utm_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Visualization Competition 2020 - Wharton People Analytics Conf</title>
      <link>/slides/wpa/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/slides/wpa/</guid>
      <description>
&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_1.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_3.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_4.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_5.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_6.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_8.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_13.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_15.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_17.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_19.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_20.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_21.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_22.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_23.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_25.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_28.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_30.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_34.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_36.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_37.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_38.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_39.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_40.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_41.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_43.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_46.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_48.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_50.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_51.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_53.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_54.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_55.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_56.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_58.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_59.jpeg&#34;
  &gt;

&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;./wpa_slides/wpa_final_slides_64.jpeg&#34;
  &gt;

&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Wharton People Analytics Data Visualization Competition 2020</title>
      <link>/project/wharton-people-analytics/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/project/wharton-people-analytics/</guid>
      <description>&lt;p&gt;This Data Visualization competition was hosted by the Wharton People Analytics conference. They partnered with Doctors Without Borders, a medical humanitarian organization that delivers emergency aid to people affected by conflict, epidemics and natural disasters. Our task was to analyze data dating back to 2 decades on their global workforce comprising over 45,000 people to understand the career paths of Medical Coordinators (a top-level position within the organization).&lt;/p&gt;
&lt;p&gt;Very excited to have won 2nd place in this competition! See details 
&lt;a href=&#34;https://wpa.wharton.upenn.edu/2020-conference-competition-winners/#datavisualizationcompetitionwinner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing technical content in Academic</title>
      <link>/post/writing-technical-content/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      <guid>/post/writing-technical-content/</guid>
      <description>&lt;p&gt;Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Highlight your code snippets, take notes on math classes, and draw diagrams from textual representation.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On this page, you&amp;rsquo;ll find some examples of the types of technical content that can be rendered with Academic.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the &lt;code&gt;highlight&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```python
import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;math&#34;&gt;Math&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for $\LaTeX$ math. You can enable this feature by toggling the &lt;code&gt;math&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;To render &lt;em&gt;inline&lt;/em&gt; or &lt;em&gt;block&lt;/em&gt; math, wrap your LaTeX math with &lt;code&gt;$...$&lt;/code&gt; or &lt;code&gt;$$...$$&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;math block&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$\gamma_{n} = \frac{ 
\left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T 
\left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}
{\left \|\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right \|^2}$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;$$\gamma_{n} = \frac{ \left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T \left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}{\left |\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right |^2}$$&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;inline math&lt;/strong&gt; &lt;code&gt;$\nabla F(\mathbf{x}_{n})$&lt;/code&gt; renders as $\nabla F(\mathbf{x}_{n})$.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;multi-line math&lt;/strong&gt; using the &lt;code&gt;\\\\&lt;/code&gt; math linebreak:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$f(k;p_0^*) = \begin{cases} p_0^* &amp;amp; \text{if }k=1, \\\\
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;$$f(k;p_0^&lt;em&gt;) = \begin{cases} p_0^&lt;/em&gt; &amp;amp; \text{if }k=1, \\&lt;br&gt;
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$&lt;/p&gt;
&lt;h3 id=&#34;diagrams&#34;&gt;Diagrams&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the &lt;code&gt;diagram&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file or by adding &lt;code&gt;diagram: true&lt;/code&gt; to your page front matter.&lt;/p&gt;
&lt;p&gt;An example &lt;strong&gt;flowchart&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;sequence diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;Gantt diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;class diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;state diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;todo-lists&#34;&gt;Todo lists&lt;/h3&gt;
&lt;p&gt;You can even write your todo lists in Academic too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;- [x] Write math example
- [x] Write diagram example
- [ ] Do something else
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write math example&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write diagram example&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Do something else&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tables&#34;&gt;Tables&lt;/h3&gt;
&lt;p&gt;Represent your data in tables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;asides&#34;&gt;Asides&lt;/h3&gt;
&lt;p&gt;Academic supports a 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#alerts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcode for asides&lt;/a&gt;, also referred to as &lt;em&gt;notices&lt;/em&gt;, &lt;em&gt;hints&lt;/em&gt;, or &lt;em&gt;alerts&lt;/em&gt;. By wrapping a paragraph in &lt;code&gt;{{% alert note %}} ... {{% /alert %}}&lt;/code&gt;, it will render as an aside.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% alert note %}}
A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
{{% /alert %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;icons&#34;&gt;Icons&lt;/h3&gt;
&lt;p&gt;Academic enables you to use a wide range of 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/#icons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;icons from &lt;em&gt;Font Awesome&lt;/em&gt; and &lt;em&gt;Academicons&lt;/em&gt;&lt;/a&gt; in addition to 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#emojis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;emojis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some examples using the &lt;code&gt;icon&lt;/code&gt; shortcode to render icons:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; icon name=&amp;quot;terminal&amp;quot; pack=&amp;quot;fas&amp;quot; &amp;gt;}} Terminal  
{{&amp;lt; icon name=&amp;quot;python&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} Python  
{{&amp;lt; icon name=&amp;quot;r-project&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} R
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-terminal  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Terminal&lt;br&gt;

  &lt;i class=&#34;fab fa-python  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Python&lt;br&gt;

  &lt;i class=&#34;fab fa-r-project  pr-1 fa-fw&#34;&gt;&lt;/i&gt; R&lt;/p&gt;
&lt;h3 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it ð&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>An example preprint / working paper</title>
      <link>/publication/preprint/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      <guid>/publication/preprint/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&amp;rsquo;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code and math&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Display Jupyter Notebooks with Academic</title>
      <link>/post/jupyter/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>/post/jupyter/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from IPython.core.display import Image
Image(&#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./index_1_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Welcome to Academic!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Welcome to Academic!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-python-and-jupyterlab&#34;&gt;Install Python and JupyterLab&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.anaconda.com/distribution/#download-section&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Install Anaconda&lt;/a&gt; which includes Python 3 and JupyterLab.&lt;/p&gt;
&lt;p&gt;Alternatively, install JupyterLab with &lt;code&gt;pip3 install jupyterlab&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;create-or-upload-a-jupyter-notebook&#34;&gt;Create or upload a Jupyter notebook&lt;/h2&gt;
&lt;p&gt;Run the following commands in your Terminal, substituting &lt;code&gt;&amp;lt;MY-WEBSITE-FOLDER&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;SHORT-POST-TITLE&amp;gt;&lt;/code&gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
cd &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
jupyter lab index.ipynb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;jupyter&lt;/code&gt; command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.&lt;/p&gt;
&lt;h2 id=&#34;edit-your-post-metadata&#34;&gt;Edit your post metadata&lt;/h2&gt;
&lt;p&gt;The first cell of your Jupter notebook will contain your post metadata (
&lt;a href=&#34;https://sourcethemes.com/academic/docs/front-matter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;front matter&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In Jupter, choose &lt;em&gt;Markdown&lt;/em&gt; as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: My post&#39;s title
date: 2019-09-01

# Put any other Academic metadata here...
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit the metadata of your post, using the 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt; as a guide to the available options.&lt;/p&gt;
&lt;p&gt;To set a 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#featured-image&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;featured image&lt;/a&gt;, place an image named &lt;code&gt;featured&lt;/code&gt; into your post&amp;rsquo;s folder.&lt;/p&gt;
&lt;p&gt;For other tips, such as using math, see the guide on 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;writing content with Academic&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;convert-notebook-to-markdown&#34;&gt;Convert notebook to Markdown&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;This post was created with Jupyter. The orginal files can be found at &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&#34;&gt;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-academic&#34;&gt;Create slides in Markdown with Academic&lt;/h1&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Academic&lt;/a&gt; | 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
&lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
Three
&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;
&lt;a href=&#34;https://spectrum.chat/academic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>/privacy/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Terms</title>
      <link>/terms/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>/terms/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>/project/external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Internal Project</title>
      <link>/project/internal-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>/project/internal-project/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Academic: the website builder for Hugo</title>
      <link>/post/getting-started/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      <guid>/post/getting-started/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Create a free website with Academic using Markdown, Jupyter, or RStudio. Choose a beautiful color theme and build anything with the Page Builder - over 40 &lt;em&gt;widgets&lt;/em&gt;, &lt;em&gt;themes&lt;/em&gt;, and &lt;em&gt;language packs&lt;/em&gt; included!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Check out the latest &lt;strong&gt;demo&lt;/strong&gt;&lt;/a&gt; of what you&amp;rsquo;ll get in less than 10 minutes, or 
&lt;a href=&#34;https://sourcethemes.com/academic/#expo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;view the &lt;strong&gt;showcase&lt;/strong&gt;&lt;/a&gt; of personal, project, and business sites.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ð 
&lt;a href=&#34;#install&#34;&gt;&lt;strong&gt;Get Started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;View the &lt;strong&gt;documentation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð¬ 
&lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Ask a question&lt;/strong&gt; on the forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð¥ 
&lt;a href=&#34;https://spectrum.chat/academic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chat with the &lt;strong&gt;community&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð¦ Twitter: 
&lt;a href=&#34;https://twitter.com/source_themes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@source_themes&lt;/a&gt; 
&lt;a href=&#34;https://twitter.com/GeorgeCushen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@GeorgeCushen&lt;/a&gt; 
&lt;a href=&#34;https://twitter.com/search?q=%23MadeWithAcademic&amp;amp;src=typd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#MadeWithAcademic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð¡ 
&lt;a href=&#34;https://github.com/gcushen/hugo-academic/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Request a &lt;strong&gt;feature&lt;/strong&gt; or report a &lt;strong&gt;bug&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;â¬ï¸ &lt;strong&gt;Updating?&lt;/strong&gt; View the 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Update Guide&lt;/a&gt; and 
&lt;a href=&#34;https://sourcethemes.com/academic/updates/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;â¤ï¸ &lt;strong&gt;Support development&lt;/strong&gt; of Academic:
&lt;ul&gt;
&lt;li&gt;âï¸ 
&lt;a href=&#34;https://paypal.me/cushen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Donate a coffee&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ðµ 
&lt;a href=&#34;https://www.patreon.com/cushen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Become a backer on &lt;strong&gt;Patreon&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð¼ï¸ 
&lt;a href=&#34;https://www.redbubble.com/people/neutreno/works/34387919-academic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Decorate your laptop or journal with an Academic &lt;strong&gt;sticker&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð 
&lt;a href=&#34;https://academic.threadless.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wear the &lt;strong&gt;T-shirt&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ð©âð» 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/contribute/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Contribute&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;















&lt;figure id=&#34;figure-academic-is-mobile-first-with-a-responsive-design-to-ensure-that-your-site-looks-stunning-on-every-device&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/academic.png&#34; data-caption=&#34;Academic is mobile first with a responsive design to ensure that your site looks stunning on every device.&#34;&gt;


  &lt;img src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/academic.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Academic is mobile first with a responsive design to ensure that your site looks stunning on every device.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Key features:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Page builder&lt;/strong&gt; - Create &lt;em&gt;anything&lt;/em&gt; with 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;widgets&lt;/strong&gt;&lt;/a&gt; and 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;elements&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit any type of content&lt;/strong&gt; - Blog posts, publications, talks, slides, projects, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create content&lt;/strong&gt; in 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;, 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/jupyter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Jupyter&lt;/strong&gt;&lt;/a&gt;, or 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-rstudio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugin System&lt;/strong&gt; - Fully customizable 
&lt;a href=&#34;https://sourcethemes.com/academic/themes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;color&lt;/strong&gt; and &lt;strong&gt;font themes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Display Code and Math&lt;/strong&gt; - Code highlighting and 
&lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Mathematics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LaTeX math&lt;/a&gt; supported&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt; - 
&lt;a href=&#34;https://analytics.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Analytics&lt;/a&gt;, 
&lt;a href=&#34;https://disqus.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Disqus commenting&lt;/a&gt;, Maps, Contact Forms, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful Site&lt;/strong&gt; - Simple and refreshing one page design&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Industry-Leading SEO&lt;/strong&gt; - Help get your website found on search engines and social media&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Media Galleries&lt;/strong&gt; - Display your images and videos with captions in a customizable gallery&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mobile Friendly&lt;/strong&gt; - Look amazing on every screen with a mobile friendly version of your site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-language&lt;/strong&gt; - 15+ language packs including English, ä¸­æ, and PortuguÃªs&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-user&lt;/strong&gt; - Each author gets their own profile page&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy Pack&lt;/strong&gt; - Assists with GDPR&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stand Out&lt;/strong&gt; - Bring your site to life with animation, parallax backgrounds, and scroll effects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-Click Deployment&lt;/strong&gt; - No servers. No databases. Only files.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;p&gt;Academic comes with &lt;strong&gt;automatic day (light) and night (dark) mode&lt;/strong&gt; built-in. Alternatively, visitors can  choose their preferred mode - click the sun/moon icon in the top right of the 
&lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Demo&lt;/a&gt; to see it in action! Day/night mode can also be disabled by the site admin in &lt;code&gt;params.toml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/themes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Choose a stunning &lt;strong&gt;theme&lt;/strong&gt; and &lt;strong&gt;font&lt;/strong&gt;&lt;/a&gt; for your site. Themes are fully 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/customization/#custom-theme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;customizable&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;ecosystem&#34;&gt;Ecosystem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;
&lt;a href=&#34;https://github.com/sourcethemes/academic-admin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Academic Admin&lt;/a&gt;:&lt;/strong&gt; An admin tool to import publications from BibTeX or import assets for an offline site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;
&lt;a href=&#34;https://github.com/sourcethemes/academic-scripts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Academic Scripts&lt;/a&gt;:&lt;/strong&gt; Scripts to help migrate content to new versions of Academic&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;
&lt;p&gt;You can choose from one of the following four methods to install:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-web-browser&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;one-click install using your web browser (recommended)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-git&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;install on your computer using &lt;strong&gt;Git&lt;/strong&gt; with the Command Prompt/Terminal app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;install on your computer by downloading the &lt;strong&gt;ZIP files&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-rstudio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;install on your computer with &lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/get-started/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;personalize and deploy your new site&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;updating&#34;&gt;Updating&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;View the Update Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feel free to &lt;em&gt;star&lt;/em&gt; the project on 
&lt;a href=&#34;https://github.com/gcushen/hugo-academic/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt; to help keep track of 
&lt;a href=&#34;https://sourcethemes.com/academic/updates&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;updates&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2016-present 
&lt;a href=&#34;https://georgecushen.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;George Cushen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the 
&lt;a href=&#34;https://github.com/gcushen/hugo-academic/blob/master/LICENSE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example journal article</title>
      <link>/publication/journal-article/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      <guid>/publication/journal-article/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&amp;rsquo;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code and math&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      <guid>/post/2015-07-23-r-rmarkdown/</guid>
      <description>


&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2015-07-23-r-rmarkdown_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>An example conference paper</title>
      <link>/publication/conference-paper/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      <guid>/publication/conference-paper/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&amp;rsquo;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code and math&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
