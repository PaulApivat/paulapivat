<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technical Notes Overview | Paul Apivat</title>
    <link>/technical_notes/example_tech/</link>
      <atom:link href="/technical_notes/example_tech/index.xml" rel="self" type="application/rss+xml" />
    <description>Technical Notes Overview</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020 Paul Apivat Hanvongse. All Rights Reserved.</copyright><lastBuildDate>Sun, 09 Sep 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Technical Notes Overview</title>
      <link>/technical_notes/example_tech/</link>
    </image>
    
    <item>
      <title>Setting up Conda Virtual Env and IPython</title>
      <link>/technical_notes/example_tech/python_virtualenv/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_virtualenv/</guid>
      <description>&lt;h2 id=&#34;virtual-environment-best-practices&#34;&gt;Virtual Environment Best Practices&lt;/h2&gt;
&lt;p&gt;NOTE: This is from chapter 2 of Joel Grus&amp;rsquo; &amp;lsquo;Data Science from Scratch&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;Joel&amp;rsquo;s a known 
&lt;a href=&#34;https://www.youtube.com/watch?v=7jiPeIFXb6U&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;opponent of notebooks&lt;/a&gt; and recommends operating in IPython instead.&lt;/p&gt;
&lt;p&gt;I was pleasantly surprised that the process of setting up a virtual environment and IPython was relatively painless. Here&amp;rsquo;s my process, taken from the book with some tweaks:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# create a Python 3.6 environment named &#39;dsfs&#39;
conda create -n dsfs python=3.6

# update conda to latest version (4.9.0)
conda update -n base -c defaults conda

# to activate virtual environment (named it &#39;dsfs&#39; to keep it simple)
source activate dsfs

# install pip (note: currently using Python 3.8.5)
python3 get-pip.py

# install IPython 
python3 -m pip install ipython

# save IPython session
# save lines 1-21 in session to file initial_ipython_session.py
%save initial_ipython_session 1-21

# exit IPython
ctrl + D

# exit conda virtual environment
conda deactivate

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;pulling-up-a-saved-ipython-session-in-vscode&#34;&gt;Pulling up a saved IPython session in VSCode&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: I am using VSCode as my main python IDE outside of &lt;code&gt;jupyter notebooks&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After you&amp;rsquo;ve saved an IPython session (see above), you may want to pull up the &lt;code&gt;.py&lt;/code&gt; file for further edits at a later time. To do this, you&amp;rsquo;ll need to ensure that the &lt;code&gt;code&lt;/code&gt; command for VSCode is installed.&lt;/p&gt;
&lt;p&gt;Assuming you&amp;rsquo;re already &lt;em&gt;in&lt;/em&gt; VSCode, 
&lt;a href=&#34;https://stackoverflow.com/questions/30065227/run-open-vscode-from-mac-terminal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;press&lt;/a&gt; (I&amp;rsquo;m using macOS):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Command + Shift + P
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then select &lt;code&gt;Shell Command: Install code in PATH&lt;/code&gt;. That&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;To open a previously saved &lt;code&gt;IPython&lt;/code&gt; session in VSCode from the VSCode terminal, type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% code name_of_file.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this can be done from (base) or from a previously configured virtual environment session, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(base) paulapivat@Pauls-MacBook dsfs % code function_session.py
(base) paulapivat@Pauls-MacBook dsfs % source activate dsfs
(dsfs) paulapivat@Pauls-MacBook dsfs % code function_session.py
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating and Looping through DataFrames</title>
      <link>/technical_notes/example_tech/python_tip2/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_tip2/</guid>
      <description>&lt;h2 id=&#34;creating-and-looping-through-list-of-tuples&#34;&gt;Creating and Looping through List of Tuples&lt;/h2&gt;
&lt;p&gt;If you come to Python from R, it&amp;rsquo;s not immediately obvious how Lists, Dictionaries, Tuples, Series, then Loops help you do the things you can do in R.&lt;/p&gt;
&lt;p&gt;You can begin to connect the dots when you see that Lists of Tuples are the building blocks of DataFrames - available in both languages to handle tidy (tabular) data.&lt;/p&gt;
&lt;h1 id=&#34;lists&#34;&gt;Lists&lt;/h1&gt;
&lt;p&gt;Lists are ordered and mutable collection of data. Below are lists of strings and integers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name_list = [&#39;paul&#39;, &#39;apivat&#39;, &#39;marvin&#39;, &#39;pim&#39;, &#39;milin&#39;]
int_list = [3,4,5,2,5,6,7,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;tuples&#34;&gt;Tuples&lt;/h1&gt;
&lt;p&gt;Tuples, also collections, are ordered and immutable. But more related to the handling of data, tuples can be converted to DataFrames (using the Pandas library). Below, the List of Tuples (data) is converted into a DataFrame.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import pandas as pd

data = [
    (&#39;r1&#39;, &#39;c1&#39;, 11, 11),
    (&#39;r1&#39;, &#39;c2&#39;, 12, 12),
    (&#39;r2&#39;, &#39;c1&#39;, 21, 21),
    (&#39;r2&#39;, &#39;c2&#39;, 22, 22)
]

df = pd.DataFrame(data, columns=[&#39;R_Number&#39;, &#39;C_Number&#39;, &#39;Avg&#39;, &#39;Std&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;loops&#34;&gt;Loops&lt;/h1&gt;
&lt;p&gt;You can loop through lists of strings and integers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int_list = [3,4,5,2,5,6,7,5]

for num in int_list:
    print(num)
    
name_list = [&#39;paul&#39;, &#39;apivat&#39;, &#39;marvin&#39;, &#39;pim&#39;, &#39;milin&#39;]

for name in name_list:
    print(name)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;looping-through-list-of-tuples-dataframe&#34;&gt;Looping through List of Tuples (DataFrame)&lt;/h1&gt;
&lt;p&gt;Just like you can loop through &lt;em&gt;any&lt;/em&gt; collection, you can loop through a list of tuples - which means you can loop through DataFrames.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Looping through column names
df = pd.DataFrame(data, columns=[&#39;R_Number&#39;, &#39;C_Number&#39;, &#39;Avg&#39;, &#39;Std&#39;])

for col_names in df:
    print(col_names)
    
# Looping through a specific column
for items in df[&#39;R_Number&#39;]:
    print(items)
    
# Looping through a specific row
for items in df.iloc[1]:
    print(items)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s the basic connection between python fundamental data structures and for-loop operations and data science.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Random Numbers &amp; Reproducibility in Python</title>
      <link>/technical_notes/example_tech/python_reproducibility/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_reproducibility/</guid>
      <description>&lt;h2 id=&#34;random-numbers-with-numpy&#34;&gt;Random Numbers with Numpy&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Numpy&lt;/code&gt; has a sub-module called &lt;code&gt;random&lt;/code&gt;. Technically both are of the &amp;lsquo;module&amp;rsquo; class. &lt;code&gt;numpy.random&lt;/code&gt; contains other methods like: &lt;code&gt;seed&lt;/code&gt;, &lt;code&gt;set_state&lt;/code&gt;, &lt;code&gt;standard_t&lt;/code&gt; etc.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Submodules

import numpy

print(&amp;quot;numpy.random is a&amp;quot;, type(numpy.random))
print(&amp;quot;numpy is a&amp;quot;, type(numpy))
print(&amp;quot;it contains names such as...&amp;quot;, dir(numpy.random)[-15:])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reproducibility&#34;&gt;Reproducibility&lt;/h2&gt;
&lt;p&gt;When using &lt;code&gt;numpy.random&lt;/code&gt;, you can ensure reproducibility by accessing &lt;code&gt;numpy.random.seed(30)&lt;/code&gt;, which mirrors #Rstats&amp;rsquo; &lt;code&gt;set.seed(30)&lt;/code&gt; behavior.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import random

numpy.random.seed(30)
rolls = numpy.random.randint(low=1, high=6, size=10)
rolls
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Connecting BigQuery to Google Data Studio [Basic Setup]</title>
      <link>/technical_notes/example_tech/google_cloud_tip1/</link>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/google_cloud_tip1/</guid>
      <description>&lt;h2 id=&#34;steps-for-connecting-bigquery-to-data-studio&#34;&gt;Steps for Connecting BigQuery to Data Studio&lt;/h2&gt;
&lt;p&gt;This note outlines the basic steps required to generate charts in Google Data Studio, specifically pulling data from BigQuery.&lt;/p&gt;
&lt;h1 id=&#34;bigquery&#34;&gt;BigQuery&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;The starting point is to generate a query in BigQuery&lt;/li&gt;
&lt;li&gt;Once a query is created, click &lt;strong&gt;Save Results&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In the pop-up window, a prompt: &amp;ldquo;choose where to save the results data from the query&amp;rdquo;, save result as BigQuery Table&lt;/li&gt;
&lt;li&gt;Set project name (i.e., jobsbot)&lt;/li&gt;
&lt;li&gt;Set dataset name (i.e., internalmongo)&lt;/li&gt;
&lt;li&gt;Create table name, for the specific query (i.e., jobfieldname_ranking)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;google-data-studio&#34;&gt;Google Data Studio&lt;/h1&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Click Add Data&lt;/li&gt;
&lt;li&gt;Find BigQuery in Google Connectors&lt;/li&gt;
&lt;li&gt;Locate saved query table (see above) (i.e., My Projects &amp;gt; jobsbot (project) &amp;gt; internalmongo (dataset) &amp;gt; jobfieldname_ranking (table/specific query))&lt;/li&gt;
&lt;li&gt;Click Add&lt;/li&gt;
&lt;li&gt;Select &amp;lsquo;Add a Chart&amp;rsquo; (note: could be Table or Chart style)&lt;/li&gt;
&lt;li&gt;Optional: copy/paste Table to create a companion Chart for table&lt;/li&gt;
&lt;li&gt;Select Table; in Data Menu, select Metric, &amp;lsquo;Add Metric&amp;rsquo; to swap out generic default Report Count (for more informative data generated from the query)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Python Setup Options</title>
      <link>/technical_notes/example_tech/python_tip1/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/python_tip1/</guid>
      <description>&lt;h2 id=&#34;setting-up-python-for-r-users&#34;&gt;Setting up Python for R Users&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve recently started #66DaysOfData and will be using this opportunity to make some headway into the world of Python. It&amp;rsquo;s reputation for having a complex, at times frustrating, setup process precedes itself and is probably warranted. That said, here are some tips to minimize that.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my current OS environment. Mac users will have an older version of Python that comes with the computer, you can type &lt;code&gt;python --version&lt;/code&gt; into your terminal to find out. Here&amp;rsquo;s mine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;macOS Catalina version 10.15.5
Python 2.7.16
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;python-2-vs-python-3&#34;&gt;Python 2 vs Python 3&lt;/h1&gt;
&lt;p&gt;There appears to be general consensus for anyone starting out in Python that you&amp;rsquo;ll want Python 3. There&amp;rsquo;s no debate here. Just get Python 3. I found the easiest way to go to Python Release for Mac OS X, which as of this writing is Python 3.8.5 and use the 
&lt;a href=&#34;https://www.python.org/downloads/release/python-385/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;macOS 64-bit installer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once installed, you&amp;rsquo;ll want to check.&lt;/p&gt;
&lt;p&gt;Instead of &lt;code&gt;python --version&lt;/code&gt;, which checks Python 2, you&amp;rsquo;ll use &lt;code&gt;python3 --version&lt;/code&gt;. This implies that Python 3 isn&amp;rsquo;t merely a &amp;ldquo;newer&amp;rdquo; version of Python, but that they are completely different categories.&lt;/p&gt;
&lt;h1 id=&#34;anaconda&#34;&gt;Anaconda&lt;/h1&gt;
&lt;p&gt;While this isn&amp;rsquo;t my first choice of development environment, it is the first option that allowed me to get coding in Python the fastest.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll download the 
&lt;a href=&#34;https://www.anaconda.com/products/individual&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Individual Edition&lt;/a&gt; of the Anaconda, open-source platform. You&amp;rsquo;ll download the application for your desktop and you&amp;rsquo;ll find &lt;code&gt;Anaconda-Navigator&lt;/code&gt; in your list of applications (or where ever you chose to place your newly installed application).&lt;/p&gt;
&lt;p&gt;NOTE: Shortly after installing and using, the Desktop version of Anaconda froze and I had a difficult time even &amp;ldquo;Force Quitting&amp;rdquo; it, so my preferred method of launching Anaconda Navigator is to open the mac terminal and type in the command &lt;code&gt;anaconda-navigator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The navigator supports &lt;code&gt;Jupyter Notebooks&lt;/code&gt;, &lt;code&gt;PyCharm&lt;/code&gt; and even &lt;code&gt;RStudio&lt;/code&gt; among other environments.&lt;/p&gt;
&lt;p&gt;I will be using &lt;code&gt;Jupyter Notebooks&lt;/code&gt; while I get acclimated to Python, but ultimately i&amp;rsquo;m looking for interoperability with #Rstats.&lt;/p&gt;
&lt;h1 id=&#34;reticulate&#34;&gt;Reticulate&lt;/h1&gt;
&lt;p&gt;This is an &lt;code&gt;R package&lt;/code&gt; that allows you to run &lt;code&gt;Python&lt;/code&gt; code in &lt;code&gt;R&lt;/code&gt; environments. The feature I am looking forward to using is the &lt;code&gt;R Markdown&lt;/code&gt; document that allows me to run chunks of python code.&lt;/p&gt;
&lt;p&gt;Work-in-Progress: TBD&lt;/p&gt;
&lt;h1 id=&#34;vscode&#34;&gt;VSCode&lt;/h1&gt;
&lt;p&gt;This is another popular IDE with widely used Python Extension.&lt;/p&gt;
&lt;p&gt;Work-in-Progress: TBD&lt;/p&gt;
&lt;h1 id=&#34;pycharm&#34;&gt;PyCharm&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve heard this IDE most closely resembles RStudio in ease of use.&lt;/p&gt;
&lt;p&gt;Work-in-Progress: TBD&lt;/p&gt;
&lt;h1 id=&#34;spyder&#34;&gt;Spyder&lt;/h1&gt;
&lt;p&gt;This appears to be close approximation of the functionality in RStudio.&lt;/p&gt;
&lt;p&gt;Work-in-Progress: TBD&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Technical Notes Page 1</title>
      <link>/technical_notes/example_tech/technical_notes1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/technical_notes1/</guid>
      <description>&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;
&lt;h2 id=&#34;technical-tip-1&#34;&gt;Technical Tip 1&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
&lt;h2 id=&#34;technical-tip-2&#34;&gt;Technical Tip 2&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reading and manipulating nested data</title>
      <link>/technical_notes/example_tech/rstats_unnest/</link>
      <pubDate>Sun, 11 Oct 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_unnest/</guid>
      <description>&lt;h2 id=&#34;ways-of-handling-nested-data&#34;&gt;Ways of handling nested data&lt;/h2&gt;
&lt;p&gt;Recently, I downloaded JSON data from BigQuery and had to make sense of the data. This starts with getting the data into tabular form.&lt;/p&gt;
&lt;p&gt;Here are the libraries I used:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(jsonlite)
library(tidyverse)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, read in JSON data. Once read in, we check its class type to see that its a list. We&amp;rsquo;ll want to get it into a data frame.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# read data out into Large list (321 elements, 2.4 Mb)
# each row is *another* list

funnel &amp;lt;- lapply(readLines(&amp;quot;bq-mixpanel-funnel.json&amp;quot;), fromJSON)

# &amp;quot;list&amp;quot; class
class(funnel)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After searching online, three approaches continually resurfaced.&lt;/p&gt;
&lt;p&gt;First, using &lt;code&gt;unlist()&lt;/code&gt; and converting into &lt;code&gt;matrix()&lt;/code&gt; before wrapping &lt;em&gt;that&lt;/em&gt; in a &lt;code&gt;data.frame()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Approach 1: convert to matrix, array

unlist_funnel &amp;lt;- matrix(unlist(funnel), byrow = TRUE, ncol = length(funnel[[1]]))
rownames(unlist_funnel) &amp;lt;- names(funnel)
as.data.frame(unlist_funnel) %&amp;gt;% view()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These next approaches get us closer (&lt;strong&gt;note&lt;/strong&gt;: I know from interacting with the data in BigQuery that there &lt;em&gt;should&lt;/em&gt; be 321 rows):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Approach 2: Convert list to data frame

df &amp;lt;- data.frame(matrix(unlist(funnel), nrow = length(funnel), byrow = TRUE))
df2 &amp;lt;- data.frame(matrix(unlist(funnel), nrow = length(funnel), byrow = FALSE))
df3 &amp;lt;- data.frame(matrix(unlist(funnel), nrow = 321, byrow = TRUE), stringsAsFactors = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next approach is to use &lt;code&gt;lapply()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#works but everything is on one column

unlist(lapply(funnel, c)) %&amp;gt;% view() 

# this makes everything a list, but we want everything into a vector
t(lapply(funnel, c)) %&amp;gt;% view() 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, the approach that worked best, in this particular case was &lt;code&gt;sapply()&lt;/code&gt;. This functions turns things into vector, which can then be converted into a dataframe:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#still the ideal, this works because &#39;c&#39; is used ot combine lists

t(sapply(funnel, c)) %&amp;gt;% view()  
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Styling tables with reactable</title>
      <link>/technical_notes/example_tech/rstats_viz_reactable/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_viz_reactable/</guid>
      <description>&lt;h2 id=&#34;setting-up-a-barebones-table-with-reactable&#34;&gt;Setting up a barebones table with {reactable}&lt;/h2&gt;
&lt;p&gt;There are several &lt;code&gt;packages&lt;/code&gt; to style your tables. This note will help you get setup with a basic table using the &lt;code&gt;reactable&lt;/code&gt; package. With just a few lines of code, you can have a table with pagination and column sorting.&lt;/p&gt;
&lt;p&gt;The data for this note comes from 
&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-09-22/readme.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TidyTuesday 2020-09-22, &amp;ldquo;Himalayan Climbers&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This note assumes that data has been wrangled and in &lt;code&gt;tibble&lt;/code&gt; form, ready to be styled into a table.&lt;/p&gt;
&lt;h2 id=&#34;sample-tibble&#34;&gt;Sample Tibble&lt;/h2&gt;
&lt;p&gt;Here, I&amp;rsquo;ve saved my tibble of 20 rows and 3 columns in &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; df

# A tibble: 20 x 3
   peak            attempts fail_rate
   &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
 1 Everest            21813     0.54 
 2 Cho Oyu             8890     0.570
 3 Ama Dablam          8406     0.479
 4 Manaslu             4593     0.621
 5 Dhaulagiri I        2592     0.789
 6 Makalu              2405     0.764
 7 Lhotse              2379     0.638
 8 Baruntse            2190     0.708
 9 Pumori              1780     0.706
10 Annapurna I         1669     0.821
11 Kangchenjunga       1385     0.682
12 Himlung Himal       1308     0.573
13 Annapurna IV         812     0.845
14 Putha Hiunchuli      738     0.599
15 Tilicho              670     0.781
16 Tukuche              462     0.753
17 Jannu                339     0.782
18 Langtang Lirung      338     0.84 
19 Makalu II            322     0.758
20 Nuptse               303     0.934

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;load-libraries&#34;&gt;Load Libraries&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;library(tidyverse)
library(reactable)
library(htmltools)

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;basic-table&#34;&gt;Basic Table&lt;/h2&gt;
&lt;p&gt;The amazing thing is, with just this one line, you have a barebones table with &lt;strong&gt;pagination&lt;/strong&gt; (with 20 rows, it shows 10 at a time; this can be adjusted) and  &lt;strong&gt;sorting&lt;/strong&gt; for both columns.&lt;/p&gt;
&lt;p&gt;You can check out the rest of the repo 
&lt;a href=&#34;https://github.com/PaulApivat/tidytuesday/blob/master/2020/himalaya/exploratory.R&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;reactable(df)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;adding-bar-charts-for-each-row&#34;&gt;Adding Bar Charts for Each Row&lt;/h2&gt;
&lt;p&gt;Of course, bare bones is not much to look at, so adding bar charts is essential for visually communicating quantities and percentages. However, you&amp;rsquo;ll need to use the &lt;code&gt;htmltools&lt;/code&gt; package to begin adding &lt;code&gt;div&lt;/code&gt; to your chart.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Bar Charts can be added with a function 

bar_chart &amp;lt;- function(label, width = &amp;quot;100%&amp;quot;, height = &amp;quot;14px&amp;quot;, fill = &amp;quot;#00bfc4&amp;quot;, background = NULL){
    bar &amp;lt;- div(style = list(background = fill, width = width, height = height))
    chart &amp;lt;- div(style = list(flexGrow = 1, marginLeft = &amp;quot;6px&amp;quot;, background = background), bar)
    div(style = list(display = &amp;quot;flex&amp;quot;, alignItems = &amp;quot;center&amp;quot;), label, chart)
}


# The bar_chart function is then inserted into the numeric columns

reactable(
    df,
    defaultSorted = &amp;quot;attempts&amp;quot;,
    columns = list(
        peak = colDef(
            name = &amp;quot;Peaks&amp;quot;
        ),
        attempts = colDef(
            name = &amp;quot;Attempts (#)&amp;quot;,
            defaultSortOrder = &amp;quot;desc&amp;quot;,
            #format = colFormat(separators = TRUE),
            
            # Render Bar charts using a custom cell render function
            cell = function(value){
                width &amp;lt;- paste0(value * 100 / max(df$attempts), &amp;quot;%&amp;quot;)
                # Add thousands separators
                value &amp;lt;- format(value, big.mark = &amp;quot;,&amp;quot;)
                # Fix each label using the width of the widest number (incl. thousands separators)
                value &amp;lt;- format(value, width = 9, justify = &#39;right&#39;)
                bar_chart(value, width = width, fill = &amp;quot;#3fc1c9&amp;quot;)
            },
            # And left-align the columns
            align = &amp;quot;left&amp;quot;,
            # Use the operating system&#39;s default monospace font, and
            # preserve the white space to prevent it from being collapsed by default
            style = list(fontFamily = &amp;quot;monospace&amp;quot;, whiteSpace = &amp;quot;pre&amp;quot;)
        ),
        fail_rate = colDef(
            name = &amp;quot;Fail (%)&amp;quot;,
            defaultSortOrder = &amp;quot;desc&amp;quot;,
            #format = colFormat(percent = TRUE, digits = 1)
            
            # Render Bar charts using a custom cell render function
            cell = function(value){
                # Format as percentage with 1 decimal place
                value &amp;lt;- paste0(format(value * 100, nsmall = 1), &amp;quot;%&amp;quot;)
                # Fix width here to align single and double-digit percentages
                value &amp;lt;- format(value, width = 5, justify = &amp;quot;right&amp;quot;)
                bar_chart(value, width = value, fill = &amp;quot;#fc5185&amp;quot;, background = &amp;quot;#e1e1e1&amp;quot;)
            },
            # And left-align the columns
            align = &amp;quot;left&amp;quot;,
            style = list(fontFamily = &amp;quot;monospace&amp;quot;, whiteSpace = &amp;quot;pre&amp;quot;)
        )
    )
)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Decimals to Integers</title>
      <link>/technical_notes/example_tech/rstats_viz_scale_x/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_viz_scale_x/</guid>
      <description>&lt;h2 id=&#34;changing-the-x-axis-from-decimals-to-integers&#34;&gt;Changing the x-axis from decimals to integers&lt;/h2&gt;
&lt;p&gt;When creating plots in &lt;code&gt;ggplot2&lt;/code&gt; you&amp;rsquo;ll often want to customize the x-axis so that values appear on a certain interval. In the example below, I wanted to change the intervals from 0.25, 0.50, 0.75 to 1,2,3,4 and so on. In this specific instance, I wanted &lt;em&gt;each&lt;/em&gt; season of the show Friends to have its down tick on the x-axis (note: the show had ten seasons).&lt;/p&gt;
&lt;p&gt;This operation changes the x-axis ticks from having decimals to being integers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggplot)

ggplot(total_data, aes(x = season, y = episode, fill=imdb_rating)) +
    geom_tile() +
    scale_fill_gradient(low = &#39;#FFF580&#39;, high = &#39;#FF4238&#39;) +
    
    ## the seq() function defines the start and end numbers
    ## &#39;by =&#39; indicates the desired interval
    scale_x_continuous(breaks = seq(1,10, by = 1)) + 
    
    theme_classic()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GGPlot Flavored Treemaps</title>
      <link>/technical_notes/example_tech/rstats_viz_treemapify/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_viz_treemapify/</guid>
      <description>&lt;h2 id=&#34;treemapify&#34;&gt;Treemapify&lt;/h2&gt;
&lt;p&gt;There are several options for visualizing treemaps in R. This note focuses on  
&lt;a href=&#34;https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Treemapify&lt;/a&gt;, a package maintained by 
&lt;a href=&#34;https://github.com/wilkox&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;David Wilkins&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I favor this approach over the &lt;code&gt;treemap&lt;/code&gt; package because it is compatible with &lt;code&gt;ggplot2&lt;/code&gt; and allows users to access its&amp;rsquo; functionality.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example Treemap I created to visualize the dominant emotions displayed for the iconic 90&amp;rsquo;s sitcom, Friends. You can find out more about the 
&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-09-08/readme.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Friends dataset here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other visualizations I created for the Friends project can also be found 
&lt;a href=&#34;https://github.com/PaulApivat/tidytuesday/tree/master/2020/friends&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Below, we can see that &lt;code&gt;geom_treemap&lt;/code&gt;, &lt;code&gt;geom_treemap_subgroup_border&lt;/code&gt; and &lt;code&gt;geom_treemap_subgroup_text&lt;/code&gt; are layers that works seamlessly with other layers like &lt;code&gt;scale_fill_manual&lt;/code&gt;, &lt;code&gt;theme&lt;/code&gt;, and &lt;code&gt;labs&lt;/code&gt; that are staples of the ggplot2 package.&lt;/p&gt;
&lt;p&gt;Bottom line, it&amp;rsquo;s easier to customize treemaps from the &lt;code&gt;treemapify&lt;/code&gt; package than the &lt;code&gt;treemap&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(treemapify)

ggplot(friends_emo_tree, aes(area = n, label = speaker, subgroup = emotion)) +
    geom_treemap(aes(fill = emotion, alpha = n)) +
    geom_treemap_subgroup_border(color = &#39;white&#39;) +
    geom_treemap_subgroup_text(place = &#39;bottom&#39;, grow = T, alpha = 0.3, color = &#39;black&#39;,
                               min.size = 0) +
    geom_treemap_text(color = &#39;white&#39;, fontface = &#39;italic&#39;, place = &#39;centre&#39;, reflow = T) +
    scale_fill_manual(values = c(&#39;#FF4238&#39;, &#39;#FFDC00&#39;, &#39;#42A2D6&#39;, &#39;#9A0006&#39;, &#39;#FFF580&#39;, &#39;#00009E&#39;)) +
    theme(
        plot.background = element_rect(fill = &#39;#36454F&#39;),
        legend.position = &#39;none&#39;,
        title = element_text(colour = &#39;white&#39;, family = &#39;Friends&#39;)
    ) +
    labs(
        title = &#39;The One with the Dominant Emotions&#39;,
        caption = &#39;Viz: @paulapivat | Data: #TidyTuesday&#39;
    )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Visualize Scatterplots with Marginal Distribution using ggExtra</title>
      <link>/technical_notes/example_tech/data_viz_tip2/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/data_viz_tip2/</guid>
      <description>&lt;h2 id=&#34;marginal-distribution-with-ggplot2-and-ggextra&#34;&gt;Marginal Distribution with ggplot2 and ggExtra&lt;/h2&gt;
&lt;p&gt;The data in this example is from the UN 
&lt;a href=&#34;https://unstats.un.org/sdgs/indicators/database/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Statistics Division&lt;/a&gt; Sustainable Development Goal, Indicator 4.4.1.&lt;/p&gt;
&lt;p&gt;Also check out the 
&lt;a href=&#34;https://www.r-graph-gallery.com/277-marginal-histogram-for-ggplot2.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;r-graph-gallery.com&lt;/a&gt; for inspiration.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the breakdown:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Load Packages and Libraries&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The key here is the &lt;code&gt;ggExtra&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&#39;ggExtra&#39;)
library(ggExtra)
library(tidyverse)

&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Create a basic scatter plot&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The key here is using &lt;code&gt;pivot_wider&lt;/code&gt; to give all &lt;code&gt;Type of skill&lt;/code&gt; their own columns. We&amp;rsquo;ll then pick out specific columns (i.e., COPA, EMAIL, PCPR) to summarize, then plot on the x- and y- axes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Basic Scatter Plot (color cluster by Gender)
p &amp;lt;- data %&amp;gt;%
    select(GeoAreaName, TimePeriod, Sex, `Type of skill`, Value) %&amp;gt;%
    group_by(GeoAreaName, TimePeriod, Sex, `Type of skill`, Value) %&amp;gt;%
    pivot_wider(names_from = `Type of skill`, values_from = Value) %&amp;gt;%
    mutate(
        COPA = as.numeric(COPA),
        EMAIL = as.numeric(EMAIL),
        PCPR = as.numeric(PCPR)
    ) %&amp;gt;%
    # Group by GeoAreaName, across TimePeriod, Sex
    group_by(GeoAreaName, Sex) %&amp;gt;%
    summarize(
        avg_COPA = mean(COPA, na.rm = TRUE),
        avg_EMAIL = mean(EMAIL, na.rm = TRUE),
        avg_PCPR = mean(PCPR, na.rm = TRUE)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    ggplot(aes(x = avg_PCPR, y = avg_EMAIL, color = Sex)) + 
    geom_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Use &lt;code&gt;ggMarginal()&lt;/code&gt; to create the marginal distribution along the side of the scatter plots. This is a function from the &lt;code&gt;ggExtra&lt;/code&gt; package.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# Scatter Plot with Marginal Distribution
ggMarginal(p, type = &#39;histogram&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This particular chart is especially useful to highlight different distributions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Calculating 25th, 50th and 75th Percentile of Column Values</title>
      <link>/technical_notes/example_tech/rstats_tip4/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_tip4/</guid>
      <description>&lt;h2 id=&#34;calculating-percentiles&#34;&gt;Calculating Percentiles&lt;/h2&gt;
&lt;p&gt;When we have a list of values in a column, how can we determine which values are under/over the 25th percentile, 50th percentile or 75th percentile?&lt;/p&gt;
&lt;p&gt;Here the example are countries&amp;rsquo; &lt;em&gt;average percentages&lt;/em&gt; of the population with, broadly speaking, ICT Skills as determine by the Sustainable Development Goals, 
&lt;a href=&#34;https://unstats.un.org/wiki/display/SDGeHandbook/Indicator&amp;#43;4.4.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Indicator 4.4.1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are three methods. First, manually calculating values for the 25th, 50th and 75th percentile with the &lt;code&gt;quantile()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Country mean_values at 25th, 50th and 75th percentile 

data %&amp;gt;%
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod, Units) %&amp;gt;%
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(Value = as.numeric(Value)) %&amp;gt;%
    group_by(GeoAreaName) %&amp;gt;%
    summarize(
        mean_value = mean(Value)
    ) %&amp;gt;%
    mutate(
        min_mean = min(mean_value),
        iqr_25_percentile = quantile(mean_value, probs = c(0.25)),
        iqr_50_percentile = quantile(mean_value, probs = c(0.50)),
        iqr_75_percentile = quantile(mean_value, probs = c(0.75)),
        max_mean = max(mean_value)
    ) %&amp;gt;%
    arrange(desc(mean_value)) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second approach is to use the &lt;code&gt;ntile()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Creating bins using ntile()

data %&amp;gt;%
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod, Units) %&amp;gt;%
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(Value = as.numeric(Value)) %&amp;gt;%
    group_by(GeoAreaName) %&amp;gt;%
    summarize(
        mean_value = mean(Value)
    ) %&amp;gt;%
    mutate(
        mean_value_binned = ntile(mean_value, 4)
    ) %&amp;gt;%
    arrange(desc(mean_value))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The third approach uses the &lt;code&gt;purrr&lt;/code&gt; package and the &lt;code&gt;partial&lt;/code&gt; function that can be used with &lt;code&gt;dplyr&#39;s&lt;/code&gt; &lt;code&gt;summarize_at()&lt;/code&gt; function. Check out the 
&lt;a href=&#34;https://tbradley1013.github.io/2018/10/01/calculating-quantiles-for-groups-with-dplyr-summarize-and-purrr-partial/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
## Using purrr
library(purrr)
    
p &amp;lt;- c(0.25, 0.50, 0.75)

p_names &amp;lt;- map_chr(p, ~paste0(.x*100, &amp;quot;%&amp;quot;))

p_funs &amp;lt;- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %&amp;gt;%
    set_names(nm = p_names)

p_funs

data %&amp;gt;%
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod, Units) %&amp;gt;%
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(Value = as.numeric(Value)) %&amp;gt;%
    group_by(GeoAreaName) %&amp;gt;%
    summarize(
        mean_value = mean(Value)
    ) %&amp;gt;%
    summarize_at(vars(mean_value), funs(!!!p_funs))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Does order of operation matter among dplyr functions?</title>
      <link>/technical_notes/example_tech/rstats_tip5/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_tip5/</guid>
      <description>&lt;h2 id=&#34;data-wrangling-does-order-matter&#34;&gt;Data Wrangling: Does Order matter?&lt;/h2&gt;
&lt;p&gt;In short, yes, it matters. But when and where?&lt;/p&gt;
&lt;p&gt;Below are examples to highlight when function order matters and when it doesn&amp;rsquo;t. The source for the raw data used in this illustration are from the United Nations&amp;rsquo; Statistics Division for 
&lt;a href=&#34;https://unstats.un.org/sdgs/indicators/database/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sustainable Development Goals&lt;/a&gt; (SDG) Indicators (Goal 4, Target 4.4).&lt;/p&gt;
&lt;p&gt;See also UN Statistics Wiki on 
&lt;a href=&#34;https://unstats.un.org/wiki/display/SDGeHandbook/Indicator&amp;#43;4.4.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Indicator 4.4.1&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Example chain of functions to determine proportion of Thailand&#39;s population to have certain ICT skills in 2018

data %&amp;gt;%
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod) %&amp;gt;%
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(
        Value = as.double(Value)
    ) %&amp;gt;%
    filter(GeoAreaName == &#39;Thailand&#39;) %&amp;gt;% 
    filter(TimePeriod == 2018) %&amp;gt;% 
    group_by(type_of_skill) %&amp;gt;%
    summarize(
        mean_value = mean(Value),
        median_value = median(Value)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    arrange(desc(mean_value))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the &lt;code&gt;filter&lt;/code&gt; functions are moved up to be before &lt;code&gt;rename&lt;/code&gt; and &lt;code&gt;mutate&lt;/code&gt;. The ordering here does &lt;strong&gt;not&lt;/strong&gt; matter.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data %&amp;gt;%
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod) %&amp;gt;%
    
    # putting filter before rename, mutate is fine
    filter(GeoAreaName == &#39;Thailand&#39;) %&amp;gt;% 
    filter(TimePeriod == 2018) %&amp;gt;% 
    
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(
        Value = as.double(Value)
    ) %&amp;gt;%
    group_by(type_of_skill) %&amp;gt;%
    summarize(
        mean_value = mean(Value),
        median_value = median(Value)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    arrange(desc(mean_value))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Furthermore, we could even experiment with the &lt;code&gt;filter&lt;/code&gt; function being before or after &lt;code&gt;select&lt;/code&gt;. Here, ordering also does &lt;strong&gt;not&lt;/strong&gt; matter.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data %&amp;gt;%
    filter(GeoAreaName == &#39;Thailand&#39;) %&amp;gt;% 
    filter(TimePeriod == 2018) %&amp;gt;% 
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod) %&amp;gt;%
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(
        Value = as.double(Value)
    ) %&amp;gt;%
    group_by(type_of_skill) %&amp;gt;%
    summarize(
        mean_value = mean(Value),
        median_value = median(Value)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    arrange(desc(mean_value))

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is there order &lt;strong&gt;does&lt;/strong&gt; matter. When we try to move the two &lt;code&gt;filter&lt;/code&gt; functions below &lt;code&gt;group_by&lt;/code&gt;, &lt;code&gt;summarize&lt;/code&gt; and &lt;code&gt;ungroup&lt;/code&gt;, the filtering does &lt;em&gt;not&lt;/em&gt; work. By the time we get to &lt;code&gt;filter(GeoAreaName == &#39;Thailand&#39;)&lt;/code&gt; in this example, GeoAreaName has been removed because we did &lt;em&gt;not&lt;/em&gt; &lt;code&gt;group_by&lt;/code&gt; &lt;code&gt;GeoAreaName&lt;/code&gt;, so we get an error.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Running this code, we&#39;ll get the ERROR: Problem with `filter()` input `..1`. x object &#39;GeoAreaName&#39; not found â¹ Input `..1` is 
# `GeoAreaName == &amp;quot;Thailand&amp;quot;`.

data %&amp;gt;%
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod) %&amp;gt;%
    relocate(Sex, Value, GeoAreaName) %&amp;gt;%
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(
        Value = as.double(Value)
    ) %&amp;gt;%
    # filter was previously here
    group_by(type_of_skill) %&amp;gt;%
    summarize(
        mean_value = mean(Value),
        median_value = median(Value)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    # moving filter down below group_by &amp;amp; summarize() does not work
    filter(GeoAreaName == &#39;Thailand&#39;) %&amp;gt;% 
    filter(TimePeriod == 2018) %&amp;gt;% 
    arrange(desc(mean_value))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, if we want to use &lt;code&gt;filter&lt;/code&gt; on the &lt;em&gt;results&lt;/em&gt; of the &lt;code&gt;mutate&lt;/code&gt; function, we see that order &lt;strong&gt;does&lt;/strong&gt; matter. By the time we get to the final &lt;code&gt;filter(Value &amp;lt; 10)&lt;/code&gt;, the &lt;code&gt;Value&lt;/code&gt; variable is no longer available to us because we did not &lt;code&gt;group_by&lt;/code&gt; and &lt;code&gt;summarize&lt;/code&gt; by Value (instead we created &lt;code&gt;mean_value&lt;/code&gt; and &lt;code&gt;median_value&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
data %&amp;gt;%
    filter(GeoAreaName == &#39;Thailand&#39;) %&amp;gt;% 
    filter(TimePeriod == 2018) %&amp;gt;% 
    select(GeoAreaName, Value, Sex, `Type of skill`, TimePeriod) %&amp;gt;%
    rename(type_of_skill = `Type of skill`) %&amp;gt;%
    mutate(
        Value = as.double(Value)
    ) %&amp;gt;%
    # filtering for Values less than 10 does work here
    filter(Value &amp;lt; 10) %&amp;gt;%
    group_by(type_of_skill) %&amp;gt;%
    summarize(
        mean_value = mean(Value),
        median_value = median(Value)
    ) %&amp;gt;%
    ungroup() %&amp;gt;%
    arrange(desc(mean_value)) %&amp;gt;%
    # filter for Values less than 10 does not work down here
    filter(Value &amp;lt; 10)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating a dendrogram with R and ggraph</title>
      <link>/technical_notes/example_tech/data_viz_tip1/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/data_viz_tip1/</guid>
      <description>&lt;h2 id=&#34;nested-and-hierarchical-data&#34;&gt;Nested and Hierarchical Data&lt;/h2&gt;
&lt;p&gt;When you have data with multiple subgroups, one option is to treat them as nested and/or hierarchical data.&lt;/p&gt;
&lt;p&gt;In this technical note, I&amp;rsquo;ll outline how to create a dendrogram.&lt;/p&gt;
&lt;p&gt;The data used is from the 
&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-08-18/readme.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Extinct Plants&lt;/a&gt; data set from 
&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TidyTuesday&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the breakdown:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Load Packages and Libraries&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;ggraph&amp;quot;)
install.packages(&amp;quot;igraph&amp;quot;)
library(ggraph)
library(igraph)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Create a data frame with three levels&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Taking the &lt;code&gt;plants&lt;/code&gt; data frame, I do some wrangling to get the desired columns.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plants_data &amp;lt;- plants %&amp;gt;%
    select(group, binomial_name) %&amp;gt;%
    group_by(group) %&amp;gt;%
    arrange(group) %&amp;gt;% 
    mutate(
        level1 = &#39;center&#39;,
        level2 = group,
        level3 = binomial_name
    ) %&amp;gt;%
    # important to ungroup here
    ungroup() %&amp;gt;%
    select(level1:level3) 

&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Create an edge list&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# transform it to an edge list
plants_edges_level1_2 &amp;lt;- plants_data %&amp;gt;% 
    select(level1, level2) %&amp;gt;% 
    unique %&amp;gt;% 
    rename(from=level1, to=level2)

plants_edges_level2_3 &amp;lt;- plants_data %&amp;gt;% 
    select(level2, level3) %&amp;gt;% 
    unique %&amp;gt;% 
    rename(from=level2, to=level3)

plants_edge_list=rbind(plants_edges_level1_2, plants_edges_level2_3)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Plot a basic chart&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Because I have many observations, I&amp;rsquo;m optiing to use a &amp;ldquo;circular&amp;rdquo; dendrogram.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# plot plant dendogram
plantgraph &amp;lt;- graph_from_data_frame(plants_edge_list)

ggraph(plantgraph, layout = &amp;quot;dendrogram&amp;quot;, circular = TRUE) +
    geom_edge_diagonal() +
    geom_node_point() +
    theme_void()
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Add text to the end of the edges&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# add text &amp;amp; color(leaf)
ggraph(plantgraph, layout = &amp;quot;dendrogram&amp;quot;, circular = TRUE) +
    geom_edge_diagonal() +
    geom_node_text(aes(label = name, filter=leaf), hjust = 1, size = 1) +
    geom_node_point()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: The breakdown of plant groupings are listed below. We can see the Flowering Plants &lt;em&gt;disproportionately&lt;/em&gt; out number other groups like Ferns &amp;amp; Allies, Cycad, Mosses, Algae and Conifer.&lt;/p&gt;
&lt;p&gt;When visualizing, we&amp;rsquo;re better off separating Flowering Plants from the other groups.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plants %&amp;gt;%
    group_by(group) %&amp;gt;%
    tally(sort = TRUE)

# A tibble: 6 x 2
  group                n
  &amp;lt;chr&amp;gt;            &amp;lt;int&amp;gt;
1 Flowering Plant    471
2 Ferns and Allies    13
3 Cycad                8
4 Mosses               4
5 Algae                3
6 Conifer              1

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;rsquo;s a sample picture of the plants&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./png/data_viz_tip1_pic1.png&#34; alt=&#34;dendrogram&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./data_viz_tip1_pic1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;















&lt;figure id=&#34;figure-dendrogram&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./data_viz_tip1_pic1.png&#34; data-caption=&#34;Dendrogram.&#34;&gt;


  &lt;img src=&#34;./data_viz_tip1_pic1.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Dendrogram.
  &lt;/figcaption&gt;


&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Using the pivot_wider() function</title>
      <link>/technical_notes/example_tech/rstats_tip3/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_tip3/</guid>
      <description>&lt;p&gt;With 
&lt;a href=&#34;https://www.tidyverse.org/blog/2019/09/tidyr-1-0-0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tidyr 1.0.0&lt;/a&gt;, there are several enhancements, one of which are &lt;code&gt;pivot_wider()&lt;/code&gt; and &lt;code&gt;pivot_longer()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-pivot_wider&#34;&gt;Using pivot_wider()&lt;/h2&gt;
&lt;p&gt;In another 
&lt;a href=&#34;https://paulapivat.com/technical_notes/example_tech/rstats_tip2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;post&lt;/a&gt;, the &lt;code&gt;spread()&lt;/code&gt; function was introduced as a way to observe the &amp;ldquo;tidy&amp;rdquo; principle of data formatting for analysis.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;pivot_wider()&lt;/code&gt; function is an updated of &lt;code&gt;spread()&lt;/code&gt; and is much more intuitive. Here&amp;rsquo;s how it works:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# PIVOT_WIDER - even better than Spread

data %&amp;gt;%
    filter(GeoAreaName==&amp;quot;Morocco&amp;quot; | GeoAreaName==&amp;quot;Qatar&amp;quot;) %&amp;gt;% 
    select(GeoAreaName, TimePeriod, Sex, `Type of skill`, Value) %&amp;gt;%
    group_by(GeoAreaName, TimePeriod, Sex, `Type of skill`, Value) %&amp;gt;%
    pivot_wider(names_from = `Type of skill`, values_from = Value) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this data set, &lt;code&gt;Type of skill&lt;/code&gt; represents, broadly speaking, ICT Skills broken down into eight categories in this column. By using &lt;code&gt;pivot_wider()&lt;/code&gt; each sub-category of ICT Skills gets it&amp;rsquo;s &lt;strong&gt;own&lt;/strong&gt; column, thus making the overall data frame &lt;em&gt;wider&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-pivot_longer&#34;&gt;Using pivot_longer()&lt;/h2&gt;
&lt;p&gt;Conversely, there&amp;rsquo;s also &lt;code&gt;pivot_longer&lt;/code&gt; for the opposite effect. This next code chunk is part of my attempt for 
&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TidyTuesday&lt;/a&gt; (&amp;lsquo;Extinct Plants&amp;rsquo; for the week of 2020-08-18)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;cols&lt;/code&gt; parameter determines the range of columns to be changed from wide to long. The &lt;code&gt;names_to&lt;/code&gt; parameter sets the new column name and &lt;code&gt;values_to&lt;/code&gt; indicates the value of the new columns.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# PIVOT_LONGER - better than Gather

plants %&amp;gt;%
    select(binomial_name, threat_AA:action_NA) %&amp;gt;%
    pivot_longer(cols = threat_AA:action_NA, names_to = &amp;quot;action&amp;quot;, values_to = &amp;quot;count&amp;quot;) %&amp;gt;%
    ggplot(aes(x = binomial_name, y = action, fill = count)) +
    geom_tile() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1))

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Use the spread() function</title>
      <link>/technical_notes/example_tech/rstats_tip2/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_tip2/</guid>
      <description>&lt;p&gt;One principle of &lt;code&gt;tidy&lt;/code&gt; data is to change from wide to long; and conversely, long to wide.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a concrete example:&lt;/p&gt;
&lt;h2 id=&#34;using-spread&#34;&gt;Using spread()&lt;/h2&gt;
&lt;p&gt;The first part of the below pre-processing steps include subsetting the original data frame (data) by selecting two countries for comparison (Morocco and Qatar) on specific variables such as: &lt;code&gt;GeoAreaName&lt;/code&gt;, &lt;code&gt;TimePeriod&lt;/code&gt;, &lt;code&gt;Sex&lt;/code&gt;, &lt;code&gt;Type of skill&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then employing &lt;code&gt;group_by&lt;/code&gt; to ensure all rows are unique. The next line is key as it addresses an error that each row must be marked by a unique id key.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;spread()&lt;/code&gt; function allows us to see each countries&amp;rsquo; relative performance on various 
&lt;a href=&#34;http://tcg.uis.unesco.org/4-4-1-proportion-of-youth-and-adults-with-information-and-communications-technology-ict-skills-by-type-of-skill/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ICT skills&lt;/a&gt;. Please consult meta-data for more details.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data %&amp;gt;%
    filter(GeoAreaName==&amp;quot;Morocco&amp;quot; | GeoAreaName==&amp;quot;Qatar&amp;quot;) %&amp;gt;% 
    select(GeoAreaName, TimePeriod, Sex, `Type of skill`, Value) %&amp;gt;%
    group_by(GeoAreaName, TimePeriod, Sex, `Type of skill`, Value) %&amp;gt;%
	
    # Error: Each row of output must be identified by a unique combination of keys.
    # rowid_to_column() address this error
	
    tibble::rowid_to_column() %&amp;gt;%
    spread(key = `Type of skill`, value = Value)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Make your work reproducible</title>
      <link>/technical_notes/example_tech/rstats_tip1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/rstats_tip1/</guid>
      <description>&lt;p&gt;Understanding reproducibility and the &lt;code&gt;set.seed()&lt;/code&gt; function in &lt;code&gt;R&lt;/code&gt; is best achieved through generating various random numbers. Here are some more tips for making your work reproducible:&lt;/p&gt;
&lt;h2 id=&#34;using-setseed&#34;&gt;Using set.seed()&lt;/h2&gt;
&lt;p&gt;Example of reproducibility in fitting ML models using set.seed()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#First Line
set.seed(1234)   

#Second Line
model_05_rand_forest_ranger &amp;lt;- rand_forest(
    mode = &amp;quot;regression&amp;quot;, mtry = 4, trees = 1000, min_n = 10
    ) %&amp;gt;%
    set_engine(&amp;quot;ranger&amp;quot;, splitrule = &amp;quot;extratrees&amp;quot;, importance = &amp;quot;impurity&amp;quot;) %&amp;gt;%
    fit(price ~ ., data = train_tbl %&amp;gt;% select(-id, -model, -model_tier))

#Third Line
model_05_rand_forest_ranger %&amp;gt;% calc_metrics(test_tbl)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;random-numbers&#34;&gt;Random Numbers&lt;/h2&gt;
&lt;p&gt;Here are several ways to get random numbers. These examples are informed by the &lt;code&gt;R Cookbook&lt;/code&gt;, see 
&lt;a href=&#34;http://www.cookbook-r.com/Numbers/Generating_random_numbers/#:~:text=For%20uniformly%20distributed%20%28flat%29%20random,is%20from%200%20to%201.&amp;amp;text=To%20generate%20numbers%20from%20a,the%20standard%20deviation%20is%201.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# get one random number using runif() from base-R, stats package
# default 0 to 1
runif(1)

# get two random numbers
runif(2)

# get a vector of three random numbers
# increase range beyond the default, -10 to 110
runif(3, min = -10, max = 110)

# ensure three random numbers do *not* have decimals
# use floor() function to round down
floor(runif(3, min = -10, max = 110))

# sample() function does the same thing - using just one function
# replace parameter: should sampling be with or without replacement?
sample(-10:110, 3, replace = TRUE)

# Reproducibility
# use set.seed() before any of the aforementioned random number generators

set.seed(123)
sample(-10:110, 3, replace = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;random-numbers-from-a-normal-distribution&#34;&gt;Random Numbers from a Normal Distribution&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# Get five random numbers from a normal distribution
# Here the default is mean = 0, standard deviation = 1.
rnorm(5)

# Change mean and standard deviation away from default
rnorm(5, mean = 66, sd = 12)

# Ensure reproducibility with set.seed()
set.seed(123)
rnorm(5, mean = 66, sd = 12)

# Ensure normal distribution by setting sufficiently large number with rnorm()
# Ensure reproducibility
# Plot a histogram

set.seed(123)
x &amp;lt;- rnorm(500, mean = 66, sd = 12)
hist(x)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Technical Notes Page 2</title>
      <link>/technical_notes/example_tech/technical_notes2/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/technical_notes/example_tech/technical_notes2/</guid>
      <description>&lt;p&gt;Here are some more tips for getting started with Academic:&lt;/p&gt;
&lt;h2 id=&#34;technical-tip-3&#34;&gt;Technical Tip 3&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
&lt;h2 id=&#34;technical-tip-4&#34;&gt;Technical Tip 4&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
